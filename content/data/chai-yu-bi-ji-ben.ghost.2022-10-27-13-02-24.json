{"meta":{"exported_on":1666875744726,"version":"5.20.0"},"data":{"newsletters":[{"id":"635a807457207246b927a5e7","uuid":"60c527ca-8f05-439f-badf-73e2bd8517a0","name":"柴魚筆記本","description":null,"feedback_enabled":0,"slug":"default-newsletter","sender_name":null,"sender_email":null,"sender_reply_to":"newsletter","status":"active","visibility":"members","subscribe_on_signup":1,"sort_order":0,"header_image":null,"show_header_icon":1,"show_header_title":1,"title_font_category":"sans_serif","title_alignment":"center","show_feature_image":1,"body_font_category":"sans_serif","footer_content":null,"show_badge":1,"show_header_name":0,"created_at":"2022-10-27 12:58:28","updated_at":"2022-10-27 13:00:58"}],"posts":[{"id":"635a807457207246b927a655","uuid":"988c7141-e1b7-4abc-b37f-22a1313bfc95","title":"Coming soon","slug":"coming-soon","mobiledoc":"{\"version\":\"0.3.1\",\"atoms\":[],\"cards\":[],\"markups\":[[\"a\",[\"href\",\"#/portal/\"]]],\"sections\":[[1,\"p\",[[0,[],0,\"This is 柴魚筆記本, a brand new site by Katsuobushi that's just getting started. Things will be up and running here shortly, but you can \"],[0,[0],1,\"subscribe\"],[0,[],0,\" in the meantime if you'd like to stay up to date and receive emails when new content is published!\"]]]],\"ghostVersion\":\"4.0\"}","lexical":null,"html":"<p>This is 柴魚筆記本, a brand new site by Katsuobushi that's just getting started. Things will be up and running here shortly, but you can <a href=\"#/portal/\">subscribe</a> in the meantime if you'd like to stay up to date and receive emails when new content is published!</p>","comment_id":"635a807457207246b927a655","plaintext":"This is 柴魚筆記本, a brand new site by Katsuobushi that's just getting started. Things will be up and running here shortly, but you can subscribe in the meantime if you'd like to stay up to date and receive emails when new content is published!","feature_image":"https://static.ghost.org/v4.0.0/images/feature-image.jpg","featured":0,"type":"post","status":"published","locale":null,"visibility":"public","email_recipient_filter":"all","created_at":"2022-10-27 12:58:28","created_by":"1","updated_at":"2022-10-27 13:00:58","updated_by":"635a807457207246b927a655","published_at":"2022-10-27 12:58:28","published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null,"newsletter_id":null},{"id":"635a807557207246b927a657","uuid":"73803523-c75b-4ac3-9cff-9c1b7ee8247f","title":"About this site","slug":"about","mobiledoc":"{\"version\":\"0.3.1\",\"atoms\":[],\"cards\":[[\"hr\",{}]],\"markups\":[[\"a\",[\"href\",\"https://ghost.org\"]]],\"sections\":[[1,\"p\",[[0,[],0,\"柴魚筆記本 is an independent publication launched in October 2022 by Katsuobushi. If you subscribe today, you'll get full access to the website as well as email newsletters about new content when it's available. Your subscription makes this site possible, and allows 柴魚筆記本 to continue to exist. Thank you!\"]]],[1,\"h3\",[[0,[],0,\"Access all areas\"]]],[1,\"p\",[[0,[],0,\"By signing up, you'll get access to the full archive of everything that's been published before and everything that's still to come. Your very own private library.\"]]],[1,\"h3\",[[0,[],0,\"Fresh content, delivered\"]]],[1,\"p\",[[0,[],0,\"Stay up to date with new content sent straight to your inbox! No more worrying about whether you missed something because of a pesky algorithm or news feed.\"]]],[1,\"h3\",[[0,[],0,\"Meet people like you\"]]],[1,\"p\",[[0,[],0,\"Join a community of other subscribers who share the same interests.\"]]],[10,0],[1,\"h3\",[[0,[],0,\"Start your own thing\"]]],[1,\"p\",[[0,[],0,\"Enjoying the experience? Get started for free and set up your very own subscription business using \"],[0,[0],1,\"Ghost\"],[0,[],0,\", the same platform that powers this website.\"]]]],\"ghostVersion\":\"4.0\"}","lexical":null,"html":"<p>柴魚筆記本 is an independent publication launched in October 2022 by Katsuobushi. If you subscribe today, you'll get full access to the website as well as email newsletters about new content when it's available. Your subscription makes this site possible, and allows 柴魚筆記本 to continue to exist. Thank you!</p><h3 id=\"access-all-areas\">Access all areas</h3><p>By signing up, you'll get access to the full archive of everything that's been published before and everything that's still to come. Your very own private library.</p><h3 id=\"fresh-content-delivered\">Fresh content, delivered</h3><p>Stay up to date with new content sent straight to your inbox! No more worrying about whether you missed something because of a pesky algorithm or news feed.</p><h3 id=\"meet-people-like-you\">Meet people like you</h3><p>Join a community of other subscribers who share the same interests.</p><hr><h3 id=\"start-your-own-thing\">Start your own thing</h3><p>Enjoying the experience? Get started for free and set up your very own subscription business using <a href=\"https://ghost.org\">Ghost</a>, the same platform that powers this website.</p>","comment_id":"635a807557207246b927a657","plaintext":"柴魚筆記本 is an independent publication launched in October 2022 by Katsuobushi. If you subscribe today, you'll get full access to the website as well as email newsletters about new content when it's available. Your subscription makes this site possible, and allows 柴魚筆記本 to continue to exist. Thank you!\n\n\nAccess all areas\n\nBy signing up, you'll get access to the full archive of everything that's been published before and everything that's still to come. Your very own private library.\n\n\nFresh content, delivered\n\nStay up to date with new content sent straight to your inbox! No more worrying about whether you missed something because of a pesky algorithm or news feed.\n\n\nMeet people like you\n\nJoin a community of other subscribers who share the same interests.\n\n\nStart your own thing\n\nEnjoying the experience? Get started for free and set up your very own subscription business using Ghost, the same platform that powers this website.","feature_image":null,"featured":0,"type":"page","status":"published","locale":null,"visibility":"public","email_recipient_filter":"all","created_at":"2022-10-27 12:58:29","created_by":"1","updated_at":"2022-10-27 13:00:58","updated_by":"635a807557207246b927a657","published_at":"2022-10-27 12:58:29","published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null,"newsletter_id":null},{"id":"635a812457207246b927a807","uuid":"9b4ecfc1-a7ae-4010-92c0-ff33c39cc24e","title":"[Ghost]使用Ghost和GitHub Pages建立網頁","slug":"ghost-github-webpage","mobiledoc":"{\"version\":\"0.3.1\",\"atoms\":[[\"soft-return\",\"\",{}],[\"soft-return\",\"\",{}],[\"soft-return\",\"\",{}],[\"soft-return\",\"\",{}],[\"soft-return\",\"\",{}],[\"soft-return\",\"\",{}],[\"soft-return\",\"\",{}],[\"soft-return\",\"\",{}],[\"soft-return\",\"\",{}],[\"soft-return\",\"\",{}]],\"cards\":[[\"hr\",{\"_config\":{\"url\":\"http://localhost:2368/\",\"adminUrl\":null,\"apiVersions\":{\"all\":[\"v2\",\"v3\",\"canary\"],\"canary\":{\"admin\":\"canary/admin\",\"content\":\"canary/content\",\"members\":\"canary/members\"},\"v3\":{\"admin\":\"v3/admin\",\"content\":\"v3/content\",\"members\":\"v3/members\"},\"v2\":{\"admin\":\"v2/admin\",\"content\":\"v2/content\"}},\"slugs\":[\"ghost\",\"rss\",\"amp\"],\"redirectCacheMaxAge\":31536000,\"baseApiPath\":\"/ghost/api\",\"defaultApiVersion\":\"v3\",\"defaultApiType\":\"content\",\"staticImageUrlPrefix\":\"content/images\",\"cardTransformers\":[{\"name\":\"card-markdown\",\"type\":\"dom\"},{\"name\":\"code\",\"type\":\"dom\"},{\"name\":\"embed\",\"type\":\"dom\"},{\"name\":\"bookmark\",\"type\":\"dom\"},{\"name\":\"hr\",\"type\":\"dom\"},{\"name\":\"html\",\"type\":\"dom\"},{\"name\":\"image\",\"type\":\"dom\"},{\"name\":\"markdown\",\"type\":\"dom\"},{\"name\":\"gallery\",\"type\":\"dom\"}]},\"_defaultApiPathOptions\":{\"baseApiPath\":\"/ghost/api\",\"version\":\"v3\",\"type\":\"content\",\"apiVersions\":{\"all\":[\"v2\",\"v3\",\"canary\"],\"canary\":{\"admin\":\"canary/admin\",\"content\":\"canary/content\",\"members\":\"canary/members\"},\"v3\":{\"admin\":\"v3/admin\",\"content\":\"v3/content\",\"members\":\"v3/members\"},\"v2\":{\"admin\":\"v2/admin\",\"content\":\"v2/content\"}}}}],[\"markdown\",{\"markdown\":\"    npm install ghost-cli@latest -g\"}],[\"markdown\",{\"markdown\":\"    ghost install local\"}],[\"image\",{\"src\":\"__GHOST_URL__/content/images/2019/11/bandicam-2019-12-01-00-43-12-343-2.jpg\"}],[\"markdown\",{\"markdown\":\"    git init git add -A git commit -m \\\"Initial repository\\\"\"}],[\"markdown\",{\"markdown\":\"    npm install \\n    git add -A \\n    git commit -m 'Installed Node dependencies'\"}],[\"markdown\",{\"markdown\":\"    npm install -g knex-migrator\"}],[\"markdown\",{\"markdown\":\"    knex-migrator\"}],[\"hr\",{\"_config\":{\"url\":\"http://localhost:2368/\",\"adminUrl\":null,\"apiVersions\":{\"all\":[\"v2\",\"v3\",\"canary\"],\"canary\":{\"admin\":\"canary/admin\",\"content\":\"canary/content\",\"members\":\"canary/members\"},\"v3\":{\"admin\":\"v3/admin\",\"content\":\"v3/content\",\"members\":\"v3/members\"},\"v2\":{\"admin\":\"v2/admin\",\"content\":\"v2/content\"}},\"slugs\":[\"ghost\",\"rss\",\"amp\"],\"redirectCacheMaxAge\":31536000,\"baseApiPath\":\"/ghost/api\",\"defaultApiVersion\":\"v3\",\"defaultApiType\":\"content\",\"staticImageUrlPrefix\":\"content/images\",\"cardTransformers\":[{\"name\":\"card-markdown\",\"type\":\"dom\"},{\"name\":\"code\",\"type\":\"dom\"},{\"name\":\"embed\",\"type\":\"dom\"},{\"name\":\"bookmark\",\"type\":\"dom\"},{\"name\":\"hr\",\"type\":\"dom\"},{\"name\":\"html\",\"type\":\"dom\"},{\"name\":\"image\",\"type\":\"dom\"},{\"name\":\"markdown\",\"type\":\"dom\"},{\"name\":\"gallery\",\"type\":\"dom\"}]},\"_defaultApiPathOptions\":{\"baseApiPath\":\"/ghost/api\",\"version\":\"v3\",\"type\":\"content\",\"apiVersions\":{\"all\":[\"v2\",\"v3\",\"canary\"],\"canary\":{\"admin\":\"canary/admin\",\"content\":\"canary/content\",\"members\":\"canary/members\"},\"v3\":{\"admin\":\"v3/admin\",\"content\":\"v3/content\",\"members\":\"v3/members\"},\"v2\":{\"admin\":\"v2/admin\",\"content\":\"v2/content\"}}}}],[\"markdown\",{\"markdown\":\"    ghost start\"}],[\"image\",{\"src\":\"__GHOST_URL__/content/images/2019/11/bandicam-2019-12-01-00-50-41-339-1.jpg\"}],[\"image\",{\"src\":\"__GHOST_URL__/content/images/2019/11/bandicam-2019-12-01-00-54-54-621-1.jpg\"}],[\"image\",{\"src\":\"__GHOST_URL__/content/images/2019/11/bandicam-2019-12-01-00-54-57-345-1.jpg\"}],[\"image\",{\"src\":\"__GHOST_URL__/content/images/2019/11/bandicam-2019-12-01-00-55-57-353-1.jpg\"}],[\"markdown\",{\"markdown\":\"    git add -A \\n    git commit -m 'Finished local Ghost setup'\"}],[\"hr\",{\"_config\":{\"url\":\"http://localhost:2368/\",\"adminUrl\":null,\"apiVersions\":{\"all\":[\"v2\",\"v3\",\"canary\"],\"canary\":{\"admin\":\"canary/admin\",\"content\":\"canary/content\",\"members\":\"canary/members\"},\"v3\":{\"admin\":\"v3/admin\",\"content\":\"v3/content\",\"members\":\"v3/members\"},\"v2\":{\"admin\":\"v2/admin\",\"content\":\"v2/content\"}},\"slugs\":[\"ghost\",\"rss\",\"amp\"],\"redirectCacheMaxAge\":31536000,\"baseApiPath\":\"/ghost/api\",\"defaultApiVersion\":\"v3\",\"defaultApiType\":\"content\",\"staticImageUrlPrefix\":\"content/images\",\"cardTransformers\":[{\"name\":\"card-markdown\",\"type\":\"dom\"},{\"name\":\"code\",\"type\":\"dom\"},{\"name\":\"embed\",\"type\":\"dom\"},{\"name\":\"bookmark\",\"type\":\"dom\"},{\"name\":\"hr\",\"type\":\"dom\"},{\"name\":\"html\",\"type\":\"dom\"},{\"name\":\"image\",\"type\":\"dom\"},{\"name\":\"markdown\",\"type\":\"dom\"},{\"name\":\"gallery\",\"type\":\"dom\"}]},\"_defaultApiPathOptions\":{\"baseApiPath\":\"/ghost/api\",\"version\":\"v3\",\"type\":\"content\",\"apiVersions\":{\"all\":[\"v2\",\"v3\",\"canary\"],\"canary\":{\"admin\":\"canary/admin\",\"content\":\"canary/content\",\"members\":\"canary/members\"},\"v3\":{\"admin\":\"v3/admin\",\"content\":\"v3/content\",\"members\":\"v3/members\"},\"v2\":{\"admin\":\"v2/admin\",\"content\":\"v2/content\"}}}}],[\"markdown\",{\"markdown\":\"    wget --mirror --convert-links --page-requisites -nH --no-parent -P docs http://localhost:2368/\"}],[\"image\",{\"src\":\"__GHOST_URL__/content/images/2019/11/bandicam-2019-12-01-01-13-41-348-1.jpg\"}],[\"image\",{\"src\":\"__GHOST_URL__/content/images/2019/11/bandicam-2019-12-01-01-19-16-765-1.jpg\"}],[\"image\",{\"src\":\"__GHOST_URL__/content/images/2019/11/bandicam-2019-12-01-01-23-25-708-1.jpg\"}],[\"image\",{\"src\":\"__GHOST_URL__/content/images/2019/11/bandicam-2019-12-01-01-27-47-025-1.jpg\"}],[\"markdown\",{\"markdown\":\"    git add -A \\n    git commit -m \\\"Export website to docs file;\\\"\"}],[\"hr\",{\"_config\":{\"url\":\"http://localhost:2368/\",\"adminUrl\":null,\"apiVersions\":{\"all\":[\"v2\",\"v3\",\"canary\"],\"canary\":{\"admin\":\"canary/admin\",\"content\":\"canary/content\",\"members\":\"canary/members\"},\"v3\":{\"admin\":\"v3/admin\",\"content\":\"v3/content\",\"members\":\"v3/members\"},\"v2\":{\"admin\":\"v2/admin\",\"content\":\"v2/content\"}},\"slugs\":[\"ghost\",\"rss\",\"amp\"],\"redirectCacheMaxAge\":31536000,\"baseApiPath\":\"/ghost/api\",\"defaultApiVersion\":\"v3\",\"defaultApiType\":\"content\",\"staticImageUrlPrefix\":\"content/images\",\"cardTransformers\":[{\"name\":\"card-markdown\",\"type\":\"dom\"},{\"name\":\"code\",\"type\":\"dom\"},{\"name\":\"embed\",\"type\":\"dom\"},{\"name\":\"bookmark\",\"type\":\"dom\"},{\"name\":\"hr\",\"type\":\"dom\"},{\"name\":\"html\",\"type\":\"dom\"},{\"name\":\"image\",\"type\":\"dom\"},{\"name\":\"markdown\",\"type\":\"dom\"},{\"name\":\"gallery\",\"type\":\"dom\"}]},\"_defaultApiPathOptions\":{\"baseApiPath\":\"/ghost/api\",\"version\":\"v3\",\"type\":\"content\",\"apiVersions\":{\"all\":[\"v2\",\"v3\",\"canary\"],\"canary\":{\"admin\":\"canary/admin\",\"content\":\"canary/content\",\"members\":\"canary/members\"},\"v3\":{\"admin\":\"v3/admin\",\"content\":\"v3/content\",\"members\":\"v3/members\"},\"v2\":{\"admin\":\"v2/admin\",\"content\":\"v2/content\"}}}}],[\"markdown\",{\"markdown\":\"    git remote add origin <webURL|SSH Key>\"}],[\"markdown\",{\"markdown\":\"    git push -u origin master\"}],[\"hr\",{\"_config\":{\"url\":\"http://localhost:2368/\",\"adminUrl\":null,\"apiVersions\":{\"all\":[\"v2\",\"v3\",\"canary\"],\"canary\":{\"admin\":\"canary/admin\",\"content\":\"canary/content\",\"members\":\"canary/members\"},\"v3\":{\"admin\":\"v3/admin\",\"content\":\"v3/content\",\"members\":\"v3/members\"},\"v2\":{\"admin\":\"v2/admin\",\"content\":\"v2/content\"}},\"slugs\":[\"ghost\",\"rss\",\"amp\"],\"redirectCacheMaxAge\":31536000,\"baseApiPath\":\"/ghost/api\",\"defaultApiVersion\":\"v3\",\"defaultApiType\":\"content\",\"staticImageUrlPrefix\":\"content/images\",\"cardTransformers\":[{\"name\":\"card-markdown\",\"type\":\"dom\"},{\"name\":\"code\",\"type\":\"dom\"},{\"name\":\"embed\",\"type\":\"dom\"},{\"name\":\"bookmark\",\"type\":\"dom\"},{\"name\":\"hr\",\"type\":\"dom\"},{\"name\":\"html\",\"type\":\"dom\"},{\"name\":\"image\",\"type\":\"dom\"},{\"name\":\"markdown\",\"type\":\"dom\"},{\"name\":\"gallery\",\"type\":\"dom\"}]},\"_defaultApiPathOptions\":{\"baseApiPath\":\"/ghost/api\",\"version\":\"v3\",\"type\":\"content\",\"apiVersions\":{\"all\":[\"v2\",\"v3\",\"canary\"],\"canary\":{\"admin\":\"canary/admin\",\"content\":\"canary/content\",\"members\":\"canary/members\"},\"v3\":{\"admin\":\"v3/admin\",\"content\":\"v3/content\",\"members\":\"v3/members\"},\"v2\":{\"admin\":\"v2/admin\",\"content\":\"v2/content\"}}}}],[\"image\",{\"src\":\"__GHOST_URL__/content/images/2019/11/bandicam-2019-12-01-01-39-39-594-1.jpg\"}],[\"image\",{\"src\":\"__GHOST_URL__/content/images/2019/11/bandicam-2019-12-01-01-42-52-205-1.jpg\"}],[\"hr\",{\"_config\":{\"url\":\"http://localhost:2368/\",\"adminUrl\":null,\"apiVersions\":{\"all\":[\"v2\",\"v3\",\"canary\"],\"canary\":{\"admin\":\"canary/admin\",\"content\":\"canary/content\",\"members\":\"canary/members\"},\"v3\":{\"admin\":\"v3/admin\",\"content\":\"v3/content\",\"members\":\"v3/members\"},\"v2\":{\"admin\":\"v2/admin\",\"content\":\"v2/content\"}},\"slugs\":[\"ghost\",\"rss\",\"amp\"],\"redirectCacheMaxAge\":31536000,\"baseApiPath\":\"/ghost/api\",\"defaultApiVersion\":\"v3\",\"defaultApiType\":\"content\",\"staticImageUrlPrefix\":\"content/images\",\"cardTransformers\":[{\"name\":\"card-markdown\",\"type\":\"dom\"},{\"name\":\"code\",\"type\":\"dom\"},{\"name\":\"embed\",\"type\":\"dom\"},{\"name\":\"bookmark\",\"type\":\"dom\"},{\"name\":\"hr\",\"type\":\"dom\"},{\"name\":\"html\",\"type\":\"dom\"},{\"name\":\"image\",\"type\":\"dom\"},{\"name\":\"markdown\",\"type\":\"dom\"},{\"name\":\"gallery\",\"type\":\"dom\"}]},\"_defaultApiPathOptions\":{\"baseApiPath\":\"/ghost/api\",\"version\":\"v3\",\"type\":\"content\",\"apiVersions\":{\"all\":[\"v2\",\"v3\",\"canary\"],\"canary\":{\"admin\":\"canary/admin\",\"content\":\"canary/content\",\"members\":\"canary/members\"},\"v3\":{\"admin\":\"v3/admin\",\"content\":\"v3/content\",\"members\":\"v3/members\"},\"v2\":{\"admin\":\"v2/admin\",\"content\":\"v2/content\"}}}}]],\"markups\":[[\"a\",[\"href\",\"__GHOST_URL__/ghost\"]],[\"a\",[\"href\",\"http://localhost:2369/ghost/\"]],[\"strong\"]],\"sections\":[[1,\"p\",[]],[1,\"p\",[[0,[],0,\"一直以來都有個困擾，就是查個程式寫法或是軟體操作方法每次都很快就忘記，所以想寫個Blog紀錄自己的手順，先前曾想過直接寫個網頁PUSH到GitHub上，但實在有點累( ˘･з･)，偶然又看到有個很喜歡的排版是用Ghost建立的，因此使用Ghost+GitHub的形式建立部落格\"]]],[10,0],[1,\"h2\",[[0,[],0,\"安裝Ghost\"]]],[1,\"p\",[[0,[],0,\"1.安裝Ghost-CLI‌‌   使用npm或yarn指令安裝Ghost-CLI\"]]],[10,1],[1,\"p\",[[0,[],0,\"2.安裝Ghost‌‌   開啟終端機，移動到要建立Ghost的目錄並使用指令安裝Ghost\"]]],[10,2],[10,3],[1,\"p\",[[0,[],0,\"3.安裝完成後開啟git bash切換到同一目錄並初始化目錄\"]]],[10,4],[1,\"p\",[[0,[],0,\"4.安裝npm並更新repository\"]]],[10,5],[1,\"p\",[[0,[],0,\"5.安裝knex-migrator並更新repository\"]]],[10,6],[1,\"p\",[[0,[],0,\"6.初始化資料庫\"]]],[10,7],[10,8],[1,\"h2\",[[0,[],0,\"設定Ghost\"]]],[1,\"p\",[[0,[],0,\"1.移動到已安裝Ghost的目錄並輸入指令開啟Ghost\"]]],[10,9],[1,\"p\",[[0,[],0,\"2.一般使用\"],[0,[0],1,\"http://localhost:2368/ghost\"],[0,[],0,\"開啟Ghost的管理介面，但因為先前已經在另一個地方裝過一個Ghost，所以畫面顯示以\"],[0,[1],1,\"http://localhost:2369/ghost\"],[0,[],0,\"/開啟管理介面\"]]],[10,10],[10,11],[1,\"p\",[[0,[],0,\"3.填寫網站名稱及作者基本資料\"]]],[10,12],[1,\"p\",[[0,[],0,\"4.可輸入email邀請其他作者一起協作，只有自己使用的話則按下方直接進入管理介面\"]]],[10,13],[1,\"p\",[[0,[],0,\"5.更新repository\"]]],[10,14],[10,15],[1,\"h2\",[[0,[],0,\"將網頁輸出為檔案\"]]],[1,\"p\",[[0,[],0,\"1.使用wget輸出網頁到docs資料夾內\"],[1,[],0,0],[0,[],0,\"   --mirror : 鏡像下載所有檔案相當於-N -r -l inf --no-remove-listing選項\"],[1,[],0,1],[0,[],0,\"        -N : 若遠端檔案較新則下載檔案\"],[1,[],0,2],[0,[],0,\"        -r : 遞迴下載\"],[1,[],0,3],[0,[],0,\"        -l : 最大搜尋深度(0或inf表示無限)\"],[1,[],0,4],[0,[],0,\"        --no-remove-listing : 不刪除\"],[0,[2],1,\".listing\"],[0,[],0,\"檔案\"],[1,[],0,5],[0,[],0,\"   --convert-links : 轉換檔案內路徑為符合本地目錄的路徑   \"],[1,[],0,6],[0,[],0,\"   --page-requisites : 下載所有顯示網頁所需的檔案，例如圖片等\"],[1,[],0,7],[0,[],0,\"   -nH : 不建立名稱為網站名稱的目錄，直接在當前目錄建立檔案\"],[1,[],0,8],[0,[],0,\"   --no-parent : 不進入上層目錄\"],[1,[],0,9],[0,[],0,\"   -P : 指定下載目錄\"]]],[10,16],[1,\"p\",[[0,[],0,\"2.由於從Ghost抓下來的css、js的檔名和html內的相關路徑都會被加上類似下圖.css後方的字串，若直接傳到GitHub Pages上的話會讀不到，我們可使用Notepad++將目錄中所有檔案中有包括此字串的替換為空字串\"]]],[10,17],[1,\"p\",[[0,[],0,\"3.開啟Notepad++，點選\"],[0,[2],1,\"在檔案中尋找\"]]],[10,18],[1,\"p\",[[0,[],0,\"4.輸入要刪除的字串並按下\"],[0,[2],1,\"在多個檔案中取代\"]]],[10,19],[1,\"p\",[[0,[],0,\"5.更改docs/assets內built、css和js資料夾內所有包含該字串的檔名\"]]],[10,20],[1,\"p\",[[0,[],0,\"6.更新repository\"]]],[10,21],[10,22],[1,\"h2\",[[0,[],0,\"PUSH檔案到GitHub\"]]],[1,\"p\",[[0,[],0,\"1.設定遠端倉庫\"]]],[10,23],[1,\"p\",[[0,[],0,\"2.將master分支推送到origin倉庫\"]]],[10,24],[10,25],[1,\"h2\",[[0,[],0,\"設定GitHub Pages\"]]],[1,\"p\",[[0,[],0,\"1.進入剛剛上傳的GitHub的Repository，點選settings標籤\"]]],[10,26],[1,\"p\",[[0,[],0,\"2.尋找GitHub Pages區塊，選擇master branch /docs folder作為網頁來源\"]]],[10,27],[10,28],[1,\"h2\",[[0,[],0,\"已可瀏覽網頁\"]]],[1,\"p\",[[0,[],0,\"在網址列輸入http://帳號.github.io/RepositoryName即可瀏覽網頁\"]]]],\"ghostVersion\":\"3.0\"}","lexical":null,"html":"<p></p><p>一直以來都有個困擾，就是查個程式寫法或是軟體操作方法每次都很快就忘記，所以想寫個Blog紀錄自己的手順，先前曾想過直接寫個網頁PUSH到GitHub上，但實在有點累( ˘･з･)，偶然又看到有個很喜歡的排版是用Ghost建立的，因此使用Ghost+GitHub的形式建立部落格</p><hr><h2 id=\"-ghost\">安裝Ghost</h2><p>1.安裝Ghost-CLI‌‌   使用npm或yarn指令安裝Ghost-CLI</p><!--kg-card-begin: markdown--><pre><code>npm install ghost-cli@latest -g\n</code></pre>\n<!--kg-card-end: markdown--><p>2.安裝Ghost‌‌   開啟終端機，移動到要建立Ghost的目錄並使用指令安裝Ghost</p><!--kg-card-begin: markdown--><pre><code>ghost install local\n</code></pre>\n<!--kg-card-end: markdown--><figure class=\"kg-card kg-image-card\"><img src=\"__GHOST_URL__/content/images/2019/11/bandicam-2019-12-01-00-43-12-343-2.jpg\" class=\"kg-image\" alt loading=\"lazy\"></figure><p>3.安裝完成後開啟git bash切換到同一目錄並初始化目錄</p><!--kg-card-begin: markdown--><pre><code>git init git add -A git commit -m &quot;Initial repository&quot;\n</code></pre>\n<!--kg-card-end: markdown--><p>4.安裝npm並更新repository</p><!--kg-card-begin: markdown--><pre><code>npm install \ngit add -A \ngit commit -m 'Installed Node dependencies'\n</code></pre>\n<!--kg-card-end: markdown--><p>5.安裝knex-migrator並更新repository</p><!--kg-card-begin: markdown--><pre><code>npm install -g knex-migrator\n</code></pre>\n<!--kg-card-end: markdown--><p>6.初始化資料庫</p><!--kg-card-begin: markdown--><pre><code>knex-migrator\n</code></pre>\n<!--kg-card-end: markdown--><hr><h2 id=\"-ghost-1\">設定Ghost</h2><p>1.移動到已安裝Ghost的目錄並輸入指令開啟Ghost</p><!--kg-card-begin: markdown--><pre><code>ghost start\n</code></pre>\n<!--kg-card-end: markdown--><p>2.一般使用<a href=\"__GHOST_URL__/ghost\">http://localhost:2368/ghost</a>開啟Ghost的管理介面，但因為先前已經在另一個地方裝過一個Ghost，所以畫面顯示以<a href=\"http://localhost:2369/ghost/\">http://localhost:2369/ghost</a>/開啟管理介面</p><figure class=\"kg-card kg-image-card\"><img src=\"__GHOST_URL__/content/images/2019/11/bandicam-2019-12-01-00-50-41-339-1.jpg\" class=\"kg-image\" alt loading=\"lazy\"></figure><figure class=\"kg-card kg-image-card\"><img src=\"__GHOST_URL__/content/images/2019/11/bandicam-2019-12-01-00-54-54-621-1.jpg\" class=\"kg-image\" alt loading=\"lazy\"></figure><p>3.填寫網站名稱及作者基本資料</p><figure class=\"kg-card kg-image-card\"><img src=\"__GHOST_URL__/content/images/2019/11/bandicam-2019-12-01-00-54-57-345-1.jpg\" class=\"kg-image\" alt loading=\"lazy\"></figure><p>4.可輸入email邀請其他作者一起協作，只有自己使用的話則按下方直接進入管理介面</p><figure class=\"kg-card kg-image-card\"><img src=\"__GHOST_URL__/content/images/2019/11/bandicam-2019-12-01-00-55-57-353-1.jpg\" class=\"kg-image\" alt loading=\"lazy\"></figure><p>5.更新repository</p><!--kg-card-begin: markdown--><pre><code>git add -A \ngit commit -m 'Finished local Ghost setup'\n</code></pre>\n<!--kg-card-end: markdown--><hr><h2 id=\"-\">將網頁輸出為檔案</h2><p>1.使用wget輸出網頁到docs資料夾內<br>   --mirror : 鏡像下載所有檔案相當於-N -r -l inf --no-remove-listing選項<br>        -N : 若遠端檔案較新則下載檔案<br>        -r : 遞迴下載<br>        -l : 最大搜尋深度(0或inf表示無限)<br>        --no-remove-listing : 不刪除<strong>.listing</strong>檔案<br>   --convert-links : 轉換檔案內路徑為符合本地目錄的路徑   <br>   --page-requisites : 下載所有顯示網頁所需的檔案，例如圖片等<br>   -nH : 不建立名稱為網站名稱的目錄，直接在當前目錄建立檔案<br>   --no-parent : 不進入上層目錄<br>   -P : 指定下載目錄</p><!--kg-card-begin: markdown--><pre><code>wget --mirror --convert-links --page-requisites -nH --no-parent -P docs http://localhost:2368/\n</code></pre>\n<!--kg-card-end: markdown--><p>2.由於從Ghost抓下來的css、js的檔名和html內的相關路徑都會被加上類似下圖.css後方的字串，若直接傳到GitHub Pages上的話會讀不到，我們可使用Notepad++將目錄中所有檔案中有包括此字串的替換為空字串</p><figure class=\"kg-card kg-image-card\"><img src=\"__GHOST_URL__/content/images/2019/11/bandicam-2019-12-01-01-13-41-348-1.jpg\" class=\"kg-image\" alt loading=\"lazy\"></figure><p>3.開啟Notepad++，點選<strong>在檔案中尋找</strong></p><figure class=\"kg-card kg-image-card\"><img src=\"__GHOST_URL__/content/images/2019/11/bandicam-2019-12-01-01-19-16-765-1.jpg\" class=\"kg-image\" alt loading=\"lazy\"></figure><p>4.輸入要刪除的字串並按下<strong>在多個檔案中取代</strong></p><figure class=\"kg-card kg-image-card\"><img src=\"__GHOST_URL__/content/images/2019/11/bandicam-2019-12-01-01-23-25-708-1.jpg\" class=\"kg-image\" alt loading=\"lazy\"></figure><p>5.更改docs/assets內built、css和js資料夾內所有包含該字串的檔名</p><figure class=\"kg-card kg-image-card\"><img src=\"__GHOST_URL__/content/images/2019/11/bandicam-2019-12-01-01-27-47-025-1.jpg\" class=\"kg-image\" alt loading=\"lazy\"></figure><p>6.更新repository</p><!--kg-card-begin: markdown--><pre><code>git add -A \ngit commit -m &quot;Export website to docs file;&quot;\n</code></pre>\n<!--kg-card-end: markdown--><hr><h2 id=\"push-github\">PUSH檔案到GitHub</h2><p>1.設定遠端倉庫</p><!--kg-card-begin: markdown--><pre><code>git remote add origin &lt;webURL|SSH Key&gt;\n</code></pre>\n<!--kg-card-end: markdown--><p>2.將master分支推送到origin倉庫</p><!--kg-card-begin: markdown--><pre><code>git push -u origin master\n</code></pre>\n<!--kg-card-end: markdown--><hr><h2 id=\"-github-pages\">設定GitHub Pages</h2><p>1.進入剛剛上傳的GitHub的Repository，點選settings標籤</p><figure class=\"kg-card kg-image-card\"><img src=\"__GHOST_URL__/content/images/2019/11/bandicam-2019-12-01-01-39-39-594-1.jpg\" class=\"kg-image\" alt loading=\"lazy\"></figure><p>2.尋找GitHub Pages區塊，選擇master branch /docs folder作為網頁來源</p><figure class=\"kg-card kg-image-card\"><img src=\"__GHOST_URL__/content/images/2019/11/bandicam-2019-12-01-01-42-52-205-1.jpg\" class=\"kg-image\" alt loading=\"lazy\"></figure><hr><h2 id=\"--1\">已可瀏覽網頁</h2><p>在網址列輸入http://帳號.github.io/RepositoryName即可瀏覽網頁</p>","comment_id":"5de291f8c31a24007887a233","plaintext":"一直以來都有個困擾，就是查個程式寫法或是軟體操作方法每次都很快就忘記，所以想寫個Blog紀錄自己的手順，先前曾想過直接寫個網頁PUSH到GitHub上，但實在有點累( ˘･з･)，偶然又看到有個很喜歡的排版是用Ghost建立的，因此使用Ghost+GitHub的形式建立部落格\n\n\n安裝Ghost\n\n1.安裝Ghost-CLI‌‌   使用npm或yarn指令安裝Ghost-CLI\n\nnpm install ghost-cli@latest -g\n\n\n\n2.安裝Ghost‌‌   開啟終端機，移動到要建立Ghost的目錄並使用指令安裝Ghost\n\nghost install local\n\n\n\n3.安裝完成後開啟git bash切換到同一目錄並初始化目錄\n\ngit init git add -A git commit -m \"Initial repository\"\n\n\n\n4.安裝npm並更新repository\n\nnpm install \ngit add -A \ngit commit -m 'Installed Node dependencies'\n\n\n\n5.安裝knex-migrator並更新repository\n\nnpm install -g knex-migrator\n\n\n\n6.初始化資料庫\n\nknex-migrator\n\n\n\n\n設定Ghost\n\n1.移動到已安裝Ghost的目錄並輸入指令開啟Ghost\n\nghost start\n\n\n\n2.一般使用http://localhost:2368/ghost開啟Ghost的管理介面，但因為先前已經在另一個地方裝過一個Ghost，所以畫面顯示以http://localhost:2369/ghost/開啟管理介面\n\n3.填寫網站名稱及作者基本資料\n\n4.可輸入email邀請其他作者一起協作，只有自己使用的話則按下方直接進入管理介面\n\n5.更新repository\n\ngit add -A \ngit commit -m 'Finished local Ghost setup'\n\n\n\n\n將網頁輸出為檔案\n\n1.使用wget輸出網頁到docs資料夾內\n  --mirror : 鏡像下載所有檔案相當於-N -r -l inf --no-remove-listing選項\n       -N : 若遠端檔案較新則下載檔案\n       -r : 遞迴下載\n       -l : 最大搜尋深度(0或inf表示無限)\n       --no-remove-listing : 不刪除.listing檔案\n  --convert-links : 轉換檔案內路徑為符合本地目錄的路徑  \n  --page-requisites : 下載所有顯示網頁所需的檔案，例如圖片等\n  -nH : 不建立名稱為網站名稱的目錄，直接在當前目錄建立檔案\n  --no-parent : 不進入上層目錄\n  -P : 指定下載目錄\n\nwget --mirror --convert-links --page-requisites -nH --no-parent -P docs http://localhost:2368/\n\n\n\n2.由於從Ghost抓下來的css、js的檔名和html內的相關路徑都會被加上類似下圖.css後方的字串，若直接傳到GitHub Pages上的話會讀不到，我們可使用Notepad++將目錄中所有檔案中有包括此字串的替換為空字串\n\n3.開啟Notepad++，點選在檔案中尋找\n\n4.輸入要刪除的字串並按下在多個檔案中取代\n\n5.更改docs/assets內built、css和js資料夾內所有包含該字串的檔名\n\n6.更新repository\n\ngit add -A \ngit commit -m \"Export website to docs file;\"\n\n\n\n\nPUSH檔案到GitHub\n\n1.設定遠端倉庫\n\ngit remote add origin <webURL|SSH Key>\n\n\n\n2.將master分支推送到origin倉庫\n\ngit push -u origin master\n\n\n\n\n設定GitHub Pages\n\n1.進入剛剛上傳的GitHub的Repository，點選settings標籤\n\n2.尋找GitHub Pages區塊，選擇master branch /docs folder作為網頁來源\n\n\n已可瀏覽網頁\n\n在網址列輸入http://帳號.github.io/RepositoryName即可瀏覽網頁","feature_image":"__GHOST_URL__/content/images/2019/11/Ghost-Logo.svg","featured":0,"type":"post","status":"published","locale":null,"visibility":"public","email_recipient_filter":"none","created_at":"2019-11-30 15:59:52","created_by":"1","updated_at":"2020-10-27 18:35:57","updated_by":null,"published_at":"2019-11-30 17:57:56","published_by":"1","custom_excerpt":"一直以來都有個困擾，就是查個程式寫法或是軟體操作方法每次都很快就忘記，所以想寫個Blog紀錄自己的手順，先前曾想過直接寫個網頁PUSH到GitHub上，但實在有點累( ˘･з･)，偶然又看到有個很喜歡的排版是用Ghost建立的，因此使用Ghost+GitHub的形式建立部落格","codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null,"newsletter_id":null},{"id":"635a812457207246b927a808","uuid":"cf923849-85e0-49fb-b6ac-f38d2dff4770","title":"計算Wildcard Mask","slug":"wildcard-mask","mobiledoc":"{\"version\":\"0.3.1\",\"atoms\":[[\"soft-return\",\"\",{}],[\"soft-return\",\"\",{}],[\"soft-return\",\"\",{}],[\"soft-return\",\"\",{}],[\"soft-return\",\"\",{}],[\"soft-return\",\"\",{}],[\"soft-return\",\"\",{}],[\"soft-return\",\"\",{}],[\"soft-return\",\"\",{}],[\"soft-return\",\"\",{}],[\"soft-return\",\"\",{}],[\"soft-return\",\"\",{}],[\"soft-return\",\"\",{}]],\"cards\":[[\"hr\",{\"_config\":{\"url\":\"http://localhost:2368/\",\"adminUrl\":null,\"apiVersions\":{\"all\":[\"v2\",\"v3\",\"canary\"],\"canary\":{\"admin\":\"canary/admin\",\"content\":\"canary/content\",\"members\":\"canary/members\"},\"v3\":{\"admin\":\"v3/admin\",\"content\":\"v3/content\",\"members\":\"v3/members\"},\"v2\":{\"admin\":\"v2/admin\",\"content\":\"v2/content\"}},\"slugs\":[\"ghost\",\"rss\",\"amp\"],\"redirectCacheMaxAge\":31536000,\"baseApiPath\":\"/ghost/api\",\"defaultApiVersion\":\"v3\",\"defaultApiType\":\"content\",\"staticImageUrlPrefix\":\"content/images\",\"cardTransformers\":[{\"name\":\"card-markdown\",\"type\":\"dom\"},{\"name\":\"code\",\"type\":\"dom\"},{\"name\":\"embed\",\"type\":\"dom\"},{\"name\":\"bookmark\",\"type\":\"dom\"},{\"name\":\"hr\",\"type\":\"dom\"},{\"name\":\"html\",\"type\":\"dom\"},{\"name\":\"image\",\"type\":\"dom\"},{\"name\":\"markdown\",\"type\":\"dom\"},{\"name\":\"gallery\",\"type\":\"dom\"}]},\"_defaultApiPathOptions\":{\"baseApiPath\":\"/ghost/api\",\"version\":\"v3\",\"type\":\"content\",\"apiVersions\":{\"all\":[\"v2\",\"v3\",\"canary\"],\"canary\":{\"admin\":\"canary/admin\",\"content\":\"canary/content\",\"members\":\"canary/members\"},\"v3\":{\"admin\":\"v3/admin\",\"content\":\"v3/content\",\"members\":\"v3/members\"},\"v2\":{\"admin\":\"v2/admin\",\"content\":\"v2/content\"}}}}],[\"markdown\",{\"markdown\":\"| 128 | 64 | 32 | 16 | 8 | 4 | 2 | 1 |                |\\n|-----|----|----|----|---|---|---|---|----------------|\\n| 0   | 0  | 0  | 0  | 0 | 0 | 0 | 0 | 匹配所有位元   |\\n| 0   | 0  | 1  | 1  | 1 | 1 | 1 | 1 | 忽略後六個位元 |\\n| 0   | 0  | 0  | 0  | 1 | 1 | 1 | 1 | 忽略後四個位元 |\\n| 1   | 1  | 1  | 1  | 1 | 1 | 0 | 0 | 忽略前六個位元 |\\n| 1   | 1  | 1  | 1  | 1 | 1 | 1 | 1 | 忽略所有位元   |\"}],[\"hr\",{\"_config\":{\"url\":\"http://localhost:2368/\",\"adminUrl\":null,\"apiVersions\":{\"all\":[\"v2\",\"v3\",\"canary\"],\"canary\":{\"admin\":\"canary/admin\",\"content\":\"canary/content\",\"members\":\"canary/members\"},\"v3\":{\"admin\":\"v3/admin\",\"content\":\"v3/content\",\"members\":\"v3/members\"},\"v2\":{\"admin\":\"v2/admin\",\"content\":\"v2/content\"}},\"slugs\":[\"ghost\",\"rss\",\"amp\"],\"redirectCacheMaxAge\":31536000,\"baseApiPath\":\"/ghost/api\",\"defaultApiVersion\":\"v3\",\"defaultApiType\":\"content\",\"staticImageUrlPrefix\":\"content/images\",\"cardTransformers\":[{\"name\":\"card-markdown\",\"type\":\"dom\"},{\"name\":\"code\",\"type\":\"dom\"},{\"name\":\"embed\",\"type\":\"dom\"},{\"name\":\"bookmark\",\"type\":\"dom\"},{\"name\":\"hr\",\"type\":\"dom\"},{\"name\":\"html\",\"type\":\"dom\"},{\"name\":\"image\",\"type\":\"dom\"},{\"name\":\"markdown\",\"type\":\"dom\"},{\"name\":\"gallery\",\"type\":\"dom\"}]},\"_defaultApiPathOptions\":{\"baseApiPath\":\"/ghost/api\",\"version\":\"v3\",\"type\":\"content\",\"apiVersions\":{\"all\":[\"v2\",\"v3\",\"canary\"],\"canary\":{\"admin\":\"canary/admin\",\"content\":\"canary/content\",\"members\":\"canary/members\"},\"v3\":{\"admin\":\"v3/admin\",\"content\":\"v3/content\",\"members\":\"v3/members\"},\"v2\":{\"admin\":\"v2/admin\",\"content\":\"v2/content\"}}}}],[\"markdown\",{\"markdown\":\"|                |       DEC       |                 BIN                 |\\n|:--------------:|:---------------:|:-----------------------------------:|\\n| IP Address     | 192.168.122.128 | 11000000.10101000.01111010.10000000 |\\n| Wildcard Mask  | 0.0.0.63        | 00000000.00000000.00000000.00111111 |\\n| IP位址範圍起點 | 192.168.122.128 | 11000000.10101000.01111010.10000000 |\\n| IP位址範圍終點 | 192.168.122.191 | 11000000.10101000.01111010.10111111 |\"}],[\"markdown\",{\"markdown\":\"|                |      DEC      |                 BIN                 |\\n|:--------------:|:-------------:|:-----------------------------------:|\\n| IP Address     | 192.51.100.58 | 11000000.00110011.01100100.00111010 |\\n| Wildcard Mask  | 0.0.0.63      | 00000000.00000000.00000000.00111111 |\\n| IP位址範圍起點 | 192.51.100.0  | 11000000.00110011.01100100.00000000 |\\n| IP位址範圍終點 | 192.51.100.63 | 11000000.00110011.01100100.00111111 |\"}]],\"markups\":[[\"strong\"]],\"sections\":[[1,\"p\",[]],[1,\"p\",[[0,[],0,\"在設置ACL(Access Control List)時，會用到Wildcard Mask標示在範圍內的IP位址，這篇筆記記錄如何使用wildcard mask計算IP範圍的起點及終點\"]]],[10,0],[1,\"h2\",[[0,[],0,\"簡介\"],[1,[],0,0]]],[1,\"p\",[[0,[],0,\"wildcard mask使用0和1表示\"],[1,[],0,1],[0,[],0,\"0代表匹配，1代表忽略\"],[1,[],0,2],[0,[],0,\"以下使用8bit作為示範\"]]],[10,1],[10,2],[1,\"h2\",[[0,[],0,\"計算\"],[1,[],0,3]]],[1,\"p\",[[0,[],0,\"以指令 \"],[0,[0],1,\"access list 50 permit 192.168.122.128 0.0.0.63\"],[0,[],0,\" 為例\"]]],[10,3],[1,\"p\",[[0,[],0,\"1.計算IP位址的二進位值\"],[1,[],0,4],[0,[],0,\"    192.168.122.128 -> 11000000.10101000.01111010.10000000\"],[1,[],0,5],[0,[],0,\"2.計算Mask的二進位值\"],[1,[],0,6],[0,[],0,\"    0.0.0.63 -> 00000000.00000000.00000000.00111111\"],[1,[],0,7],[0,[],0,\"3.觀察Mask的值為最後6個bit，故範圍為10000000~10111111\"]]],[1,\"p\",[]],[1,\"p\",[[0,[],0,\"以指令 \"],[0,[0],1,\"access list 50 permit 192.51.100.58 0.0.0.63\"],[0,[],0,\" 為例\"]]],[10,4],[1,\"p\",[[0,[],0,\"1.計算IP位址的二進位值\"],[1,[],0,8],[0,[],0,\"    192.51.100.58 -> 11000000.00110011.01100100.00111010\"],[1,[],0,9],[0,[],0,\"2.計算Mask的二進位值\"],[1,[],0,10],[0,[],0,\"    0.0.0.63 -> 00000000.00000000.00000000.00111111\"],[1,[],0,11],[0,[],0,\"3.觀察Mask的值為最後6個bit，故範圍為00000000~00111111\"]]],[1,\"p\",[[1,[],0,12],[0,[],0,\"        \"]]]],\"ghostVersion\":\"3.0\"}","lexical":null,"html":"<p></p><p>在設置ACL(Access Control List)時，會用到Wildcard Mask標示在範圍內的IP位址，這篇筆記記錄如何使用wildcard mask計算IP範圍的起點及終點</p><hr><h2 id=\"-\">簡介<br></h2><p>wildcard mask使用0和1表示<br>0代表匹配，1代表忽略<br>以下使用8bit作為示範</p><!--kg-card-begin: markdown--><table>\n<thead>\n<tr>\n<th>128</th>\n<th>64</th>\n<th>32</th>\n<th>16</th>\n<th>8</th>\n<th>4</th>\n<th>2</th>\n<th>1</th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n<td>匹配所有位元</td>\n</tr>\n<tr>\n<td>0</td>\n<td>0</td>\n<td>1</td>\n<td>1</td>\n<td>1</td>\n<td>1</td>\n<td>1</td>\n<td>1</td>\n<td>忽略後六個位元</td>\n</tr>\n<tr>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n<td>1</td>\n<td>1</td>\n<td>1</td>\n<td>1</td>\n<td>忽略後四個位元</td>\n</tr>\n<tr>\n<td>1</td>\n<td>1</td>\n<td>1</td>\n<td>1</td>\n<td>1</td>\n<td>1</td>\n<td>0</td>\n<td>0</td>\n<td>忽略前六個位元</td>\n</tr>\n<tr>\n<td>1</td>\n<td>1</td>\n<td>1</td>\n<td>1</td>\n<td>1</td>\n<td>1</td>\n<td>1</td>\n<td>1</td>\n<td>忽略所有位元</td>\n</tr>\n</tbody>\n</table>\n<!--kg-card-end: markdown--><hr><h2 id=\"--1\">計算<br></h2><p>以指令 <strong>access list 50 permit 192.168.122.128 0.0.0.63</strong> 為例</p><!--kg-card-begin: markdown--><table>\n<thead>\n<tr>\n<th style=\"text-align:center\"></th>\n<th style=\"text-align:center\">DEC</th>\n<th style=\"text-align:center\">BIN</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">IP Address</td>\n<td style=\"text-align:center\">192.168.122.128</td>\n<td style=\"text-align:center\">11000000.10101000.01111010.10000000</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Wildcard Mask</td>\n<td style=\"text-align:center\">0.0.0.63</td>\n<td style=\"text-align:center\">00000000.00000000.00000000.00111111</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">IP位址範圍起點</td>\n<td style=\"text-align:center\">192.168.122.128</td>\n<td style=\"text-align:center\">11000000.10101000.01111010.10000000</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">IP位址範圍終點</td>\n<td style=\"text-align:center\">192.168.122.191</td>\n<td style=\"text-align:center\">11000000.10101000.01111010.10111111</td>\n</tr>\n</tbody>\n</table>\n<!--kg-card-end: markdown--><p>1.計算IP位址的二進位值<br>    192.168.122.128 -&gt; 11000000.10101000.01111010.10000000<br>2.計算Mask的二進位值<br>    0.0.0.63 -&gt; 00000000.00000000.00000000.00111111<br>3.觀察Mask的值為最後6個bit，故範圍為10000000~10111111</p><p></p><p>以指令 <strong>access list 50 permit 192.51.100.58 0.0.0.63</strong> 為例</p><!--kg-card-begin: markdown--><table>\n<thead>\n<tr>\n<th style=\"text-align:center\"></th>\n<th style=\"text-align:center\">DEC</th>\n<th style=\"text-align:center\">BIN</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">IP Address</td>\n<td style=\"text-align:center\">192.51.100.58</td>\n<td style=\"text-align:center\">11000000.00110011.01100100.00111010</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Wildcard Mask</td>\n<td style=\"text-align:center\">0.0.0.63</td>\n<td style=\"text-align:center\">00000000.00000000.00000000.00111111</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">IP位址範圍起點</td>\n<td style=\"text-align:center\">192.51.100.0</td>\n<td style=\"text-align:center\">11000000.00110011.01100100.00000000</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">IP位址範圍終點</td>\n<td style=\"text-align:center\">192.51.100.63</td>\n<td style=\"text-align:center\">11000000.00110011.01100100.00111111</td>\n</tr>\n</tbody>\n</table>\n<!--kg-card-end: markdown--><p>1.計算IP位址的二進位值<br>    192.51.100.58 -&gt; 11000000.00110011.01100100.00111010<br>2.計算Mask的二進位值<br>    0.0.0.63 -&gt; 00000000.00000000.00000000.00111111<br>3.觀察Mask的值為最後6個bit，故範圍為00000000~00111111</p><p><br>        </p>","comment_id":"5df3b117bd62740960b57409","plaintext":"在設置ACL(Access Control List)時，會用到Wildcard Mask標示在範圍內的IP位址，這篇筆記記錄如何使用wildcard mask計算IP範圍的起點及終點\n\n\n簡介\n\n\nwildcard mask使用0和1表示\n0代表匹配，1代表忽略\n以下使用8bit作為示範\n\n\n\n\n128\n64\n32\n16\n8\n4\n2\n1\n\n\n\n\n\n0\n0\n0\n0\n0\n0\n0\n0\n匹配所有位元\n\n\n0\n0\n1\n1\n1\n1\n1\n1\n忽略後六個位元\n\n\n0\n0\n0\n0\n1\n1\n1\n1\n忽略後四個位元\n\n\n1\n1\n1\n1\n1\n1\n0\n0\n忽略前六個位元\n\n\n1\n1\n1\n1\n1\n1\n1\n1\n忽略所有位元\n\n\n\n\n\n\n計算\n\n\n以指令 access list 50 permit 192.168.122.128 0.0.0.63 為例\n\n\n\n\n\nDEC\nBIN\n\n\n\n\nIP Address\n192.168.122.128\n11000000.10101000.01111010.10000000\n\n\nWildcard Mask\n0.0.0.63\n00000000.00000000.00000000.00111111\n\n\nIP位址範圍起點\n192.168.122.128\n11000000.10101000.01111010.10000000\n\n\nIP位址範圍終點\n192.168.122.191\n11000000.10101000.01111010.10111111\n\n\n\n\n\n1.計算IP位址的二進位值\n   192.168.122.128 -> 11000000.10101000.01111010.10000000\n2.計算Mask的二進位值\n   0.0.0.63 -> 00000000.00000000.00000000.00111111\n3.觀察Mask的值為最後6個bit，故範圍為10000000~10111111\n\n\n\n以指令 access list 50 permit 192.51.100.58 0.0.0.63 為例\n\n\n\n\n\nDEC\nBIN\n\n\n\n\nIP Address\n192.51.100.58\n11000000.00110011.01100100.00111010\n\n\nWildcard Mask\n0.0.0.63\n00000000.00000000.00000000.00111111\n\n\nIP位址範圍起點\n192.51.100.0\n11000000.00110011.01100100.00000000\n\n\nIP位址範圍終點\n192.51.100.63\n11000000.00110011.01100100.00111111\n\n\n\n\n\n1.計算IP位址的二進位值\n   192.51.100.58 -> 11000000.00110011.01100100.00111010\n2.計算Mask的二進位值\n   0.0.0.63 -> 00000000.00000000.00000000.00111111\n3.觀察Mask的值為最後6個bit，故範圍為00000000~00111111\n\n\n       ","feature_image":"__GHOST_URL__/content/images/2019/12/binary-code-binary-binary-system-byte-bits-administrator-1458897-pxhere.com.jpg","featured":0,"type":"post","status":"published","locale":null,"visibility":"public","email_recipient_filter":"none","created_at":"2019-12-13 15:41:11","created_by":"1","updated_at":"2020-01-26 15:56:59","updated_by":null,"published_at":"2019-12-13 16:49:37","published_by":"1","custom_excerpt":"在設置ACL(Access Control List)時，會用到Wildcard Mask標示在範圍內的IP位址，這篇筆記記錄如何使用wildcard mask計算IP範圍的起點及終點","codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null,"newsletter_id":null},{"id":"635a812457207246b927a809","uuid":"9f7c8e78-f58c-4f83-b958-a73d4270e93f","title":"[Golang]Golang函式","slug":"golang-function","mobiledoc":"{\"version\":\"0.3.1\",\"atoms\":[],\"cards\":[[\"markdown\",{\"markdown\":\"    func test() string{\\n        return \\\"Hello\\\" \\n    }\\n    \\n    func main(){\\n        fmt.Println(test())\\n    }\"}],[\"markdown\",{\"markdown\":\"    >Hello\"}],[\"markdown\",{\"markdown\":\"    func test() (string,string){\\n        return \\\"Hello\\\",\\\"katsuobushi\\\"\\n    }\\n    \\n    func main(){\\n        hlo,name := test()\\n        fmt.Println(hlo , name)\\n    }\"}],[\"markdown\",{\"markdown\":\"    >Hello katsuobushi\"}],[\"markdown\",{\"markdown\":\"    func foo(name string,age int){\\n        fmt.Println(name,age)\\n    }\\n    \\n    func main(){\\n        foo(\\\"katsuobushi\\\",100)\\n    }\"}],[\"markdown\",{\"markdown\":\"    >katsuobushi 100\\n  \"}],[\"markdown\",{\"markdown\":\"    func foo(str string) (returnStr string) {\\n        returnStr = str\\n        return\\n    }\\n    \\n    func main() {\\n        fmt.Println(foo(\\\"Hello\\\"))\\n    }\"}],[\"markdown\",{\"markdown\":\"    >Hello\"}],[\"markdown\",{\"markdown\":\"    type course struct {\\n        courseID      string\\n        courseTeacher string\\n    }\\n\\n    func (c *course) setCourse(id string, teacher string) {\\n        c.courseID = id\\n        c.courseTeacher = teacher\\n    }\\n\\n    func (c *course) print() {\\n        fmt.Println(c.courseID, c.courseTeacher)\\n    }\\n\\n    func main() {\\n        var co course\\n        co.setCourse(\\\"3452\\\", \\\"GolangProgramming\\\")\\n        co.print()\\n    }\\n\"}]],\"markups\":[[\"strong\"]],\"sections\":[[1,\"p\",[]],[1,\"h3\",[[0,[],0,\"基本用法\"]]],[1,\"p\",[[0,[],0,\"最基本的用法為使用func作為宣告函式的關鍵字，後面接上函式名稱(test)及回傳值(string)，這裡要注意的是必須指定回傳型態，否則會跳出錯誤訊息\\\"too many arguments to return\\\"\"]]],[10,0],[10,1],[1,\"h3\",[[0,[],0,\"多個回傳值\"]]],[1,\"p\",[[0,[],0,\"golang可以一次回傳多個值，在呼叫的地方必須使用多個變數接收傳回來的值\"]]],[10,2],[10,3],[1,\"h3\",[[0,[],0,\"傳入參數\"]]],[1,\"p\",[[0,[],0,\"在函式名稱後的括號內加入一個或多個\\\"\"],[0,[0],1,\"變數名稱 變數型態\\\"\"],[0,[],0,\"，以傳入參數\"]]],[10,4],[10,5],[1,\"h3\",[[0,[],0,\"為回傳值命名\"]]],[1,\"p\",[[0,[],0,\"可為回傳變數命名(宣告變數)，在回傳時可直接呼叫\"],[0,[0],1,\"return\"],[0,[],0,\"就可以了\"]]],[10,6],[10,7],[1,\"h3\",[[0,[],0,\"類別的方法\"]]],[1,\"p\",[[0,[],0,\"這個應該歸在類別裡介紹，但自己曾經搞混過所以在這裡註記下，這是類別裡宣告方法的方式，在函式的前面加上\"],[0,[0],1,\"\\\"(變數名稱 *類別)\\\"\"],[0,[],0,\"，即表示宣告該類別的一個方法\"]]],[1,\"p\",[[0,[],0,\"在方法中使用\"],[0,[0],1,\"變數名稱.方法\"],[0,[],0,\"或\"],[0,[0],1,\"變數名稱.屬性\"],[0,[],0,\"表示存取呼叫該方法的物件(本例為co物件)的方法或屬性\"]]],[1,\"p\",[[0,[],0,\"假設使用co物件呼叫setCourse方法，則在setCourse方法裡的c即代表co物件，而c.courseID就代表co物件裡的courseID屬性\"]]],[10,8],[1,\"p\",[]]],\"ghostVersion\":\"3.0\"}","lexical":null,"html":"<p></p><h3 id=\"-\">基本用法</h3><p>最基本的用法為使用func作為宣告函式的關鍵字，後面接上函式名稱(test)及回傳值(string)，這裡要注意的是必須指定回傳型態，否則會跳出錯誤訊息\"too many arguments to return\"</p><!--kg-card-begin: markdown--><pre><code>func test() string{\n    return &quot;Hello&quot; \n}\n\nfunc main(){\n    fmt.Println(test())\n}\n</code></pre>\n<!--kg-card-end: markdown--><!--kg-card-begin: markdown--><pre><code>&gt;Hello\n</code></pre>\n<!--kg-card-end: markdown--><h3 id=\"--1\">多個回傳值</h3><p>golang可以一次回傳多個值，在呼叫的地方必須使用多個變數接收傳回來的值</p><!--kg-card-begin: markdown--><pre><code>func test() (string,string){\n    return &quot;Hello&quot;,&quot;katsuobushi&quot;\n}\n\nfunc main(){\n    hlo,name := test()\n    fmt.Println(hlo , name)\n}\n</code></pre>\n<!--kg-card-end: markdown--><!--kg-card-begin: markdown--><pre><code>&gt;Hello katsuobushi\n</code></pre>\n<!--kg-card-end: markdown--><h3 id=\"--2\">傳入參數</h3><p>在函式名稱後的括號內加入一個或多個\"<strong>變數名稱 變數型態\"</strong>，以傳入參數</p><!--kg-card-begin: markdown--><pre><code>func foo(name string,age int){\n    fmt.Println(name,age)\n}\n\nfunc main(){\n    foo(&quot;katsuobushi&quot;,100)\n}\n</code></pre>\n<!--kg-card-end: markdown--><!--kg-card-begin: markdown--><pre><code>&gt;katsuobushi 100\n</code></pre>\n<!--kg-card-end: markdown--><h3 id=\"--3\">為回傳值命名</h3><p>可為回傳變數命名(宣告變數)，在回傳時可直接呼叫<strong>return</strong>就可以了</p><!--kg-card-begin: markdown--><pre><code>func foo(str string) (returnStr string) {\n    returnStr = str\n    return\n}\n\nfunc main() {\n    fmt.Println(foo(&quot;Hello&quot;))\n}\n</code></pre>\n<!--kg-card-end: markdown--><!--kg-card-begin: markdown--><pre><code>&gt;Hello\n</code></pre>\n<!--kg-card-end: markdown--><h3 id=\"--4\">類別的方法</h3><p>這個應該歸在類別裡介紹，但自己曾經搞混過所以在這裡註記下，這是類別裡宣告方法的方式，在函式的前面加上<strong>\"(變數名稱 *類別)\"</strong>，即表示宣告該類別的一個方法</p><p>在方法中使用<strong>變數名稱.方法</strong>或<strong>變數名稱.屬性</strong>表示存取呼叫該方法的物件(本例為co物件)的方法或屬性</p><p>假設使用co物件呼叫setCourse方法，則在setCourse方法裡的c即代表co物件，而c.courseID就代表co物件裡的courseID屬性</p><!--kg-card-begin: markdown--><pre><code>type course struct {\n    courseID      string\n    courseTeacher string\n}\n\nfunc (c *course) setCourse(id string, teacher string) {\n    c.courseID = id\n    c.courseTeacher = teacher\n}\n\nfunc (c *course) print() {\n    fmt.Println(c.courseID, c.courseTeacher)\n}\n\nfunc main() {\n    var co course\n    co.setCourse(&quot;3452&quot;, &quot;GolangProgramming&quot;)\n    co.print()\n}\n</code></pre>\n<!--kg-card-end: markdown-->","comment_id":"5dfde8756c21ff2c7860dae4","plaintext":"基本用法\n\n最基本的用法為使用func作為宣告函式的關鍵字，後面接上函式名稱(test)及回傳值(string)，這裡要注意的是必須指定回傳型態，否則會跳出錯誤訊息\"too many arguments to return\"\n\nfunc test() string{\n    return \"Hello\" \n}\n\nfunc main(){\n    fmt.Println(test())\n}\n\n\n\n>Hello\n\n\n\n\n多個回傳值\n\ngolang可以一次回傳多個值，在呼叫的地方必須使用多個變數接收傳回來的值\n\nfunc test() (string,string){\n    return \"Hello\",\"katsuobushi\"\n}\n\nfunc main(){\n    hlo,name := test()\n    fmt.Println(hlo , name)\n}\n\n\n\n>Hello katsuobushi\n\n\n\n\n傳入參數\n\n在函式名稱後的括號內加入一個或多個\"變數名稱 變數型態\"，以傳入參數\n\nfunc foo(name string,age int){\n    fmt.Println(name,age)\n}\n\nfunc main(){\n    foo(\"katsuobushi\",100)\n}\n\n\n\n>katsuobushi 100\n\n\n\n\n為回傳值命名\n\n可為回傳變數命名(宣告變數)，在回傳時可直接呼叫return就可以了\n\nfunc foo(str string) (returnStr string) {\n    returnStr = str\n    return\n}\n\nfunc main() {\n    fmt.Println(foo(\"Hello\"))\n}\n\n\n\n>Hello\n\n\n\n\n類別的方法\n\n這個應該歸在類別裡介紹，但自己曾經搞混過所以在這裡註記下，這是類別裡宣告方法的方式，在函式的前面加上\"(變數名稱 *類別)\"，即表示宣告該類別的一個方法\n\n在方法中使用變數名稱.方法或變數名稱.屬性表示存取呼叫該方法的物件(本例為co物件)的方法或屬性\n\n假設使用co物件呼叫setCourse方法，則在setCourse方法裡的c即代表co物件，而c.courseID就代表co物件裡的courseID屬性\n\ntype course struct {\n    courseID      string\n    courseTeacher string\n}\n\nfunc (c *course) setCourse(id string, teacher string) {\n    c.courseID = id\n    c.courseTeacher = teacher\n}\n\nfunc (c *course) print() {\n    fmt.Println(c.courseID, c.courseTeacher)\n}\n\nfunc main() {\n    var co course\n    co.setCourse(\"3452\", \"GolangProgramming\")\n    co.print()\n}\n\n","feature_image":"__GHOST_URL__/content/images/2019/12/golang-long.jpeg","featured":0,"type":"post","status":"published","locale":null,"visibility":"public","email_recipient_filter":"none","created_at":"2019-12-21 09:40:05","created_by":"1","updated_at":"2020-10-27 18:30:58","updated_by":null,"published_at":"2019-12-21 12:49:49","published_by":"1","custom_excerpt":"Golang基礎 - 函式","codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null,"newsletter_id":null},{"id":"635a812457207246b927a80a","uuid":"c72eebfe-96a4-4094-a2d7-2b71d6cee6f8","title":"[Golang]從外部中斷Goroutine","slug":"golang-kill-goroutine","mobiledoc":"{\"version\":\"0.3.1\",\"atoms\":[],\"cards\":[[\"hr\",{\"_config\":{\"url\":\"http://localhost:2368/\",\"adminUrl\":null,\"apiVersions\":{\"all\":[\"v2\",\"v3\",\"canary\"],\"canary\":{\"admin\":\"canary/admin\",\"content\":\"canary/content\",\"members\":\"canary/members\"},\"v3\":{\"admin\":\"v3/admin\",\"content\":\"v3/content\",\"members\":\"v3/members\"},\"v2\":{\"admin\":\"v2/admin\",\"content\":\"v2/content\"}},\"slugs\":[\"ghost\",\"rss\",\"amp\"],\"redirectCacheMaxAge\":31536000,\"baseApiPath\":\"/ghost/api\",\"defaultApiVersion\":\"v3\",\"defaultApiType\":\"content\",\"staticImageUrlPrefix\":\"content/images\",\"cardTransformers\":[{\"name\":\"card-markdown\",\"type\":\"dom\"},{\"name\":\"code\",\"type\":\"dom\"},{\"name\":\"embed\",\"type\":\"dom\"},{\"name\":\"bookmark\",\"type\":\"dom\"},{\"name\":\"hr\",\"type\":\"dom\"},{\"name\":\"html\",\"type\":\"dom\"},{\"name\":\"image\",\"type\":\"dom\"},{\"name\":\"markdown\",\"type\":\"dom\"},{\"name\":\"gallery\",\"type\":\"dom\"}]},\"_defaultApiPathOptions\":{\"baseApiPath\":\"/ghost/api\",\"version\":\"v3\",\"type\":\"content\",\"apiVersions\":{\"all\":[\"v2\",\"v3\",\"canary\"],\"canary\":{\"admin\":\"canary/admin\",\"content\":\"canary/content\",\"members\":\"canary/members\"},\"v3\":{\"admin\":\"v3/admin\",\"content\":\"v3/content\",\"members\":\"v3/members\"},\"v2\":{\"admin\":\"v2/admin\",\"content\":\"v2/content\"}}}}],[\"markdown\",{\"markdown\":\"    ch := make(chan struct{})\"}],[\"markdown\",{\"markdown\":\"    ch := make(chan struct{},10)//buffer大小為10\"}],[\"markdown\",{\"markdown\":\"    func main(){\\n        ch := make(chan struct{})\\n        go spinner(80*time.Millisecond, ch)\\n    }\\n    \\n    func spinner(delay time.Duration, ch chan struct{}) {\\n        \\n    }\"}],[\"markdown\",{\"markdown\":\"    func main(){\\n        ch := make(chan struct{})\\n        go spinner(80*time.Millisecond, ch)\\n    }\\n    \\n    func spinner(delay time.Duration, ch chan struct{}) {\\n        for {\\n            select {\\n            case <-ch:\\n                return\\n            default:\\n                for _, r := range `-\\\\|/` {\\n                    fmt.Printf(\\\"\\\\r%c\\\", r)\\n                    time.Sleep(delay)\\n                }\\n            }\\n        }\\n    }\"}],[\"markdown\",{\"markdown\":\"    func main(){\\n        ch := make(chan struct{})\\n        go spinner(80*time.Millisecond, ch)\\n        close(ch)\\n    }\\n    \\n    func spinner(delay time.Duration, ch chan struct{}) {\\n        for {\\n            select {\\n            case <-ch:\\n                return\\n            default:\\n                for _, r := range `-\\\\|/` {\\n                    fmt.Printf(\\\"\\\\r%c\\\", r)\\n                    time.Sleep(delay)\\n                }\\n            }\\n        }\\n    }\"}]],\"markups\":[[\"strong\"]],\"sections\":[[1,\"p\",[]],[1,\"p\",[[0,[],0,\"想要從外部終止一個正在執行中或無限迴圈的goroutine，必須使用channel將中斷訊息傳入使之中斷\"]]],[10,0],[1,\"h3\",[[0,[],0,\"建立Channel\"]]],[1,\"p\",[[0,[],0,\"使用\"],[0,[0],1,\"chan\"],[0,[],0,\"關鍵字宣告為channel，並指定通道類型\"]]],[10,1],[1,\"p\",[[0,[],0,\"若要傳入channel多個值，則必須指定buffer的大小，否則會造成deadlock\"]]],[10,2],[1,\"p\",[[0,[],0,\"設定目標函式的參數\"]]],[10,3],[1,\"h3\",[[0,[],0,\"使用select case控制流程\"]]],[1,\"p\",[[0,[],0,\"select case只能用在有關channel的操作上，若多個case都符合，則會隨機挑選一個執行，若都不符合則執行default\"]]],[10,4],[1,\"h3\",[[0,[],0,\"結束goroutine\"]]],[1,\"p\",[[0,[],0,\"在要中斷的地方插入close(ch)以關閉channel\"]]],[10,5],[1,\"p\",[]]],\"ghostVersion\":\"3.0\"}","lexical":null,"html":"<p></p><p>想要從外部終止一個正在執行中或無限迴圈的goroutine，必須使用channel將中斷訊息傳入使之中斷</p><hr><h3 id=\"-channel\">建立Channel</h3><p>使用<strong>chan</strong>關鍵字宣告為channel，並指定通道類型</p><!--kg-card-begin: markdown--><pre><code>ch := make(chan struct{})\n</code></pre>\n<!--kg-card-end: markdown--><p>若要傳入channel多個值，則必須指定buffer的大小，否則會造成deadlock</p><!--kg-card-begin: markdown--><pre><code>ch := make(chan struct{},10)//buffer大小為10\n</code></pre>\n<!--kg-card-end: markdown--><p>設定目標函式的參數</p><!--kg-card-begin: markdown--><pre><code>func main(){\n    ch := make(chan struct{})\n    go spinner(80*time.Millisecond, ch)\n}\n\nfunc spinner(delay time.Duration, ch chan struct{}) {\n    \n}\n</code></pre>\n<!--kg-card-end: markdown--><h3 id=\"-select-case-\">使用select case控制流程</h3><p>select case只能用在有關channel的操作上，若多個case都符合，則會隨機挑選一個執行，若都不符合則執行default</p><!--kg-card-begin: markdown--><pre><code>func main(){\n    ch := make(chan struct{})\n    go spinner(80*time.Millisecond, ch)\n}\n\nfunc spinner(delay time.Duration, ch chan struct{}) {\n    for {\n        select {\n        case &lt;-ch:\n            return\n        default:\n            for _, r := range `-\\|/` {\n                fmt.Printf(&quot;\\r%c&quot;, r)\n                time.Sleep(delay)\n            }\n        }\n    }\n}\n</code></pre>\n<!--kg-card-end: markdown--><h3 id=\"-goroutine\">結束goroutine</h3><p>在要中斷的地方插入close(ch)以關閉channel</p><!--kg-card-begin: markdown--><pre><code>func main(){\n    ch := make(chan struct{})\n    go spinner(80*time.Millisecond, ch)\n    close(ch)\n}\n\nfunc spinner(delay time.Duration, ch chan struct{}) {\n    for {\n        select {\n        case &lt;-ch:\n            return\n        default:\n            for _, r := range `-\\|/` {\n                fmt.Printf(&quot;\\r%c&quot;, r)\n                time.Sleep(delay)\n            }\n        }\n    }\n}\n</code></pre>\n<!--kg-card-end: markdown-->","comment_id":"5e019b6b9d3d371b842d0b37","plaintext":"想要從外部終止一個正在執行中或無限迴圈的goroutine，必須使用channel將中斷訊息傳入使之中斷\n\n\n建立Channel\n\n使用chan關鍵字宣告為channel，並指定通道類型\n\nch := make(chan struct{})\n\n\n\n若要傳入channel多個值，則必須指定buffer的大小，否則會造成deadlock\n\nch := make(chan struct{},10)//buffer大小為10\n\n\n\n設定目標函式的參數\n\nfunc main(){\n    ch := make(chan struct{})\n    go spinner(80*time.Millisecond, ch)\n}\n\nfunc spinner(delay time.Duration, ch chan struct{}) {\n    \n}\n\n\n\n\n使用select case控制流程\n\nselect case只能用在有關channel的操作上，若多個case都符合，則會隨機挑選一個執行，若都不符合則執行default\n\nfunc main(){\n    ch := make(chan struct{})\n    go spinner(80*time.Millisecond, ch)\n}\n\nfunc spinner(delay time.Duration, ch chan struct{}) {\n    for {\n        select {\n        case <-ch:\n            return\n        default:\n            for _, r := range `-\\|/` {\n                fmt.Printf(\"\\r%c\", r)\n                time.Sleep(delay)\n            }\n        }\n    }\n}\n\n\n\n\n結束goroutine\n\n在要中斷的地方插入close(ch)以關閉channel\n\nfunc main(){\n    ch := make(chan struct{})\n    go spinner(80*time.Millisecond, ch)\n    close(ch)\n}\n\nfunc spinner(delay time.Duration, ch chan struct{}) {\n    for {\n        select {\n        case <-ch:\n            return\n        default:\n            for _, r := range `-\\|/` {\n                fmt.Printf(\"\\r%c\", r)\n                time.Sleep(delay)\n            }\n        }\n    }\n}\n\n","feature_image":"__GHOST_URL__/content/images/2019/12/golang-long-1.jpeg","featured":0,"type":"post","status":"published","locale":null,"visibility":"public","email_recipient_filter":"none","created_at":"2019-12-24 05:00:27","created_by":"1","updated_at":"2020-10-27 18:29:48","updated_by":null,"published_at":"2019-12-24 06:29:39","published_by":"1","custom_excerpt":"想要從外部終止一個正在執行中或無限迴圈的goroutine，必須使用channel將中斷訊息傳入使之中斷","codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null,"newsletter_id":null},{"id":"635a812457207246b927a80b","uuid":"14406421-6690-45b7-a0be-acc7d2515171","title":"[Python]使用Python爬蟲抓取網站資料","slug":"python-web-crawler","mobiledoc":"{\"version\":\"0.3.1\",\"atoms\":[[\"soft-return\",\"\",{}],[\"soft-return\",\"\",{}],[\"soft-return\",\"\",{}],[\"soft-return\",\"\",{}],[\"soft-return\",\"\",{}],[\"soft-return\",\"\",{}],[\"soft-return\",\"\",{}],[\"soft-return\",\"\",{}],[\"soft-return\",\"\",{}],[\"soft-return\",\"\",{}],[\"soft-return\",\"\",{}],[\"soft-return\",\"\",{}],[\"soft-return\",\"\",{}],[\"soft-return\",\"\",{}],[\"soft-return\",\"\",{}],[\"soft-return\",\"\",{}]],\"cards\":[[\"hr\",{\"_config\":{\"url\":\"http://localhost:2368/\",\"adminUrl\":null,\"apiVersions\":{\"all\":[\"v2\",\"v3\",\"canary\"],\"canary\":{\"admin\":\"canary/admin\",\"content\":\"canary/content\",\"members\":\"canary/members\"},\"v3\":{\"admin\":\"v3/admin\",\"content\":\"v3/content\",\"members\":\"v3/members\"},\"v2\":{\"admin\":\"v2/admin\",\"content\":\"v2/content\"}},\"slugs\":[\"ghost\",\"rss\",\"amp\"],\"redirectCacheMaxAge\":31536000,\"baseApiPath\":\"/ghost/api\",\"defaultApiVersion\":\"v3\",\"defaultApiType\":\"content\",\"staticImageUrlPrefix\":\"content/images\",\"cardTransformers\":[{\"name\":\"card-markdown\",\"type\":\"dom\"},{\"name\":\"code\",\"type\":\"dom\"},{\"name\":\"embed\",\"type\":\"dom\"},{\"name\":\"bookmark\",\"type\":\"dom\"},{\"name\":\"hr\",\"type\":\"dom\"},{\"name\":\"html\",\"type\":\"dom\"},{\"name\":\"image\",\"type\":\"dom\"},{\"name\":\"markdown\",\"type\":\"dom\"},{\"name\":\"gallery\",\"type\":\"dom\"}]},\"_defaultApiPathOptions\":{\"baseApiPath\":\"/ghost/api\",\"version\":\"v3\",\"type\":\"content\",\"apiVersions\":{\"all\":[\"v2\",\"v3\",\"canary\"],\"canary\":{\"admin\":\"canary/admin\",\"content\":\"canary/content\",\"members\":\"canary/members\"},\"v3\":{\"admin\":\"v3/admin\",\"content\":\"v3/content\",\"members\":\"v3/members\"},\"v2\":{\"admin\":\"v2/admin\",\"content\":\"v2/content\"}}}}],[\"markdown\",{\"markdown\":\"    import requests\"}],[\"markdown\",{\"markdown\":\"    url = '' //填入目標網址以取得網頁內容\\n    resp = requests.get(url) //建立get請求\"}],[\"hr\",{\"_config\":{\"url\":\"http://localhost:2368/\",\"adminUrl\":null,\"apiVersions\":{\"all\":[\"v2\",\"v3\",\"canary\"],\"canary\":{\"admin\":\"canary/admin\",\"content\":\"canary/content\",\"members\":\"canary/members\"},\"v3\":{\"admin\":\"v3/admin\",\"content\":\"v3/content\",\"members\":\"v3/members\"},\"v2\":{\"admin\":\"v2/admin\",\"content\":\"v2/content\"}},\"slugs\":[\"ghost\",\"rss\",\"amp\"],\"redirectCacheMaxAge\":31536000,\"baseApiPath\":\"/ghost/api\",\"defaultApiVersion\":\"v3\",\"defaultApiType\":\"content\",\"staticImageUrlPrefix\":\"content/images\",\"cardTransformers\":[{\"name\":\"card-markdown\",\"type\":\"dom\"},{\"name\":\"code\",\"type\":\"dom\"},{\"name\":\"embed\",\"type\":\"dom\"},{\"name\":\"bookmark\",\"type\":\"dom\"},{\"name\":\"hr\",\"type\":\"dom\"},{\"name\":\"html\",\"type\":\"dom\"},{\"name\":\"image\",\"type\":\"dom\"},{\"name\":\"markdown\",\"type\":\"dom\"},{\"name\":\"gallery\",\"type\":\"dom\"}]},\"_defaultApiPathOptions\":{\"baseApiPath\":\"/ghost/api\",\"version\":\"v3\",\"type\":\"content\",\"apiVersions\":{\"all\":[\"v2\",\"v3\",\"canary\"],\"canary\":{\"admin\":\"canary/admin\",\"content\":\"canary/content\",\"members\":\"canary/members\"},\"v3\":{\"admin\":\"v3/admin\",\"content\":\"v3/content\",\"members\":\"v3/members\"},\"v2\":{\"admin\":\"v2/admin\",\"content\":\"v2/content\"}}}}],[\"markdown\",{\"markdown\":\"    data = resp.json()\"}],[\"markdown\",{\"markdown\":\"    from bs4 import BeautifulSoup\"}],[\"markdown\",{\"markdown\":\"    soup = BeautifulSoup(resp.text,'html5lib')\"}],[\"hr\",{\"_config\":{\"url\":\"http://localhost:2368/\",\"adminUrl\":null,\"apiVersions\":{\"all\":[\"v2\",\"v3\",\"canary\"],\"canary\":{\"admin\":\"canary/admin\",\"content\":\"canary/content\",\"members\":\"canary/members\"},\"v3\":{\"admin\":\"v3/admin\",\"content\":\"v3/content\",\"members\":\"v3/members\"},\"v2\":{\"admin\":\"v2/admin\",\"content\":\"v2/content\"}},\"slugs\":[\"ghost\",\"rss\",\"amp\"],\"redirectCacheMaxAge\":31536000,\"baseApiPath\":\"/ghost/api\",\"defaultApiVersion\":\"v3\",\"defaultApiType\":\"content\",\"staticImageUrlPrefix\":\"content/images\",\"cardTransformers\":[{\"name\":\"card-markdown\",\"type\":\"dom\"},{\"name\":\"code\",\"type\":\"dom\"},{\"name\":\"embed\",\"type\":\"dom\"},{\"name\":\"bookmark\",\"type\":\"dom\"},{\"name\":\"hr\",\"type\":\"dom\"},{\"name\":\"html\",\"type\":\"dom\"},{\"name\":\"image\",\"type\":\"dom\"},{\"name\":\"markdown\",\"type\":\"dom\"},{\"name\":\"gallery\",\"type\":\"dom\"}]},\"_defaultApiPathOptions\":{\"baseApiPath\":\"/ghost/api\",\"version\":\"v3\",\"type\":\"content\",\"apiVersions\":{\"all\":[\"v2\",\"v3\",\"canary\"],\"canary\":{\"admin\":\"canary/admin\",\"content\":\"canary/content\",\"members\":\"canary/members\"},\"v3\":{\"admin\":\"v3/admin\",\"content\":\"v3/content\",\"members\":\"v3/members\"},\"v2\":{\"admin\":\"v2/admin\",\"content\":\"v2/content\"}}}}],[\"image\",{\"src\":\"__GHOST_URL__/content/images/2020/01/bandicam-2020-01-03-22-28-14-255.jpg\"}],[\"markdown\",{\"markdown\":\"    import pandas as pd\\n    \"}],[\"markdown\",{\"markdown\":\"    //data[]為先前取得的資料，型態為字典\\n    df = pd.DataFrame(data['data'],columns = data['fields'])\"}],[\"markdown\",{\"markdown\":\"    for row in df:\\n        print(row)\\n        \"}],[\"markdown\",{\"markdown\":\"    >日期\\n    成交股數\\n    成交金額\\n    開盤價\\n    最高價\\n    最低價\\n    收盤價\\n    漲跌價差\\n    成交筆數\"}],[\"markdown\",{\"markdown\":\"    for row in df.values:\\n        print(row)\"}],[\"markdown\",{\"markdown\":\"    >['108/10/01' '8,895,183' '399,156,974' '44.85' '45.00' '44.75' '45.00' '+0.45' '3,310']\\n    ['108/10/02' '4,399,985' '196,735,002' '44.55' '44.85' '44.55' '44.75' '-0.25' '1,745']\\n    ...\\n    ['108/10/31' '17,527,040' '787,119,996' '45.40' '45.40' '44.55' '44.55' '-0.90' '5,017']\"}],[\"markdown\",{\"markdown\":\"    for content in soup.find_all('li'):\\n        print(content.string)\"}],[\"markdown\",{\"markdown\":\"    soup = BeautifulSoup('<h1 id=\\\"thisish1\\\">content</h1>', 'html5lib')\\n    print(soup.h1)\"}],[\"markdown\",{\"markdown\":\"    ><h1 id=\\\"thisish1\\\">content</h1>\"}],[\"markdown\",{\"markdown\":\"    soup = BeautifulSoup('<h1 id=\\\"thisish1\\\">content</h1>', 'html5lib')\\n    print(soup.h1.string)\"}],[\"markdown\",{\"markdown\":\"    >content\"}],[\"markdown\",{\"markdown\":\"    soup = BeautifulSoup('<h1 href=\\\"katsuobushi.com\\\">content</h1>', 'html5lib')\\n    print(soup.h1.get('href'))\"}],[\"markdown\",{\"markdown\":\"    >katsuobushi.com\"}],[\"hr\",{\"_config\":{\"url\":\"http://localhost:2368/\",\"adminUrl\":null,\"apiVersions\":{\"all\":[\"v2\",\"v3\",\"canary\"],\"canary\":{\"admin\":\"canary/admin\",\"content\":\"canary/content\",\"members\":\"canary/members\"},\"v3\":{\"admin\":\"v3/admin\",\"content\":\"v3/content\",\"members\":\"v3/members\"},\"v2\":{\"admin\":\"v2/admin\",\"content\":\"v2/content\"}},\"slugs\":[\"ghost\",\"rss\",\"amp\"],\"redirectCacheMaxAge\":31536000,\"baseApiPath\":\"/ghost/api\",\"defaultApiVersion\":\"v3\",\"defaultApiType\":\"content\",\"staticImageUrlPrefix\":\"content/images\",\"cardTransformers\":[{\"name\":\"card-markdown\",\"type\":\"dom\"},{\"name\":\"code\",\"type\":\"dom\"},{\"name\":\"embed\",\"type\":\"dom\"},{\"name\":\"bookmark\",\"type\":\"dom\"},{\"name\":\"hr\",\"type\":\"dom\"},{\"name\":\"html\",\"type\":\"dom\"},{\"name\":\"image\",\"type\":\"dom\"},{\"name\":\"markdown\",\"type\":\"dom\"},{\"name\":\"gallery\",\"type\":\"dom\"}]},\"_defaultApiPathOptions\":{\"baseApiPath\":\"/ghost/api\",\"version\":\"v3\",\"type\":\"content\",\"apiVersions\":{\"all\":[\"v2\",\"v3\",\"canary\"],\"canary\":{\"admin\":\"canary/admin\",\"content\":\"canary/content\",\"members\":\"canary/members\"},\"v3\":{\"admin\":\"v3/admin\",\"content\":\"v3/content\",\"members\":\"v3/members\"},\"v2\":{\"admin\":\"v2/admin\",\"content\":\"v2/content\"}}}}],[\"markdown\",{\"markdown\":\"    import os\\n    import csv\"}],[\"markdown\",{\"markdown\":\"    file = open(filepath,'w',newline='',encoding='utf-8-sig')\"}],[\"markdown\",{\"markdown\":\"    csvWriter = csv.writer(file)\"}],[\"markdown\",{\"markdown\":\"    csvWriter.writerow(row)\"}],[\"markdown\",{\"markdown\":\"    file.close()\"}]],\"markups\":[[\"strong\"],[\"a\",[\"href\",\"https://www.twse.com.tw/exchangeReport/STOCK_DAY?response=json&date=20190101&stockNo=2881\"]]],\"sections\":[[1,\"p\",[]],[1,\"p\",[[0,[],0,\"使用python抓取網站或網頁資料是再方便不過的了，常見的抓取方法包含抓取網站回應的JSON檔，或是直接抓取網頁內容並進行分析，以下紀錄兩種方法該如何實作。\"]]],[10,0],[1,\"h2\",[[0,[],0,\"建立請求\"],[1,[],0,0]]],[1,\"p\",[[0,[],0,\"載入requests模組以建立HTTP請求\"]]],[10,1],[1,\"p\",[[0,[],0,\"建立GET請求\"]]],[10,2],[10,3],[1,\"h2\",[[0,[],0,\"解析請求\"],[1,[],0,1]]],[1,\"h3\",[[0,[],0,\"目標為JSON\"]]],[1,\"p\",[[0,[],0,\"使用\"],[0,[0],1,\"json()\"],[0,[],0,\"方法解析內容，返回值(data)為字典\"]]],[10,4],[1,\"h3\",[[0,[],0,\"目標為HTML網頁內容\"]]],[1,\"p\",[[0,[],0,\"需使用BeautifulSoup模組裡的方法，使用以下指令載入該模組\"]]],[10,5],[1,\"p\",[[0,[],0,\"使用\"],[0,[0],1,\"BeautifulSoup(htmlMarkup,'html5lib')\"],[0,[],0,\"方法解析網頁內容，返回值(soup)為<class 'bs4.BeautifulSoup'>\"]]],[10,6],[10,7],[1,\"h2\",[[0,[],0,\"取得內容\"],[1,[],0,2]]],[1,\"h3\",[[0,[],0,\"目標為JSON\"]]],[1,\"p\",[[0,[],0,\"以台灣證券交易所-201901月個股日成交資訊為例，網址為'\"],[0,[1],1,\"https://www.twse.com.tw/exchangeReport/STOCK_DAY?response=json&date=20190101&stockNo=2881\"],[0,[],0,\"'，該請求返回的內容如下圖\"]]],[10,8],[1,\"p\",[[0,[],0,\"需使用Pandas模組裡的方法，使用以下指令載入該模組\"]]],[10,9],[1,\"p\",[[0,[],0,\"我們需要取得data裡的0~20所有資訊做為內容，將其放入pandas的dataframe裡，並使用fields作為其欄位的標籤\"]]],[10,10],[1,\"p\",[[0,[],0,\"若要使用foreach迴圈讀取或印出dataframe的內容時，需使用\"],[0,[0],1,\"df.values\"],[0,[],0,\"作為範圍，若只使用df作為範圍會得到錯誤的結果\"]]],[10,11],[10,12],[10,13],[10,14],[1,\"h3\",[[0,[],0,\"目標為HTML網頁內容\"]]],[1,\"p\",[[0,[],0,\"類別為'bs4.BeautifulSoup'的物件可使用以下方法\"],[1,[],0,3],[1,[],0,4],[0,[],0,\"find()\\t//查詢第一筆符合的資料\"],[1,[],0,5],[0,[],0,\"find(htmlTag)\\t//查詢標籤類型為htmlTag的第一筆元素\"],[1,[],0,6],[0,[],0,\"find(id='elementID')\\t//查詢id為elementID的元素\"],[1,[],0,7],[0,[],0,\"find(htmlTag,class_='className')\\t//查詢標籤為htmlTag且class為className的第一筆元素\"],[1,[],0,8],[0,[],0,\"find(htmlTag,className)\\t//查詢標籤為htmlTag且class為className的第一筆元素\"],[1,[],0,9],[1,[],0,10],[0,[],0,\"find_all()\\t//查詢所有符合的元素\"],[1,[],0,11],[0,[],0,\"find_all(htmlTag)\\t//查詢所有符合標籤類型為htmlTag的元素\"],[1,[],0,12],[0,[],0,\"find_all(id='elementID')\\t//查詢id為elementID的元素\"],[1,[],0,13],[0,[],0,\"find_all(htmlTag,class_='className')\\t//查詢標籤為htmlTag且class為className的所有元素\"],[1,[],0,14],[0,[],0,\"find_all(htmlTag,className)\\t//查詢標籤為htmlTag且class為className的所有元素\"]]],[1,\"p\",[[0,[],0,\"若使用find_all()查詢，可使用foreach迴圈歷遍所有查找到的元素\"]]],[10,15],[1,\"p\",[[0,[],0,\"使用\"],[0,[0],1,\".string\"],[0,[],0,\"方法取得元素的內容\"]]],[10,16],[10,17],[10,18],[10,19],[1,\"p\",[[0,[],0,\"使用get('href')方法取得元素的href屬性\"]]],[10,20],[10,21],[10,22],[1,\"h2\",[[0,[],0,\"輸出為檔案\"],[1,[],0,15]]],[1,\"h3\",[[0,[],0,\"輸出為csv檔案\"]]],[1,\"p\",[[0,[],0,\"需載入os及csv模組以使用open及writer方法\"]]],[10,23],[1,\"p\",[[0,[],0,\"使用w模式開啟檔案，w模式為打開一個文件只用於寫入，若文件已存在則打开文件，並從頭開始編輯，原有内容會被刪除。若文件不存在，則創建新文件。\"]]],[10,24],[1,\"p\",[[0,[],0,\"使用csv.writer()創建一個writer\"]]],[10,25],[1,\"p\",[[0,[],0,\"writerow()方法可將一列資料寫入到檔案中\"]]],[10,26],[1,\"p\",[[0,[],0,\"寫入完畢後須關閉檔案，釋放資源\"]]],[10,27],[1,\"p\",[]]],\"ghostVersion\":\"3.0\"}","lexical":null,"html":"<p></p><p>使用python抓取網站或網頁資料是再方便不過的了，常見的抓取方法包含抓取網站回應的JSON檔，或是直接抓取網頁內容並進行分析，以下紀錄兩種方法該如何實作。</p><hr><h2 id=\"-\">建立請求<br></h2><p>載入requests模組以建立HTTP請求</p><!--kg-card-begin: markdown--><pre><code>import requests\n</code></pre>\n<!--kg-card-end: markdown--><p>建立GET請求</p><!--kg-card-begin: markdown--><pre><code>url = '' //填入目標網址以取得網頁內容\nresp = requests.get(url) //建立get請求\n</code></pre>\n<!--kg-card-end: markdown--><hr><h2 id=\"--1\">解析請求<br></h2><h3 id=\"-json\">目標為JSON</h3><p>使用<strong>json()</strong>方法解析內容，返回值(data)為字典</p><!--kg-card-begin: markdown--><pre><code>data = resp.json()\n</code></pre>\n<!--kg-card-end: markdown--><h3 id=\"-html-\">目標為HTML網頁內容</h3><p>需使用BeautifulSoup模組裡的方法，使用以下指令載入該模組</p><!--kg-card-begin: markdown--><pre><code>from bs4 import BeautifulSoup\n</code></pre>\n<!--kg-card-end: markdown--><p>使用<strong>BeautifulSoup(htmlMarkup,'html5lib')</strong>方法解析網頁內容，返回值(soup)為&lt;class 'bs4.BeautifulSoup'&gt;</p><!--kg-card-begin: markdown--><pre><code>soup = BeautifulSoup(resp.text,'html5lib')\n</code></pre>\n<!--kg-card-end: markdown--><hr><h2 id=\"--2\">取得內容<br></h2><h3 id=\"-json-1\">目標為JSON</h3><p>以台灣證券交易所-201901月個股日成交資訊為例，網址為'<a href=\"https://www.twse.com.tw/exchangeReport/STOCK_DAY?response=json&amp;date=20190101&amp;stockNo=2881\">https://www.twse.com.tw/exchangeReport/STOCK_DAY?response=json&amp;date=20190101&amp;stockNo=2881</a>'，該請求返回的內容如下圖</p><figure class=\"kg-card kg-image-card\"><img src=\"__GHOST_URL__/content/images/2020/01/bandicam-2020-01-03-22-28-14-255.jpg\" class=\"kg-image\" alt loading=\"lazy\"></figure><p>需使用Pandas模組裡的方法，使用以下指令載入該模組</p><!--kg-card-begin: markdown--><pre><code>import pandas as pd\n</code></pre>\n<!--kg-card-end: markdown--><p>我們需要取得data裡的0~20所有資訊做為內容，將其放入pandas的dataframe裡，並使用fields作為其欄位的標籤</p><!--kg-card-begin: markdown--><pre><code>//data[]為先前取得的資料，型態為字典\ndf = pd.DataFrame(data['data'],columns = data['fields'])\n</code></pre>\n<!--kg-card-end: markdown--><p>若要使用foreach迴圈讀取或印出dataframe的內容時，需使用<strong>df.values</strong>作為範圍，若只使用df作為範圍會得到錯誤的結果</p><!--kg-card-begin: markdown--><pre><code>for row in df:\n    print(row)\n</code></pre>\n<!--kg-card-end: markdown--><!--kg-card-begin: markdown--><pre><code>&gt;日期\n成交股數\n成交金額\n開盤價\n最高價\n最低價\n收盤價\n漲跌價差\n成交筆數\n</code></pre>\n<!--kg-card-end: markdown--><!--kg-card-begin: markdown--><pre><code>for row in df.values:\n    print(row)\n</code></pre>\n<!--kg-card-end: markdown--><!--kg-card-begin: markdown--><pre><code>&gt;['108/10/01' '8,895,183' '399,156,974' '44.85' '45.00' '44.75' '45.00' '+0.45' '3,310']\n['108/10/02' '4,399,985' '196,735,002' '44.55' '44.85' '44.55' '44.75' '-0.25' '1,745']\n...\n['108/10/31' '17,527,040' '787,119,996' '45.40' '45.40' '44.55' '44.55' '-0.90' '5,017']\n</code></pre>\n<!--kg-card-end: markdown--><h3 id=\"-html--1\">目標為HTML網頁內容</h3><p>類別為'bs4.BeautifulSoup'的物件可使用以下方法<br><br>find() //查詢第一筆符合的資料<br>find(htmlTag) //查詢標籤類型為htmlTag的第一筆元素<br>find(id='elementID') //查詢id為elementID的元素<br>find(htmlTag,class_='className') //查詢標籤為htmlTag且class為className的第一筆元素<br>find(htmlTag,className) //查詢標籤為htmlTag且class為className的第一筆元素<br><br>find_all() //查詢所有符合的元素<br>find_all(htmlTag) //查詢所有符合標籤類型為htmlTag的元素<br>find_all(id='elementID') //查詢id為elementID的元素<br>find_all(htmlTag,class_='className') //查詢標籤為htmlTag且class為className的所有元素<br>find_all(htmlTag,className) //查詢標籤為htmlTag且class為className的所有元素</p><p>若使用find_all()查詢，可使用foreach迴圈歷遍所有查找到的元素</p><!--kg-card-begin: markdown--><pre><code>for content in soup.find_all('li'):\n    print(content.string)\n</code></pre>\n<!--kg-card-end: markdown--><p>使用<strong>.string</strong>方法取得元素的內容</p><!--kg-card-begin: markdown--><pre><code>soup = BeautifulSoup('&lt;h1 id=&quot;thisish1&quot;&gt;content&lt;/h1&gt;', 'html5lib')\nprint(soup.h1)\n</code></pre>\n<!--kg-card-end: markdown--><!--kg-card-begin: markdown--><pre><code>&gt;&lt;h1 id=&quot;thisish1&quot;&gt;content&lt;/h1&gt;\n</code></pre>\n<!--kg-card-end: markdown--><!--kg-card-begin: markdown--><pre><code>soup = BeautifulSoup('&lt;h1 id=&quot;thisish1&quot;&gt;content&lt;/h1&gt;', 'html5lib')\nprint(soup.h1.string)\n</code></pre>\n<!--kg-card-end: markdown--><!--kg-card-begin: markdown--><pre><code>&gt;content\n</code></pre>\n<!--kg-card-end: markdown--><p>使用get('href')方法取得元素的href屬性</p><!--kg-card-begin: markdown--><pre><code>soup = BeautifulSoup('&lt;h1 href=&quot;katsuobushi.com&quot;&gt;content&lt;/h1&gt;', 'html5lib')\nprint(soup.h1.get('href'))\n</code></pre>\n<!--kg-card-end: markdown--><!--kg-card-begin: markdown--><pre><code>&gt;katsuobushi.com\n</code></pre>\n<!--kg-card-end: markdown--><hr><h2 id=\"--3\">輸出為檔案<br></h2><h3 id=\"-csv-\">輸出為csv檔案</h3><p>需載入os及csv模組以使用open及writer方法</p><!--kg-card-begin: markdown--><pre><code>import os\nimport csv\n</code></pre>\n<!--kg-card-end: markdown--><p>使用w模式開啟檔案，w模式為打開一個文件只用於寫入，若文件已存在則打开文件，並從頭開始編輯，原有内容會被刪除。若文件不存在，則創建新文件。</p><!--kg-card-begin: markdown--><pre><code>file = open(filepath,'w',newline='',encoding='utf-8-sig')\n</code></pre>\n<!--kg-card-end: markdown--><p>使用csv.writer()創建一個writer</p><!--kg-card-begin: markdown--><pre><code>csvWriter = csv.writer(file)\n</code></pre>\n<!--kg-card-end: markdown--><p>writerow()方法可將一列資料寫入到檔案中</p><!--kg-card-begin: markdown--><pre><code>csvWriter.writerow(row)\n</code></pre>\n<!--kg-card-end: markdown--><p>寫入完畢後須關閉檔案，釋放資源</p><!--kg-card-begin: markdown--><pre><code>file.close()\n</code></pre>\n<!--kg-card-end: markdown-->","comment_id":"5e0e8ba22418ef16205128e7","plaintext":"使用python抓取網站或網頁資料是再方便不過的了，常見的抓取方法包含抓取網站回應的JSON檔，或是直接抓取網頁內容並進行分析，以下紀錄兩種方法該如何實作。\n\n\n建立請求\n\n\n載入requests模組以建立HTTP請求\n\nimport requests\n\n\n\n建立GET請求\n\nurl = '' //填入目標網址以取得網頁內容\nresp = requests.get(url) //建立get請求\n\n\n\n\n解析請求\n\n\n\n目標為JSON\n\n使用json()方法解析內容，返回值(data)為字典\n\ndata = resp.json()\n\n\n\n\n目標為HTML網頁內容\n\n需使用BeautifulSoup模組裡的方法，使用以下指令載入該模組\n\nfrom bs4 import BeautifulSoup\n\n\n\n使用BeautifulSoup(htmlMarkup,'html5lib')方法解析網頁內容，返回值(soup)為<class 'bs4.BeautifulSoup'>\n\nsoup = BeautifulSoup(resp.text,'html5lib')\n\n\n\n\n取得內容\n\n\n\n目標為JSON\n\n以台灣證券交易所-201901月個股日成交資訊為例，網址為'https://www.twse.com.tw/exchangeReport/STOCK_DAY?response=json&date=20190101&stockNo=2881'，該請求返回的內容如下圖\n\n需使用Pandas模組裡的方法，使用以下指令載入該模組\n\nimport pandas as pd\n\n\n\n我們需要取得data裡的0~20所有資訊做為內容，將其放入pandas的dataframe裡，並使用fields作為其欄位的標籤\n\n//data[]為先前取得的資料，型態為字典\ndf = pd.DataFrame(data['data'],columns = data['fields'])\n\n\n\n若要使用foreach迴圈讀取或印出dataframe的內容時，需使用df.values作為範圍，若只使用df作為範圍會得到錯誤的結果\n\nfor row in df:\n    print(row)\n\n\n\n>日期\n成交股數\n成交金額\n開盤價\n最高價\n最低價\n收盤價\n漲跌價差\n成交筆數\n\n\n\nfor row in df.values:\n    print(row)\n\n\n\n>['108/10/01' '8,895,183' '399,156,974' '44.85' '45.00' '44.75' '45.00' '+0.45' '3,310']\n['108/10/02' '4,399,985' '196,735,002' '44.55' '44.85' '44.55' '44.75' '-0.25' '1,745']\n...\n['108/10/31' '17,527,040' '787,119,996' '45.40' '45.40' '44.55' '44.55' '-0.90' '5,017']\n\n\n\n\n目標為HTML網頁內容\n\n類別為'bs4.BeautifulSoup'的物件可使用以下方法\n\nfind() //查詢第一筆符合的資料\nfind(htmlTag) //查詢標籤類型為htmlTag的第一筆元素\nfind(id='elementID') //查詢id為elementID的元素\nfind(htmlTag,class_='className') //查詢標籤為htmlTag且class為className的第一筆元素\nfind(htmlTag,className) //查詢標籤為htmlTag且class為className的第一筆元素\n\nfind_all() //查詢所有符合的元素\nfind_all(htmlTag) //查詢所有符合標籤類型為htmlTag的元素\nfind_all(id='elementID') //查詢id為elementID的元素\nfind_all(htmlTag,class_='className') //查詢標籤為htmlTag且class為className的所有元素\nfind_all(htmlTag,className) //查詢標籤為htmlTag且class為className的所有元素\n\n若使用find_all()查詢，可使用foreach迴圈歷遍所有查找到的元素\n\nfor content in soup.find_all('li'):\n    print(content.string)\n\n\n\n使用.string方法取得元素的內容\n\nsoup = BeautifulSoup('<h1 id=\"thisish1\">content</h1>', 'html5lib')\nprint(soup.h1)\n\n\n\n><h1 id=\"thisish1\">content</h1>\n\n\n\nsoup = BeautifulSoup('<h1 id=\"thisish1\">content</h1>', 'html5lib')\nprint(soup.h1.string)\n\n\n\n>content\n\n\n\n使用get('href')方法取得元素的href屬性\n\nsoup = BeautifulSoup('<h1 href=\"katsuobushi.com\">content</h1>', 'html5lib')\nprint(soup.h1.get('href'))\n\n\n\n>katsuobushi.com\n\n\n\n\n輸出為檔案\n\n\n\n輸出為csv檔案\n\n需載入os及csv模組以使用open及writer方法\n\nimport os\nimport csv\n\n\n\n使用w模式開啟檔案，w模式為打開一個文件只用於寫入，若文件已存在則打开文件，並從頭開始編輯，原有内容會被刪除。若文件不存在，則創建新文件。\n\nfile = open(filepath,'w',newline='',encoding='utf-8-sig')\n\n\n\n使用csv.writer()創建一個writer\n\ncsvWriter = csv.writer(file)\n\n\n\nwriterow()方法可將一列資料寫入到檔案中\n\ncsvWriter.writerow(row)\n\n\n\n寫入完畢後須關閉檔案，釋放資源\n\nfile.close()\n\n","feature_image":"__GHOST_URL__/content/images/2020/01/python-logo.jpg","featured":0,"type":"post","status":"published","locale":null,"visibility":"public","email_recipient_filter":"none","created_at":"2020-01-03 00:32:34","created_by":"1","updated_at":"2020-10-27 18:29:23","updated_by":null,"published_at":"2020-01-03 16:48:36","published_by":"1","custom_excerpt":"使用python抓取網站或網頁資料是再方便不過的了，常見的抓取方法包含抓取網站回應的JSON檔，或是直接抓取網頁內容並進行分析，以下紀錄兩種方法該如何實作。","codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null,"newsletter_id":null},{"id":"635a812457207246b927a80c","uuid":"25605055-50aa-4de0-b413-9e20651c0d29","title":"記憶體的時脈與頻寬","slug":"clock-and-bandwidth","mobiledoc":"{\"version\":\"0.3.1\",\"atoms\":[],\"cards\":[[\"hr\",{\"_config\":{\"url\":\"http://localhost:2368/\",\"adminUrl\":null,\"apiVersions\":{\"all\":[\"v2\",\"v3\",\"canary\"],\"canary\":{\"admin\":\"canary/admin\",\"content\":\"canary/content\",\"members\":\"canary/members\"},\"v3\":{\"admin\":\"v3/admin\",\"content\":\"v3/content\",\"members\":\"v3/members\"},\"v2\":{\"admin\":\"v2/admin\",\"content\":\"v2/content\"}},\"slugs\":[\"ghost\",\"rss\",\"amp\"],\"redirectCacheMaxAge\":31536000,\"baseApiPath\":\"/ghost/api\",\"defaultApiVersion\":\"v3\",\"defaultApiType\":\"content\",\"staticImageUrlPrefix\":\"content/images\",\"cardTransformers\":[{\"name\":\"card-markdown\",\"type\":\"dom\"},{\"name\":\"code\",\"type\":\"dom\"},{\"name\":\"embed\",\"type\":\"dom\"},{\"name\":\"bookmark\",\"type\":\"dom\"},{\"name\":\"hr\",\"type\":\"dom\"},{\"name\":\"html\",\"type\":\"dom\"},{\"name\":\"image\",\"type\":\"dom\"},{\"name\":\"markdown\",\"type\":\"dom\"},{\"name\":\"gallery\",\"type\":\"dom\"}]},\"_defaultApiPathOptions\":{\"baseApiPath\":\"/ghost/api\",\"version\":\"v3\",\"type\":\"content\",\"apiVersions\":{\"all\":[\"v2\",\"v3\",\"canary\"],\"canary\":{\"admin\":\"canary/admin\",\"content\":\"canary/content\",\"members\":\"canary/members\"},\"v3\":{\"admin\":\"v3/admin\",\"content\":\"v3/content\",\"members\":\"v3/members\"},\"v2\":{\"admin\":\"v2/admin\",\"content\":\"v2/content\"}}}}],[\"hr\",{\"_config\":{\"url\":\"http://localhost:2368/\",\"adminUrl\":null,\"apiVersions\":{\"all\":[\"v2\",\"v3\",\"canary\"],\"canary\":{\"admin\":\"canary/admin\",\"content\":\"canary/content\",\"members\":\"canary/members\"},\"v3\":{\"admin\":\"v3/admin\",\"content\":\"v3/content\",\"members\":\"v3/members\"},\"v2\":{\"admin\":\"v2/admin\",\"content\":\"v2/content\"}},\"slugs\":[\"ghost\",\"rss\",\"amp\"],\"redirectCacheMaxAge\":31536000,\"baseApiPath\":\"/ghost/api\",\"defaultApiVersion\":\"v3\",\"defaultApiType\":\"content\",\"staticImageUrlPrefix\":\"content/images\",\"cardTransformers\":[{\"name\":\"card-markdown\",\"type\":\"dom\"},{\"name\":\"code\",\"type\":\"dom\"},{\"name\":\"embed\",\"type\":\"dom\"},{\"name\":\"bookmark\",\"type\":\"dom\"},{\"name\":\"hr\",\"type\":\"dom\"},{\"name\":\"html\",\"type\":\"dom\"},{\"name\":\"image\",\"type\":\"dom\"},{\"name\":\"markdown\",\"type\":\"dom\"},{\"name\":\"gallery\",\"type\":\"dom\"}]},\"_defaultApiPathOptions\":{\"baseApiPath\":\"/ghost/api\",\"version\":\"v3\",\"type\":\"content\",\"apiVersions\":{\"all\":[\"v2\",\"v3\",\"canary\"],\"canary\":{\"admin\":\"canary/admin\",\"content\":\"canary/content\",\"members\":\"canary/members\"},\"v3\":{\"admin\":\"v3/admin\",\"content\":\"v3/content\",\"members\":\"v3/members\"},\"v2\":{\"admin\":\"v2/admin\",\"content\":\"v2/content\"}}}}]],\"markups\":[],\"sections\":[[1,\"p\",[]],[1,\"h2\",[[0,[],0,\"傳輸寬度\"]]],[1,\"h3\",[[0,[],0,\"每次可傳輸的量\"]]],[1,\"p\",[[0,[],0,\"資料進出記憶體時會有寬度的限制，若頻寬是8bit，則代表一次可進去8個bit，若是64bit，則代表一次可同時傳輸64bit\"]]],[10,0],[1,\"h2\",[[0,[],0,\"時脈\"]]],[1,\"h3\",[[0,[],0,\"一秒可傳輸多少次\"]]],[1,\"p\",[[0,[],0,\"以Hz作為單位，代表一秒可以傳多少次，例如800MHz則為每秒800百萬次\"]]],[10,1],[1,\"h2\",[[0,[],0,\"頻寬\"]]],[1,\"h3\",[[0,[],0,\"一秒可傳輸的量\"]]],[1,\"p\",[[0,[],0,\"一秒可傳輸多少次 * 每次可傳輸的量 = 一秒可傳輸的量，以寬度為64bit及時脈為800HHz的例子來說，記憶體頻寬即為每秒64GB\"]]],[1,\"p\",[[0,[],0,\"64bit * 800MHz = 8Bytes * 800MHz = 6400 MBHz = 6.4GBHz = 每秒64GB\"]]]],\"ghostVersion\":\"3.0\"}","lexical":null,"html":"<p></p><h2 id=\"-\">傳輸寬度</h2><h3 id=\"--1\">每次可傳輸的量</h3><p>資料進出記憶體時會有寬度的限制，若頻寬是8bit，則代表一次可進去8個bit，若是64bit，則代表一次可同時傳輸64bit</p><hr><h2 id=\"--2\">時脈</h2><h3 id=\"--3\">一秒可傳輸多少次</h3><p>以Hz作為單位，代表一秒可以傳多少次，例如800MHz則為每秒800百萬次</p><hr><h2 id=\"--4\">頻寬</h2><h3 id=\"--5\">一秒可傳輸的量</h3><p>一秒可傳輸多少次 * 每次可傳輸的量 = 一秒可傳輸的量，以寬度為64bit及時脈為800HHz的例子來說，記憶體頻寬即為每秒64GB</p><p>64bit * 800MHz = 8Bytes * 800MHz = 6400 MBHz = 6.4GBHz = 每秒64GB</p>","comment_id":"5e1de4127108022a40ad7b02","plaintext":"傳輸寬度\n\n\n每次可傳輸的量\n\n資料進出記憶體時會有寬度的限制，若頻寬是8bit，則代表一次可進去8個bit，若是64bit，則代表一次可同時傳輸64bit\n\n\n時脈\n\n\n一秒可傳輸多少次\n\n以Hz作為單位，代表一秒可以傳多少次，例如800MHz則為每秒800百萬次\n\n\n頻寬\n\n\n一秒可傳輸的量\n\n一秒可傳輸多少次 * 每次可傳輸的量 = 一秒可傳輸的量，以寬度為64bit及時脈為800HHz的例子來說，記憶體頻寬即為每秒64GB\n\n64bit * 800MHz = 8Bytes * 800MHz = 6400 MBHz = 6.4GBHz = 每秒64GB","feature_image":"__GHOST_URL__/content/images/2020/01/binary-code-binary-binary-system-byte-bits-administrator-1458897-pxhere.com.jpg","featured":0,"type":"post","status":"published","locale":null,"visibility":"public","email_recipient_filter":"none","created_at":"2020-01-14 15:53:54","created_by":"1","updated_at":"2020-01-14 16:22:18","updated_by":null,"published_at":"2020-01-14 16:21:42","published_by":"1","custom_excerpt":"記憶體的時脈與頻寬","codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null,"newsletter_id":null},{"id":"635a812457207246b927a80d","uuid":"e428b33a-304c-44f8-b11a-24d600982d06","title":"[GolangPackage]Excel的讀寫與操作","slug":"golang-package-excelize","mobiledoc":"{\"version\":\"0.3.1\",\"atoms\":[[\"soft-return\",\"\",{}],[\"soft-return\",\"\",{}]],\"cards\":[[\"hr\",{\"_config\":{\"url\":\"http://localhost:2368/\",\"adminUrl\":null,\"apiVersions\":{\"all\":[\"v2\",\"v3\",\"canary\"],\"canary\":{\"admin\":\"canary/admin\",\"content\":\"canary/content\",\"members\":\"canary/members\"},\"v3\":{\"admin\":\"v3/admin\",\"content\":\"v3/content\",\"members\":\"v3/members\"},\"v2\":{\"admin\":\"v2/admin\",\"content\":\"v2/content\"}},\"slugs\":[\"ghost\",\"rss\",\"amp\"],\"redirectCacheMaxAge\":31536000,\"baseApiPath\":\"/ghost/api\",\"defaultApiVersion\":\"v3\",\"defaultApiType\":\"content\",\"staticImageUrlPrefix\":\"content/images\",\"cardTransformers\":[{\"name\":\"card-markdown\",\"type\":\"dom\"},{\"name\":\"code\",\"type\":\"dom\"},{\"name\":\"embed\",\"type\":\"dom\"},{\"name\":\"bookmark\",\"type\":\"dom\"},{\"name\":\"hr\",\"type\":\"dom\"},{\"name\":\"html\",\"type\":\"dom\"},{\"name\":\"image\",\"type\":\"dom\"},{\"name\":\"markdown\",\"type\":\"dom\"},{\"name\":\"gallery\",\"type\":\"dom\"}]},\"_defaultApiPathOptions\":{\"baseApiPath\":\"/ghost/api\",\"version\":\"v3\",\"type\":\"content\",\"apiVersions\":{\"all\":[\"v2\",\"v3\",\"canary\"],\"canary\":{\"admin\":\"canary/admin\",\"content\":\"canary/content\",\"members\":\"canary/members\"},\"v3\":{\"admin\":\"v3/admin\",\"content\":\"v3/content\",\"members\":\"v3/members\"},\"v2\":{\"admin\":\"v2/admin\",\"content\":\"v2/content\"}}}}],[\"markdown\",{\"markdown\":\"    go get github.com/Luxurioust/excelize\"}],[\"hr\",{\"_config\":{\"url\":\"http://localhost:2368/\",\"adminUrl\":null,\"apiVersions\":{\"all\":[\"v2\",\"v3\",\"canary\"],\"canary\":{\"admin\":\"canary/admin\",\"content\":\"canary/content\",\"members\":\"canary/members\"},\"v3\":{\"admin\":\"v3/admin\",\"content\":\"v3/content\",\"members\":\"v3/members\"},\"v2\":{\"admin\":\"v2/admin\",\"content\":\"v2/content\"}},\"slugs\":[\"ghost\",\"rss\",\"amp\"],\"redirectCacheMaxAge\":31536000,\"baseApiPath\":\"/ghost/api\",\"defaultApiVersion\":\"v3\",\"defaultApiType\":\"content\",\"staticImageUrlPrefix\":\"content/images\",\"cardTransformers\":[{\"name\":\"card-markdown\",\"type\":\"dom\"},{\"name\":\"code\",\"type\":\"dom\"},{\"name\":\"embed\",\"type\":\"dom\"},{\"name\":\"bookmark\",\"type\":\"dom\"},{\"name\":\"hr\",\"type\":\"dom\"},{\"name\":\"html\",\"type\":\"dom\"},{\"name\":\"image\",\"type\":\"dom\"},{\"name\":\"markdown\",\"type\":\"dom\"},{\"name\":\"gallery\",\"type\":\"dom\"}]},\"_defaultApiPathOptions\":{\"baseApiPath\":\"/ghost/api\",\"version\":\"v3\",\"type\":\"content\",\"apiVersions\":{\"all\":[\"v2\",\"v3\",\"canary\"],\"canary\":{\"admin\":\"canary/admin\",\"content\":\"canary/content\",\"members\":\"canary/members\"},\"v3\":{\"admin\":\"v3/admin\",\"content\":\"v3/content\",\"members\":\"v3/members\"},\"v2\":{\"admin\":\"v2/admin\",\"content\":\"v2/content\"}}}}],[\"markdown\",{\"markdown\":\"    xlsx := excelize.NewFile()\"}],[\"markdown\",{\"markdown\":\"    inputFilePath := \\\"D:\\\\Project\\\"\\n    xlsx, err := excelize.OpenFile(inputFilePath)\\n\\tif err != nil {\\n\\t\\tfmt.Println(\\\"\\\\rERROR:\\\", err)\\n\\t}\"}],[\"markdown\",{\"markdown\":\"    sheetName := \\\"Sheet1\\\"//指定要讀取的工作表名稱\\n    xlsxRows, err = xlsx.GetRows(sheetName)\\n\\tif err != nil {\\n\\t\\tfmt.Println(\\\"\\\\rERROR:\\\",err)\\n\\t}\"}],[\"markdown\",{\"markdown\":\"    oldSheetName := \\\"Sheet1\\\"//指定目前工作表名稱\\n    newSheetName := \\\"工作表\\\"//指定新的工作表名稱\\n    xlsx.SetSheetName(oldSheetName, newSheetName)\"}],[\"markdown\",{\"markdown\":\"| fill     \\t| 使用單一顏色填充                                                                                                                                                                                                                                                                                                   \\t| 使用漸層填充                                                                       \\t|\\n|----------\\t|--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\\t|------------------------------------------------------------------------------------\\t|\\n| typr     \\t| pattern                                                                                                                                                                                                                                                                                                            \\t| gradient                                                                           \\t|\\n| color    \\t| [\\\"#FFFFFF\\\"]                                                                                                                                                                                                                                                                                                        \\t| [\\\"#FFFFFF\\\",\\\"#E0EBF5\\\"]                                                              \\t|\\n| gradient \\t|                                                                                                                                                          X                                                                                                                                                         \\t| 0:橫向<br>1:縱向<br>2:對角線向上<br>3:對角線向下<br>4:由對角線向內<br>5:由中心向外 \\t|\\n| pattern  \\t| 0:無<br>1:實心<br>2:75%灰色<br>3:50%灰色<br>4:25%灰色<br>5:水平條紋<br>6:垂直條紋<br>7:反對角線條紋<br>8:對角線條紋<br>9:對角線斜紋<br>10:粗線對角線斜紋<br>11:細線水平條紋<br>12:細線垂直條紋<br>13:細線反對角線條紋<br>14:細線對角線條紋<br>15:細線水平斜紋<br>16:細線對角線斜紋<br>17:12.5%灰色<br>18:6.25%灰色 \\t|                                          X                                         \\t|\"}],[\"markdown\",{\"markdown\":\"    //單一顏色填充\\n    patternStyle, err := xlsx.NewStyle(`{\\\"fill\\\":{\\\"type\\\":\\\"pattern\\\",\\\"color\\\":[\\\"#EBF0F3\\\"],\\\"pattern\\\":1}}`)\\n    if err != nil {\\n\\t\\tfmt.Println(\\\"\\\\rERROR:\\\",err)\\n\\t}\\n    \\n    //漸層填充\\n    gradientStyle, err := f.NewStyle(`{\\\"fill\\\":{\\\"type\\\":\\\"gradient\\\",\\\"color\\\":[\\\"#FFFFFF\\\",\\\"#E0EBF5\\\"],\\\"shading\\\":1}}`)\\n    if err != nil {\\n        fmt.Println(err)\\n    }\\n    \"}],[\"markdown\",{\"markdown\":\"|  font  \\t|             \\t|\\n|:------:\\t|:-----------:\\t|\\n|  bold  \\t|  true/false \\t|\\n| italic \\t|  true/false \\t|\\n| family \\t|   字型名稱  \\t|\\n|  size  \\t|   字體大小  \\t|\\n|  color \\t| [\\\"#FFFFFF\\\"] \\t|\"}],[\"markdown\",{\"markdown\":\"    fontStyle, err := f.NewStyle(`{\\\"font\\\":{\\\"bold\\\":true,\\\"italic\\\":false,\\\"size\\\":12,\\\"color\\\":\\\"#FFFFFF\\\"}}`)\\n    if err != nil {\\n        fmt.Println(err)\\n    }\"}],[\"markdown\",{\"markdown\":\"    //使用樣式設定column\\n    err := xlsx.SetColStyle(sheetName, \\\"A1\\\", patternStyle)\\n    \\n    //使用樣式設定cell\\n    err := xlsx.SetCellStyle(sheetName, \\\"A1\\\", \\\"A1\\\", gradientStyle)\"}]],\"markups\":[[\"strong\"]],\"sections\":[[1,\"p\",[]],[1,\"p\",[[0,[],0,\"excelize是一個能夠讀寫excel的package，可讀入或寫入指定位置的資料及更改樣式，適用於批量產生excel檔案及資料處理，須注意的是該package只支援.xlsx的檔案格式，尚不支援.xls的檔案處理\"]]],[10,0],[1,\"h2\",[[0,[],0,\"安裝\"]]],[1,\"p\",[[0,[],0,\"使用指令安裝package\"]]],[10,1],[10,2],[1,\"h2\",[[0,[],0,\"檔案操作\"],[1,[],0,0]]],[1,\"h3\",[[0,[],0,\"創建新檔\"]]],[10,3],[1,\"h3\",[[0,[],0,\"開啟舊檔\"]]],[10,4],[1,\"h3\",[[0,[],0,\"讀取內容\"]]],[1,\"p\",[[0,[],0,\"將檔案內的資料讀入一個二維的字串slice\"]]],[10,5],[1,\"h3\",[[0,[],0,\"變更工作表名稱\"]]],[10,6],[1,\"h3\",[[0,[],0,\"設定樣式\"]]],[1,\"p\",[[0,[0],1,\"建立樣式\"],[1,[],0,1],[0,[],0,\"呼叫函式時使用JSON格式填入所需的樣式參數\"]]],[1,\"p\",[[0,[],0,\"fill：設定儲存格網底\"]]],[10,7],[10,8],[1,\"p\",[]],[1,\"p\",[[0,[],0,\"font：設定儲存格字體\"]]],[10,9],[10,10],[1,\"p\",[[0,[0],1,\"使用樣式\"]]],[10,11],[1,\"p\",[]]],\"ghostVersion\":\"3.0\"}","lexical":null,"html":"<p></p><p>excelize是一個能夠讀寫excel的package，可讀入或寫入指定位置的資料及更改樣式，適用於批量產生excel檔案及資料處理，須注意的是該package只支援.xlsx的檔案格式，尚不支援.xls的檔案處理</p><hr><h2 id=\"-\">安裝</h2><p>使用指令安裝package</p><!--kg-card-begin: markdown--><pre><code>go get github.com/Luxurioust/excelize\n</code></pre>\n<!--kg-card-end: markdown--><hr><h2 id=\"--1\">檔案操作<br></h2><h3 id=\"--2\">創建新檔</h3><!--kg-card-begin: markdown--><pre><code>xlsx := excelize.NewFile()\n</code></pre>\n<!--kg-card-end: markdown--><h3 id=\"--3\">開啟舊檔</h3><!--kg-card-begin: markdown--><pre><code>inputFilePath := &quot;D:\\Project&quot;\nxlsx, err := excelize.OpenFile(inputFilePath)\nif err != nil {\n\tfmt.Println(&quot;\\rERROR:&quot;, err)\n}\n</code></pre>\n<!--kg-card-end: markdown--><h3 id=\"--4\">讀取內容</h3><p>將檔案內的資料讀入一個二維的字串slice</p><!--kg-card-begin: markdown--><pre><code>sheetName := &quot;Sheet1&quot;//指定要讀取的工作表名稱\nxlsxRows, err = xlsx.GetRows(sheetName)\nif err != nil {\n\tfmt.Println(&quot;\\rERROR:&quot;,err)\n}\n</code></pre>\n<!--kg-card-end: markdown--><h3 id=\"--5\">變更工作表名稱</h3><!--kg-card-begin: markdown--><pre><code>oldSheetName := &quot;Sheet1&quot;//指定目前工作表名稱\nnewSheetName := &quot;工作表&quot;//指定新的工作表名稱\nxlsx.SetSheetName(oldSheetName, newSheetName)\n</code></pre>\n<!--kg-card-end: markdown--><h3 id=\"--6\">設定樣式</h3><p><strong>建立樣式</strong><br>呼叫函式時使用JSON格式填入所需的樣式參數</p><p>fill：設定儲存格網底</p><!--kg-card-begin: markdown--><table>\n<thead>\n<tr>\n<th>fill</th>\n<th>使用單一顏色填充</th>\n<th>使用漸層填充</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>typr</td>\n<td>pattern</td>\n<td>gradient</td>\n</tr>\n<tr>\n<td>color</td>\n<td>[&quot;#FFFFFF&quot;]</td>\n<td>[&quot;#FFFFFF&quot;,&quot;#E0EBF5&quot;]</td>\n</tr>\n<tr>\n<td>gradient</td>\n<td>X</td>\n<td>0:橫向<br>1:縱向<br>2:對角線向上<br>3:對角線向下<br>4:由對角線向內<br>5:由中心向外</td>\n</tr>\n<tr>\n<td>pattern</td>\n<td>0:無<br>1:實心<br>2:75%灰色<br>3:50%灰色<br>4:25%灰色<br>5:水平條紋<br>6:垂直條紋<br>7:反對角線條紋<br>8:對角線條紋<br>9:對角線斜紋<br>10:粗線對角線斜紋<br>11:細線水平條紋<br>12:細線垂直條紋<br>13:細線反對角線條紋<br>14:細線對角線條紋<br>15:細線水平斜紋<br>16:細線對角線斜紋<br>17:12.5%灰色<br>18:6.25%灰色</td>\n<td>X</td>\n</tr>\n</tbody>\n</table>\n<!--kg-card-end: markdown--><!--kg-card-begin: markdown--><pre><code>//單一顏色填充\npatternStyle, err := xlsx.NewStyle(`{&quot;fill&quot;:{&quot;type&quot;:&quot;pattern&quot;,&quot;color&quot;:[&quot;#EBF0F3&quot;],&quot;pattern&quot;:1}}`)\nif err != nil {\n\tfmt.Println(&quot;\\rERROR:&quot;,err)\n}\n\n//漸層填充\ngradientStyle, err := f.NewStyle(`{&quot;fill&quot;:{&quot;type&quot;:&quot;gradient&quot;,&quot;color&quot;:[&quot;#FFFFFF&quot;,&quot;#E0EBF5&quot;],&quot;shading&quot;:1}}`)\nif err != nil {\n    fmt.Println(err)\n}\n</code></pre>\n<!--kg-card-end: markdown--><p></p><p>font：設定儲存格字體</p><!--kg-card-begin: markdown--><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">font</th>\n<th style=\"text-align:center\"></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">bold</td>\n<td style=\"text-align:center\">true/false</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">italic</td>\n<td style=\"text-align:center\">true/false</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">family</td>\n<td style=\"text-align:center\">字型名稱</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">size</td>\n<td style=\"text-align:center\">字體大小</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">color</td>\n<td style=\"text-align:center\">[&quot;#FFFFFF&quot;]</td>\n</tr>\n</tbody>\n</table>\n<!--kg-card-end: markdown--><!--kg-card-begin: markdown--><pre><code>fontStyle, err := f.NewStyle(`{&quot;font&quot;:{&quot;bold&quot;:true,&quot;italic&quot;:false,&quot;size&quot;:12,&quot;color&quot;:&quot;#FFFFFF&quot;}}`)\nif err != nil {\n    fmt.Println(err)\n}\n</code></pre>\n<!--kg-card-end: markdown--><p><strong>使用樣式</strong></p><!--kg-card-begin: markdown--><pre><code>//使用樣式設定column\nerr := xlsx.SetColStyle(sheetName, &quot;A1&quot;, patternStyle)\n\n//使用樣式設定cell\nerr := xlsx.SetCellStyle(sheetName, &quot;A1&quot;, &quot;A1&quot;, gradientStyle)\n</code></pre>\n<!--kg-card-end: markdown-->","comment_id":"5e2d660c17169e27181beddf","plaintext":"excelize是一個能夠讀寫excel的package，可讀入或寫入指定位置的資料及更改樣式，適用於批量產生excel檔案及資料處理，須注意的是該package只支援.xlsx的檔案格式，尚不支援.xls的檔案處理\n\n\n安裝\n\n使用指令安裝package\n\ngo get github.com/Luxurioust/excelize\n\n\n\n\n檔案操作\n\n\n\n創建新檔\n\nxlsx := excelize.NewFile()\n\n\n\n\n開啟舊檔\n\ninputFilePath := \"D:\\Project\"\nxlsx, err := excelize.OpenFile(inputFilePath)\nif err != nil {\n\tfmt.Println(\"\\rERROR:\", err)\n}\n\n\n\n\n讀取內容\n\n將檔案內的資料讀入一個二維的字串slice\n\nsheetName := \"Sheet1\"//指定要讀取的工作表名稱\nxlsxRows, err = xlsx.GetRows(sheetName)\nif err != nil {\n\tfmt.Println(\"\\rERROR:\",err)\n}\n\n\n\n\n變更工作表名稱\n\noldSheetName := \"Sheet1\"//指定目前工作表名稱\nnewSheetName := \"工作表\"//指定新的工作表名稱\nxlsx.SetSheetName(oldSheetName, newSheetName)\n\n\n\n\n設定樣式\n\n建立樣式\n呼叫函式時使用JSON格式填入所需的樣式參數\n\nfill：設定儲存格網底\n\n\n\n\nfill\n使用單一顏色填充\n使用漸層填充\n\n\n\n\ntypr\npattern\ngradient\n\n\ncolor\n[\"#FFFFFF\"]\n[\"#FFFFFF\",\"#E0EBF5\"]\n\n\ngradient\nX\n0:橫向\n1:縱向\n2:對角線向上\n3:對角線向下\n4:由對角線向內\n5:由中心向外\n\n\npattern\n0:無\n1:實心\n2:75%灰色\n3:50%灰色\n4:25%灰色\n5:水平條紋\n6:垂直條紋\n7:反對角線條紋\n8:對角線條紋\n9:對角線斜紋\n10:粗線對角線斜紋\n11:細線水平條紋\n12:細線垂直條紋\n13:細線反對角線條紋\n14:細線對角線條紋\n15:細線水平斜紋\n16:細線對角線斜紋\n17:12.5%灰色\n18:6.25%灰色\nX\n\n\n\n\n\n//單一顏色填充\npatternStyle, err := xlsx.NewStyle(`{\"fill\":{\"type\":\"pattern\",\"color\":[\"#EBF0F3\"],\"pattern\":1}}`)\nif err != nil {\n\tfmt.Println(\"\\rERROR:\",err)\n}\n\n//漸層填充\ngradientStyle, err := f.NewStyle(`{\"fill\":{\"type\":\"gradient\",\"color\":[\"#FFFFFF\",\"#E0EBF5\"],\"shading\":1}}`)\nif err != nil {\n    fmt.Println(err)\n}\n\n\n\n\n\nfont：設定儲存格字體\n\n\n\n\nfont\n\n\n\n\n\nbold\ntrue/false\n\n\nitalic\ntrue/false\n\n\nfamily\n字型名稱\n\n\nsize\n字體大小\n\n\ncolor\n[\"#FFFFFF\"]\n\n\n\n\n\nfontStyle, err := f.NewStyle(`{\"font\":{\"bold\":true,\"italic\":false,\"size\":12,\"color\":\"#FFFFFF\"}}`)\nif err != nil {\n    fmt.Println(err)\n}\n\n\n\n使用樣式\n\n//使用樣式設定column\nerr := xlsx.SetColStyle(sheetName, \"A1\", patternStyle)\n\n//使用樣式設定cell\nerr := xlsx.SetCellStyle(sheetName, \"A1\", \"A1\", gradientStyle)\n\n","feature_image":"__GHOST_URL__/content/images/2020/01/golang-long-1.jpeg","featured":0,"type":"post","status":"published","locale":null,"visibility":"public","email_recipient_filter":"none","created_at":"2020-01-26 10:12:28","created_by":"1","updated_at":"2020-10-27 18:28:45","updated_by":null,"published_at":"2020-01-26 15:50:18","published_by":"1","custom_excerpt":"excelize是一個能夠讀寫excel的package，可讀入或寫入指定位置的資料及更改樣式，適用於批量產生excel檔案及資料處理","codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null,"newsletter_id":null},{"id":"635a812457207246b927a80e","uuid":"31119615-c772-4dd2-8067-07394d5c7867","title":"[Golang]channel簡介","slug":"golang-channel","mobiledoc":"{\"version\":\"0.3.1\",\"atoms\":[],\"cards\":[[\"hr\",{\"_config\":{\"url\":\"http://localhost:2368/\",\"adminUrl\":null,\"apiVersions\":{\"all\":[\"v2\",\"v3\",\"canary\"],\"canary\":{\"admin\":\"canary/admin\",\"content\":\"canary/content\",\"members\":\"canary/members\"},\"v3\":{\"admin\":\"v3/admin\",\"content\":\"v3/content\",\"members\":\"v3/members\"},\"v2\":{\"admin\":\"v2/admin\",\"content\":\"v2/content\"}},\"slugs\":[\"ghost\",\"rss\",\"amp\"],\"redirectCacheMaxAge\":31536000,\"baseApiPath\":\"/ghost/api\",\"defaultApiVersion\":\"v3\",\"defaultApiType\":\"content\",\"staticImageUrlPrefix\":\"content/images\",\"cardTransformers\":[{\"name\":\"card-markdown\",\"type\":\"dom\"},{\"name\":\"code\",\"type\":\"dom\"},{\"name\":\"embed\",\"type\":\"dom\"},{\"name\":\"bookmark\",\"type\":\"dom\"},{\"name\":\"hr\",\"type\":\"dom\"},{\"name\":\"html\",\"type\":\"dom\"},{\"name\":\"image\",\"type\":\"dom\"},{\"name\":\"markdown\",\"type\":\"dom\"},{\"name\":\"gallery\",\"type\":\"dom\"}]},\"_defaultApiPathOptions\":{\"baseApiPath\":\"/ghost/api\",\"version\":\"v3\",\"type\":\"content\",\"apiVersions\":{\"all\":[\"v2\",\"v3\",\"canary\"],\"canary\":{\"admin\":\"canary/admin\",\"content\":\"canary/content\",\"members\":\"canary/members\"},\"v3\":{\"admin\":\"v3/admin\",\"content\":\"v3/content\",\"members\":\"v3/members\"},\"v2\":{\"admin\":\"v2/admin\",\"content\":\"v2/content\"}}}}],[\"markdown\",{\"markdown\":\"    ch := make(chan int)\\n    ch := make(chan int,5)\"}],[\"markdown\",{\"markdown\":\"    //OK(buffer為0)\\n    ch := make(chan int)\\n    defer close(ch)\\n    go func(){\\n        ch <- 7\\n    }()\\n    \\n    fmt.Println(<-ch)\\n    \\n    //ERROR(buffer為0)\\n    ch := make(chan int)\\n    defer close(ch)\\n    ch <- 7\\n    \\n    fmt.Println(<-ch)\\n    \\n    //OK(buffer為1)\\n    ch := make(chan int,1)\\n    defer close(ch)\\n    ch <- 7\\n    \\n    fmt.Println(<-ch)\"}],[\"hr\",{\"_config\":{\"url\":\"http://localhost:2368/\",\"adminUrl\":null,\"apiVersions\":{\"all\":[\"v2\",\"v3\",\"canary\"],\"canary\":{\"admin\":\"canary/admin\",\"content\":\"canary/content\",\"members\":\"canary/members\"},\"v3\":{\"admin\":\"v3/admin\",\"content\":\"v3/content\",\"members\":\"v3/members\"},\"v2\":{\"admin\":\"v2/admin\",\"content\":\"v2/content\"}},\"slugs\":[\"ghost\",\"rss\",\"amp\"],\"redirectCacheMaxAge\":31536000,\"baseApiPath\":\"/ghost/api\",\"defaultApiVersion\":\"v3\",\"defaultApiType\":\"content\",\"staticImageUrlPrefix\":\"content/images\",\"cardTransformers\":[{\"name\":\"card-markdown\",\"type\":\"dom\"},{\"name\":\"code\",\"type\":\"dom\"},{\"name\":\"embed\",\"type\":\"dom\"},{\"name\":\"bookmark\",\"type\":\"dom\"},{\"name\":\"hr\",\"type\":\"dom\"},{\"name\":\"html\",\"type\":\"dom\"},{\"name\":\"image\",\"type\":\"dom\"},{\"name\":\"markdown\",\"type\":\"dom\"},{\"name\":\"gallery\",\"type\":\"dom\"}]},\"_defaultApiPathOptions\":{\"baseApiPath\":\"/ghost/api\",\"version\":\"v3\",\"type\":\"content\",\"apiVersions\":{\"all\":[\"v2\",\"v3\",\"canary\"],\"canary\":{\"admin\":\"canary/admin\",\"content\":\"canary/content\",\"members\":\"canary/members\"},\"v3\":{\"admin\":\"v3/admin\",\"content\":\"v3/content\",\"members\":\"v3/members\"},\"v2\":{\"admin\":\"v2/admin\",\"content\":\"v2/content\"}}}}],[\"markdown\",{\"markdown\":\"    ch <- 7\"}],[\"markdown\",{\"markdown\":\"    var result int\\n    result <- ch\\n    fmt.Println(result)\"}],[\"hr\",{\"_config\":{\"url\":\"http://localhost:2368/\",\"adminUrl\":null,\"apiVersions\":{\"all\":[\"v2\",\"v3\",\"canary\"],\"canary\":{\"admin\":\"canary/admin\",\"content\":\"canary/content\",\"members\":\"canary/members\"},\"v3\":{\"admin\":\"v3/admin\",\"content\":\"v3/content\",\"members\":\"v3/members\"},\"v2\":{\"admin\":\"v2/admin\",\"content\":\"v2/content\"}},\"slugs\":[\"ghost\",\"rss\",\"amp\"],\"redirectCacheMaxAge\":31536000,\"baseApiPath\":\"/ghost/api\",\"defaultApiVersion\":\"v3\",\"defaultApiType\":\"content\",\"staticImageUrlPrefix\":\"content/images\",\"cardTransformers\":[{\"name\":\"card-markdown\",\"type\":\"dom\"},{\"name\":\"code\",\"type\":\"dom\"},{\"name\":\"embed\",\"type\":\"dom\"},{\"name\":\"bookmark\",\"type\":\"dom\"},{\"name\":\"hr\",\"type\":\"dom\"},{\"name\":\"html\",\"type\":\"dom\"},{\"name\":\"image\",\"type\":\"dom\"},{\"name\":\"markdown\",\"type\":\"dom\"},{\"name\":\"gallery\",\"type\":\"dom\"}]},\"_defaultApiPathOptions\":{\"baseApiPath\":\"/ghost/api\",\"version\":\"v3\",\"type\":\"content\",\"apiVersions\":{\"all\":[\"v2\",\"v3\",\"canary\"],\"canary\":{\"admin\":\"canary/admin\",\"content\":\"canary/content\",\"members\":\"canary/members\"},\"v3\":{\"admin\":\"v3/admin\",\"content\":\"v3/content\",\"members\":\"v3/members\"},\"v2\":{\"admin\":\"v2/admin\",\"content\":\"v2/content\"}}}}],[\"markdown\",{\"markdown\":\"    func foo(ch chan int, val int) {\\n        ch <- val\\n    }\\n\\n    func main() {\\n        ch := make(chan int, 5)\\n        for i := 0; i < 5; i++ {\\n            foo(ch, i)\\n        }\\n        close(ch)\\n\\n        for ele := range ch {\\n            fmt.Println(ele)\\n        }\\n    }\"}],[\"markdown\",{\"markdown\":\"    var wg sync.WaitGroup\\n    \\n    func foo(ch chan int, val int) {\\n        defer wg.Done()\\n        ch <- val\\n    }\\n\\n    func main() {\\n        ch := make(chan int, 5)\\n        for i := 0; i < 5; i++ {\\n            wg.Add(1)\\n            foo(ch, i)\\n        }\\n        wg.Wait()\\n        close(ch)\\n\\n        for ele := range ch {\\n            fmt.Println(ele)\\n        }\\n    }\"}]],\"markups\":[],\"sections\":[[1,\"p\",[]],[1,\"p\",[[0,[],0,\"在golang裡可使用channel在多個執行緒與主程式之間傳送資料，channel可設定不同型態的buffer，並指定緩衝區大小\"]]],[10,0],[1,\"h2\",[[0,[],0,\"建立channel\"]]],[1,\"p\",[[0,[],0,\"使用make配置空間，第一個參數使用chan指定為通道類型，後面接上channel的型態，第二個參數可加可不加，用來宣告buffer的大小\"]]],[10,1],[1,\"p\",[[0,[],0,\"須注意buffer的預設大小為零，若無指定buffer大小則發送方與接收方需同時準備好才可傳值，否則會造成deadlock(死結)\"]]],[10,2],[10,3],[1,\"h2\",[[0,[],0,\"使用channel傳遞數值\"]]],[1,\"h3\",[[0,[],0,\"傳入channel\"]]],[1,\"p\",[[0,[],0,\"將箭頭由數值指向channel，代表將值傳入到channel內\"]]],[10,4],[1,\"h3\",[[0,[],0,\"傳出channel\"]]],[1,\"p\",[[0,[],0,\"將箭頭由channel指向目的地，代表將數值由channel傳出\"]]],[10,5],[10,6],[1,\"h2\",[[0,[],0,\"等待所有goroutine結束\"]]],[1,\"p\",[[0,[],0,\"有時會遇到明明寫好了goroutine，但在最後將要把數據輸出時卻沒出現任何數據，這時就有可能是因為執行緒尚未結束運算而已經先呼叫close(ch)導致無法使用ch，所以輸出時不會得到channel傳來的任何資訊，當然也不會輸出任何東西\"]]],[10,7],[1,\"p\",[[0,[],0,\"我們可以使用WaitGroup控制，等到所有執行緒都結束後再繼續往下執行\"]]],[10,8],[1,\"p\",[]]],\"ghostVersion\":\"3.0\"}","lexical":null,"html":"<p></p><p>在golang裡可使用channel在多個執行緒與主程式之間傳送資料，channel可設定不同型態的buffer，並指定緩衝區大小</p><hr><h2 id=\"-channel\">建立channel</h2><p>使用make配置空間，第一個參數使用chan指定為通道類型，後面接上channel的型態，第二個參數可加可不加，用來宣告buffer的大小</p><!--kg-card-begin: markdown--><pre><code>ch := make(chan int)\nch := make(chan int,5)\n</code></pre>\n<!--kg-card-end: markdown--><p>須注意buffer的預設大小為零，若無指定buffer大小則發送方與接收方需同時準備好才可傳值，否則會造成deadlock(死結)</p><!--kg-card-begin: markdown--><pre><code>//OK(buffer為0)\nch := make(chan int)\ndefer close(ch)\ngo func(){\n    ch &lt;- 7\n}()\n\nfmt.Println(&lt;-ch)\n\n//ERROR(buffer為0)\nch := make(chan int)\ndefer close(ch)\nch &lt;- 7\n\nfmt.Println(&lt;-ch)\n\n//OK(buffer為1)\nch := make(chan int,1)\ndefer close(ch)\nch &lt;- 7\n\nfmt.Println(&lt;-ch)\n</code></pre>\n<!--kg-card-end: markdown--><hr><h2 id=\"-channel-\">使用channel傳遞數值</h2><h3 id=\"-channel-1\">傳入channel</h3><p>將箭頭由數值指向channel，代表將值傳入到channel內</p><!--kg-card-begin: markdown--><pre><code>ch &lt;- 7\n</code></pre>\n<!--kg-card-end: markdown--><h3 id=\"-channel-2\">傳出channel</h3><p>將箭頭由channel指向目的地，代表將數值由channel傳出</p><!--kg-card-begin: markdown--><pre><code>var result int\nresult &lt;- ch\nfmt.Println(result)\n</code></pre>\n<!--kg-card-end: markdown--><hr><h2 id=\"-goroutine-\">等待所有goroutine結束</h2><p>有時會遇到明明寫好了goroutine，但在最後將要把數據輸出時卻沒出現任何數據，這時就有可能是因為執行緒尚未結束運算而已經先呼叫close(ch)導致無法使用ch，所以輸出時不會得到channel傳來的任何資訊，當然也不會輸出任何東西</p><!--kg-card-begin: markdown--><pre><code>func foo(ch chan int, val int) {\n    ch &lt;- val\n}\n\nfunc main() {\n    ch := make(chan int, 5)\n    for i := 0; i &lt; 5; i++ {\n        foo(ch, i)\n    }\n    close(ch)\n\n    for ele := range ch {\n        fmt.Println(ele)\n    }\n}\n</code></pre>\n<!--kg-card-end: markdown--><p>我們可以使用WaitGroup控制，等到所有執行緒都結束後再繼續往下執行</p><!--kg-card-begin: markdown--><pre><code>var wg sync.WaitGroup\n\nfunc foo(ch chan int, val int) {\n    defer wg.Done()\n    ch &lt;- val\n}\n\nfunc main() {\n    ch := make(chan int, 5)\n    for i := 0; i &lt; 5; i++ {\n        wg.Add(1)\n        foo(ch, i)\n    }\n    wg.Wait()\n    close(ch)\n\n    for ele := range ch {\n        fmt.Println(ele)\n    }\n}\n</code></pre>\n<!--kg-card-end: markdown-->","comment_id":"5e2ee3d2c847230f10934c35","plaintext":"在golang裡可使用channel在多個執行緒與主程式之間傳送資料，channel可設定不同型態的buffer，並指定緩衝區大小\n\n\n建立channel\n\n使用make配置空間，第一個參數使用chan指定為通道類型，後面接上channel的型態，第二個參數可加可不加，用來宣告buffer的大小\n\nch := make(chan int)\nch := make(chan int,5)\n\n\n\n須注意buffer的預設大小為零，若無指定buffer大小則發送方與接收方需同時準備好才可傳值，否則會造成deadlock(死結)\n\n//OK(buffer為0)\nch := make(chan int)\ndefer close(ch)\ngo func(){\n    ch <- 7\n}()\n\nfmt.Println(<-ch)\n\n//ERROR(buffer為0)\nch := make(chan int)\ndefer close(ch)\nch <- 7\n\nfmt.Println(<-ch)\n\n//OK(buffer為1)\nch := make(chan int,1)\ndefer close(ch)\nch <- 7\n\nfmt.Println(<-ch)\n\n\n\n\n使用channel傳遞數值\n\n\n傳入channel\n\n將箭頭由數值指向channel，代表將值傳入到channel內\n\nch <- 7\n\n\n\n\n傳出channel\n\n將箭頭由channel指向目的地，代表將數值由channel傳出\n\nvar result int\nresult <- ch\nfmt.Println(result)\n\n\n\n\n等待所有goroutine結束\n\n有時會遇到明明寫好了goroutine，但在最後將要把數據輸出時卻沒出現任何數據，這時就有可能是因為執行緒尚未結束運算而已經先呼叫close(ch)導致無法使用ch，所以輸出時不會得到channel傳來的任何資訊，當然也不會輸出任何東西\n\nfunc foo(ch chan int, val int) {\n    ch <- val\n}\n\nfunc main() {\n    ch := make(chan int, 5)\n    for i := 0; i < 5; i++ {\n        foo(ch, i)\n    }\n    close(ch)\n\n    for ele := range ch {\n        fmt.Println(ele)\n    }\n}\n\n\n\n我們可以使用WaitGroup控制，等到所有執行緒都結束後再繼續往下執行\n\nvar wg sync.WaitGroup\n\nfunc foo(ch chan int, val int) {\n    defer wg.Done()\n    ch <- val\n}\n\nfunc main() {\n    ch := make(chan int, 5)\n    for i := 0; i < 5; i++ {\n        wg.Add(1)\n        foo(ch, i)\n    }\n    wg.Wait()\n    close(ch)\n\n    for ele := range ch {\n        fmt.Println(ele)\n    }\n}\n\n","feature_image":"__GHOST_URL__/content/images/2020/01/golang-long-2.jpeg","featured":0,"type":"post","status":"published","locale":null,"visibility":"public","email_recipient_filter":"none","created_at":"2020-01-27 13:21:22","created_by":"1","updated_at":"2021-06-14 09:38:33","updated_by":null,"published_at":"2020-01-27 15:43:32","published_by":"1","custom_excerpt":"在golang裡可使用channel在多個執行緒與主程式之間傳送資料，channel可設定不同型態的buffer，並指定緩衝區大小","codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null,"newsletter_id":null},{"id":"635a812457207246b927a80f","uuid":"ce2fd7eb-30dd-4b9b-9b36-1618ea8166b2","title":"[Clover]開啟Clover時顯示錯誤訊息：Cannot install without ensuring the file system is read-write","slug":"clover-package-err","mobiledoc":"{\"version\":\"0.3.1\",\"atoms\":[[\"soft-return\",\"\",{}],[\"soft-return\",\"\",{}],[\"soft-return\",\"\",{}],[\"soft-return\",\"\",{}],[\"soft-return\",\"\",{}],[\"soft-return\",\"\",{}],[\"soft-return\",\"\",{}],[\"soft-return\",\"\",{}],[\"soft-return\",\"\",{}]],\"cards\":[[\"image\",{\"src\":\"__GHOST_URL__/content/images/2020/02/errMsg.png\"}],[\"hr\",{\"_config\":{\"url\":\"http://localhost:2368/\",\"adminUrl\":null,\"apiVersions\":{\"all\":[\"v2\",\"v3\",\"canary\"],\"canary\":{\"admin\":\"canary/admin\",\"content\":\"canary/content\",\"members\":\"canary/members\"},\"v3\":{\"admin\":\"v3/admin\",\"content\":\"v3/content\",\"members\":\"v3/members\"},\"v2\":{\"admin\":\"v2/admin\",\"content\":\"v2/content\"}},\"slugs\":[\"ghost\",\"rss\",\"amp\"],\"redirectCacheMaxAge\":31536000,\"baseApiPath\":\"/ghost/api\",\"defaultApiVersion\":\"v3\",\"defaultApiType\":\"content\",\"staticImageUrlPrefix\":\"content/images\",\"cardTransformers\":[{\"name\":\"card-markdown\",\"type\":\"dom\"},{\"name\":\"code\",\"type\":\"dom\"},{\"name\":\"embed\",\"type\":\"dom\"},{\"name\":\"bookmark\",\"type\":\"dom\"},{\"name\":\"hr\",\"type\":\"dom\"},{\"name\":\"html\",\"type\":\"dom\"},{\"name\":\"image\",\"type\":\"dom\"},{\"name\":\"markdown\",\"type\":\"dom\"},{\"name\":\"gallery\",\"type\":\"dom\"}]},\"_defaultApiPathOptions\":{\"baseApiPath\":\"/ghost/api\",\"version\":\"v3\",\"type\":\"content\",\"apiVersions\":{\"all\":[\"v2\",\"v3\",\"canary\"],\"canary\":{\"admin\":\"canary/admin\",\"content\":\"canary/content\",\"members\":\"canary/members\"},\"v3\":{\"admin\":\"v3/admin\",\"content\":\"v3/content\",\"members\":\"v3/members\"},\"v2\":{\"admin\":\"v2/admin\",\"content\":\"v2/content\"}}}}],[\"hr\",{\"_config\":{\"url\":\"http://localhost:2368/\",\"adminUrl\":null,\"apiVersions\":{\"all\":[\"v2\",\"v3\",\"canary\"],\"canary\":{\"admin\":\"canary/admin\",\"content\":\"canary/content\",\"members\":\"canary/members\"},\"v3\":{\"admin\":\"v3/admin\",\"content\":\"v3/content\",\"members\":\"v3/members\"},\"v2\":{\"admin\":\"v2/admin\",\"content\":\"v2/content\"}},\"slugs\":[\"ghost\",\"rss\",\"amp\"],\"redirectCacheMaxAge\":31536000,\"baseApiPath\":\"/ghost/api\",\"defaultApiVersion\":\"v3\",\"defaultApiType\":\"content\",\"staticImageUrlPrefix\":\"content/images\",\"cardTransformers\":[{\"name\":\"card-markdown\",\"type\":\"dom\"},{\"name\":\"code\",\"type\":\"dom\"},{\"name\":\"embed\",\"type\":\"dom\"},{\"name\":\"bookmark\",\"type\":\"dom\"},{\"name\":\"hr\",\"type\":\"dom\"},{\"name\":\"html\",\"type\":\"dom\"},{\"name\":\"image\",\"type\":\"dom\"},{\"name\":\"markdown\",\"type\":\"dom\"},{\"name\":\"gallery\",\"type\":\"dom\"}]},\"_defaultApiPathOptions\":{\"baseApiPath\":\"/ghost/api\",\"version\":\"v3\",\"type\":\"content\",\"apiVersions\":{\"all\":[\"v2\",\"v3\",\"canary\"],\"canary\":{\"admin\":\"canary/admin\",\"content\":\"canary/content\",\"members\":\"canary/members\"},\"v3\":{\"admin\":\"v3/admin\",\"content\":\"v3/content\",\"members\":\"v3/members\"},\"v2\":{\"admin\":\"v2/admin\",\"content\":\"v2/content\"}}}}],[\"hr\",{\"_config\":{\"url\":\"http://localhost:2368/\",\"adminUrl\":null,\"apiVersions\":{\"all\":[\"v2\",\"v3\",\"canary\"],\"canary\":{\"admin\":\"canary/admin\",\"content\":\"canary/content\",\"members\":\"canary/members\"},\"v3\":{\"admin\":\"v3/admin\",\"content\":\"v3/content\",\"members\":\"v3/members\"},\"v2\":{\"admin\":\"v2/admin\",\"content\":\"v2/content\"}},\"slugs\":[\"ghost\",\"rss\",\"amp\"],\"redirectCacheMaxAge\":31536000,\"baseApiPath\":\"/ghost/api\",\"defaultApiVersion\":\"v3\",\"defaultApiType\":\"content\",\"staticImageUrlPrefix\":\"content/images\",\"cardTransformers\":[{\"name\":\"card-markdown\",\"type\":\"dom\"},{\"name\":\"code\",\"type\":\"dom\"},{\"name\":\"embed\",\"type\":\"dom\"},{\"name\":\"bookmark\",\"type\":\"dom\"},{\"name\":\"hr\",\"type\":\"dom\"},{\"name\":\"html\",\"type\":\"dom\"},{\"name\":\"image\",\"type\":\"dom\"},{\"name\":\"markdown\",\"type\":\"dom\"},{\"name\":\"gallery\",\"type\":\"dom\"}]},\"_defaultApiPathOptions\":{\"baseApiPath\":\"/ghost/api\",\"version\":\"v3\",\"type\":\"content\",\"apiVersions\":{\"all\":[\"v2\",\"v3\",\"canary\"],\"canary\":{\"admin\":\"canary/admin\",\"content\":\"canary/content\",\"members\":\"canary/members\"},\"v3\":{\"admin\":\"v3/admin\",\"content\":\"v3/content\",\"members\":\"v3/members\"},\"v2\":{\"admin\":\"v2/admin\",\"content\":\"v2/content\"}}}}],[\"embed\",{\"url\":\"https://www.reddit.com/r/hackintosh/comments/d9pbhy/clover_cannot_install_wo_ensuring_file_system_is/\",\"html\":\"\\n    <blockquote class=\\\"reddit-card\\\" >\\n      <a href=\\\"https://www.reddit.com/r/hackintosh/comments/d9pbhy/clover_cannot_install_wo_ensuring_file_system_is/?ref_source=embed&amp;ref=share\\\">Clover - Cannot Install w/o Ensuring File System is Read/Write</a> from\\n      <a href=\\\"https://www.reddit.com/r/hackintosh/\\\">hackintosh</a>\\n    </blockquote>\\n    <script async src=\\\"https://embed.redditmedia.com/widgets/platform.js\\\" charset=\\\"UTF-8\\\"></script>\\n\",\"type\":\"rich\"}]],\"markups\":[],\"sections\":[[10,0],[1,\"p\",[]],[1,\"h2\",[[0,[],0,\"版本\"]]],[1,\"p\",[[0,[],0,\"OS：macOs Catalina  Version 10.15.3\"],[1,[],0,0],[0,[],0,\"Clover：Clover_v2.5k_r5104\"]]],[10,1],[1,\"h2\",[[0,[],0,\"問題\"]]],[1,\"p\",[[0,[],0,\"在開啟Clover時會跳出\\\"Cannot install without ensuring the file system is read-write\\\"錯誤訊息\"]]],[10,2],[1,\"h2\",[[0,[],0,\"解決方法及步驟\"]]],[1,\"p\",[[0,[],0,\"1.Click the Apple symbol in the Menu bar.\"],[1,[],0,1],[0,[],0,\"2.Click Restart…\"],[1,[],0,2],[0,[],0,\"3.Hold down Command-R to reboot into Recovery Mode.\"],[1,[],0,3],[0,[],0,\"4.Click Utilities.\"],[1,[],0,4],[0,[],0,\"5.Select Terminal.\"],[1,[],0,5],[0,[],0,\"6.Type csrutil disable.\"],[1,[],0,6],[0,[],0,\"7.Press Return or Enter on your keyboard.\"],[1,[],0,7],[0,[],0,\"8.Click the Apple symbol in the Menu bar.\"],[1,[],0,8],[0,[],0,\"9.Click Restart…\"]]],[10,3],[1,\"h2\",[[0,[],0,\"參考資料\"]]],[10,4],[1,\"p\",[]]],\"ghostVersion\":\"3.0\"}","lexical":null,"html":"<figure class=\"kg-card kg-image-card\"><img src=\"__GHOST_URL__/content/images/2020/02/errMsg.png\" class=\"kg-image\" alt loading=\"lazy\"></figure><p></p><h2 id=\"-\">版本</h2><p>OS：macOs Catalina  Version 10.15.3<br>Clover：Clover_v2.5k_r5104</p><hr><h2 id=\"--1\">問題</h2><p>在開啟Clover時會跳出\"Cannot install without ensuring the file system is read-write\"錯誤訊息</p><hr><h2 id=\"--2\">解決方法及步驟</h2><p>1.Click the Apple symbol in the Menu bar.<br>2.Click Restart…<br>3.Hold down Command-R to reboot into Recovery Mode.<br>4.Click Utilities.<br>5.Select Terminal.<br>6.Type csrutil disable.<br>7.Press Return or Enter on your keyboard.<br>8.Click the Apple symbol in the Menu bar.<br>9.Click Restart…</p><hr><h2 id=\"--3\">參考資料</h2><figure class=\"kg-card kg-embed-card\">\n    <blockquote class=\"reddit-card\" >\n      <a href=\"https://www.reddit.com/r/hackintosh/comments/d9pbhy/clover_cannot_install_wo_ensuring_file_system_is/?ref_source=embed&amp;ref=share\">Clover - Cannot Install w/o Ensuring File System is Read/Write</a> from\n      <a href=\"https://www.reddit.com/r/hackintosh/\">hackintosh</a>\n    </blockquote>\n    <script async src=\"https://embed.redditmedia.com/widgets/platform.js\" charset=\"UTF-8\"></script>\n</figure>","comment_id":"5e512e2257c9b119c4cb7261","plaintext":"版本\n\nOS：macOs Catalina  Version 10.15.3\nClover：Clover_v2.5k_r5104\n\n\n問題\n\n在開啟Clover時會跳出\"Cannot install without ensuring the file system is read-write\"錯誤訊息\n\n\n解決方法及步驟\n\n1.Click the Apple symbol in the Menu bar.\n2.Click Restart…\n3.Hold down Command-R to reboot into Recovery Mode.\n4.Click Utilities.\n5.Select Terminal.\n6.Type csrutil disable.\n7.Press Return or Enter on your keyboard.\n8.Click the Apple symbol in the Menu bar.\n9.Click Restart…\n\n\n參考資料\n\n\n\nClover - Cannot Install w/o Ensuring File System is Read/Write from\nhackintosh\n\n\n","feature_image":"__GHOST_URL__/content/images/2020/02/clover-1.png","featured":0,"type":"post","status":"published","locale":null,"visibility":"public","email_recipient_filter":"none","created_at":"2020-02-22 13:35:30","created_by":"1","updated_at":"2020-10-27 18:38:56","updated_by":null,"published_at":"2020-02-22 14:11:49","published_by":"1","custom_excerpt":"在開啟Clover時會跳出\"Cannot install without ensuring the file system is read-write\"錯誤訊息","codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null,"newsletter_id":null},{"id":"635a812457207246b927a810","uuid":"2636df63-6441-40a4-8b26-caa00d712caa","title":"[C++]陣列與指標的位址","slug":"cpp-array-pointer-address","mobiledoc":"{\"version\":\"0.3.1\",\"atoms\":[],\"cards\":[[\"markdown\",{\"markdown\":\"    #include <iostream>\\n\\n    int main()\\n    {\\n        int arr[10] = { 0 };\\n\\n        std::cout << \\\"arr\\\\t\\\" << arr << std::endl;\\n        std::cout << \\\"&arr[0]\\\\t\\\" << &arr[0] << std::endl;\\n        std::cout << \\\"&arr\\\\t\\\" << &arr << std::endl;\\n    }\"}],[\"markdown\",{\"markdown\":\"    >arr     006FFC80\\n    >&arr[0] 006FFC80\\n    >&arr    006FFC80\"}],[\"markdown\",{\"markdown\":\"    #include <iostream>\\n\\n    int main()\\n    {\\n        int arr[10] = { 0 };\\n\\n        std::cout << \\\"arr\\\\t\\\" << arr << std::endl;\\n        std::cout << \\\"&arr[0]\\\\t\\\" << &arr[0] << std::endl;\\n        std::cout << \\\"&arr\\\\t\\\" << &arr << std::endl;\\n\\n        int* p = arr;\\n        std::cout << \\\"p\\\\t\\\" << p << std::endl;\\n        std::cout << \\\"&p[0]\\\\t\\\" << &p[0] << std::endl;\\n        std::cout << \\\"&p\\\\t\\\" << &p << std::endl;\\n    }\"}],[\"markdown\",{\"markdown\":\"    >p       006FFC80\\n    >&p[0]   006FFC80\\n    >&p      006FFC74\"}]],\"markups\":[],\"sections\":[[1,\"p\",[[0,[],0,\"首先宣告名稱為arr大小為10的int陣列，接著分別輸出arr、&arr[0]和&arr\"]]],[10,0],[10,1],[1,\"p\",[[0,[],0,\"我們可以看到直接輸出陣列變數時會出現陣列中第一個元素的位址\"]]],[1,\"p\",[[0,[],0,\"輸出&arr[0]也會出現陣列中第一個元素的位址，其中arr[0]代表第零個元素，而將&加在前面則代表取得其位址，也就是arr[0]的位址\"]]],[1,\"p\",[[0,[],0,\"2而&arr代表輸出arr變數位址，其位址就是第零個元素的位址，也就等於arr[0]的位址，所以輸出的結果會與前兩個相同\"]]],[1,\"p\",[]],[1,\"p\",[[0,[],0,\"這時我們宣告一個名稱為p的int指標，將arr的位址指派給它，並分別輸出p、&p[0]和&p\"]]],[10,2],[10,3],[1,\"p\",[[0,[],0,\"這時p指標中儲存的是arr的位址，所以輸出的自然也就和arr的位址相同\"]]],[1,\"p\",[[0,[],0,\"&p[0]指的是p[0]這個元素的位址，因為p指標是指向arr陣列的，所以當存取p[0]時會去尋找arr[0]，而自然其位址也就會等於arr[0]的位址\"]]],[1,\"p\",[[0,[],0,\"比較特別的是&p，&p代表取得p的位址，而因為p是指標，我們是取得p的位址，所以和arr的位址就不會是同一個了\"]]]],\"ghostVersion\":\"3.0\"}","lexical":null,"html":"<p>首先宣告名稱為arr大小為10的int陣列，接著分別輸出arr、&amp;arr[0]和&amp;arr</p><!--kg-card-begin: markdown--><pre><code>#include &lt;iostream&gt;\n\nint main()\n{\n    int arr[10] = { 0 };\n\n    std::cout &lt;&lt; &quot;arr\\t&quot; &lt;&lt; arr &lt;&lt; std::endl;\n    std::cout &lt;&lt; &quot;&amp;arr[0]\\t&quot; &lt;&lt; &amp;arr[0] &lt;&lt; std::endl;\n    std::cout &lt;&lt; &quot;&amp;arr\\t&quot; &lt;&lt; &amp;arr &lt;&lt; std::endl;\n}\n</code></pre>\n<!--kg-card-end: markdown--><!--kg-card-begin: markdown--><pre><code>&gt;arr     006FFC80\n&gt;&amp;arr[0] 006FFC80\n&gt;&amp;arr    006FFC80\n</code></pre>\n<!--kg-card-end: markdown--><p>我們可以看到直接輸出陣列變數時會出現陣列中第一個元素的位址</p><p>輸出&amp;arr[0]也會出現陣列中第一個元素的位址，其中arr[0]代表第零個元素，而將&amp;加在前面則代表取得其位址，也就是arr[0]的位址</p><p>2而&amp;arr代表輸出arr變數位址，其位址就是第零個元素的位址，也就等於arr[0]的位址，所以輸出的結果會與前兩個相同</p><p></p><p>這時我們宣告一個名稱為p的int指標，將arr的位址指派給它，並分別輸出p、&amp;p[0]和&amp;p</p><!--kg-card-begin: markdown--><pre><code>#include &lt;iostream&gt;\n\nint main()\n{\n    int arr[10] = { 0 };\n\n    std::cout &lt;&lt; &quot;arr\\t&quot; &lt;&lt; arr &lt;&lt; std::endl;\n    std::cout &lt;&lt; &quot;&amp;arr[0]\\t&quot; &lt;&lt; &amp;arr[0] &lt;&lt; std::endl;\n    std::cout &lt;&lt; &quot;&amp;arr\\t&quot; &lt;&lt; &amp;arr &lt;&lt; std::endl;\n\n    int* p = arr;\n    std::cout &lt;&lt; &quot;p\\t&quot; &lt;&lt; p &lt;&lt; std::endl;\n    std::cout &lt;&lt; &quot;&amp;p[0]\\t&quot; &lt;&lt; &amp;p[0] &lt;&lt; std::endl;\n    std::cout &lt;&lt; &quot;&amp;p\\t&quot; &lt;&lt; &amp;p &lt;&lt; std::endl;\n}\n</code></pre>\n<!--kg-card-end: markdown--><!--kg-card-begin: markdown--><pre><code>&gt;p       006FFC80\n&gt;&amp;p[0]   006FFC80\n&gt;&amp;p      006FFC74\n</code></pre>\n<!--kg-card-end: markdown--><p>這時p指標中儲存的是arr的位址，所以輸出的自然也就和arr的位址相同</p><p>&amp;p[0]指的是p[0]這個元素的位址，因為p指標是指向arr陣列的，所以當存取p[0]時會去尋找arr[0]，而自然其位址也就會等於arr[0]的位址</p><p>比較特別的是&amp;p，&amp;p代表取得p的位址，而因為p是指標，我們是取得p的位址，所以和arr的位址就不會是同一個了</p>","comment_id":"5e71c4046286de0ce0c06f09","plaintext":"首先宣告名稱為arr大小為10的int陣列，接著分別輸出arr、&arr[0]和&arr\n\n#include <iostream>\n\nint main()\n{\n    int arr[10] = { 0 };\n\n    std::cout << \"arr\\t\" << arr << std::endl;\n    std::cout << \"&arr[0]\\t\" << &arr[0] << std::endl;\n    std::cout << \"&arr\\t\" << &arr << std::endl;\n}\n\n\n\n>arr     006FFC80\n>&arr[0] 006FFC80\n>&arr    006FFC80\n\n\n\n我們可以看到直接輸出陣列變數時會出現陣列中第一個元素的位址\n\n輸出&arr[0]也會出現陣列中第一個元素的位址，其中arr[0]代表第零個元素，而將&加在前面則代表取得其位址，也就是arr[0]的位址\n\n2而&arr代表輸出arr變數位址，其位址就是第零個元素的位址，也就等於arr[0]的位址，所以輸出的結果會與前兩個相同\n\n\n\n這時我們宣告一個名稱為p的int指標，將arr的位址指派給它，並分別輸出p、&p[0]和&p\n\n#include <iostream>\n\nint main()\n{\n    int arr[10] = { 0 };\n\n    std::cout << \"arr\\t\" << arr << std::endl;\n    std::cout << \"&arr[0]\\t\" << &arr[0] << std::endl;\n    std::cout << \"&arr\\t\" << &arr << std::endl;\n\n    int* p = arr;\n    std::cout << \"p\\t\" << p << std::endl;\n    std::cout << \"&p[0]\\t\" << &p[0] << std::endl;\n    std::cout << \"&p\\t\" << &p << std::endl;\n}\n\n\n\n>p       006FFC80\n>&p[0]   006FFC80\n>&p      006FFC74\n\n\n\n這時p指標中儲存的是arr的位址，所以輸出的自然也就和arr的位址相同\n\n&p[0]指的是p[0]這個元素的位址，因為p指標是指向arr陣列的，所以當存取p[0]時會去尋找arr[0]，而自然其位址也就會等於arr[0]的位址\n\n比較特別的是&p，&p代表取得p的位址，而因為p是指標，我們是取得p的位址，所以和arr的位址就不會是同一個了","feature_image":"__GHOST_URL__/content/images/2020/03/C--.jpg","featured":0,"type":"post","status":"published","locale":null,"visibility":"public","email_recipient_filter":"none","created_at":"2020-03-18 06:47:32","created_by":"1","updated_at":"2020-10-27 18:27:47","updated_by":null,"published_at":"2020-03-18 07:43:05","published_by":"1","custom_excerpt":"C++陣列與指標的位址","codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null,"newsletter_id":null},{"id":"635a812457207246b927a811","uuid":"c05edb98-dc0c-4ab0-be0e-9ebcd4441e6b","title":"[GolangPackage]指定golang執行檔檔案屬性","slug":"golang-package-goversioninfo","mobiledoc":"{\"version\":\"0.3.1\",\"atoms\":[[\"soft-return\",\"\",{}],[\"soft-return\",\"\",{}],[\"soft-return\",\"\",{}]],\"cards\":[[\"hr\",{\"_config\":{\"url\":\"http://localhost:2368/\",\"adminUrl\":null,\"apiVersions\":{\"all\":[\"v2\",\"v3\",\"canary\"],\"canary\":{\"admin\":\"canary/admin\",\"content\":\"canary/content\",\"members\":\"canary/members\"},\"v3\":{\"admin\":\"v3/admin\",\"content\":\"v3/content\",\"members\":\"v3/members\"},\"v2\":{\"admin\":\"v2/admin\",\"content\":\"v2/content\"}},\"slugs\":[\"ghost\",\"rss\",\"amp\"],\"redirectCacheMaxAge\":31536000,\"baseApiPath\":\"/ghost/api\",\"defaultApiVersion\":\"v3\",\"defaultApiType\":\"content\",\"staticImageUrlPrefix\":\"content/images\",\"cardTransformers\":[{\"name\":\"card-markdown\",\"type\":\"dom\"},{\"name\":\"code\",\"type\":\"dom\"},{\"name\":\"embed\",\"type\":\"dom\"},{\"name\":\"bookmark\",\"type\":\"dom\"},{\"name\":\"hr\",\"type\":\"dom\"},{\"name\":\"html\",\"type\":\"dom\"},{\"name\":\"image\",\"type\":\"dom\"},{\"name\":\"markdown\",\"type\":\"dom\"},{\"name\":\"gallery\",\"type\":\"dom\"}]},\"_defaultApiPathOptions\":{\"baseApiPath\":\"/ghost/api\",\"version\":\"v3\",\"type\":\"content\",\"apiVersions\":{\"all\":[\"v2\",\"v3\",\"canary\"],\"canary\":{\"admin\":\"canary/admin\",\"content\":\"canary/content\",\"members\":\"canary/members\"},\"v3\":{\"admin\":\"v3/admin\",\"content\":\"v3/content\",\"members\":\"v3/members\"},\"v2\":{\"admin\":\"v2/admin\",\"content\":\"v2/content\"}}}}],[\"markdown\",{\"markdown\":\"    go get github.com/josephspurrier/goversioninfo/cmd/goversioninfo\"}],[\"markdown\",{\"markdown\":\"    go build -o bin/goversioninfo.exe github.com/josephspurrier/goversioninfo/cmd/goversioninfo\"}],[\"hr\",{\"_config\":{\"url\":\"http://localhost:2368/\",\"adminUrl\":null,\"apiVersions\":{\"all\":[\"v2\",\"v3\",\"canary\"],\"canary\":{\"admin\":\"canary/admin\",\"content\":\"canary/content\",\"members\":\"canary/members\"},\"v3\":{\"admin\":\"v3/admin\",\"content\":\"v3/content\",\"members\":\"v3/members\"},\"v2\":{\"admin\":\"v2/admin\",\"content\":\"v2/content\"}},\"slugs\":[\"ghost\",\"rss\",\"amp\"],\"redirectCacheMaxAge\":31536000,\"baseApiPath\":\"/ghost/api\",\"defaultApiVersion\":\"v3\",\"defaultApiType\":\"content\",\"staticImageUrlPrefix\":\"content/images\",\"cardTransformers\":[{\"name\":\"card-markdown\",\"type\":\"dom\"},{\"name\":\"code\",\"type\":\"dom\"},{\"name\":\"embed\",\"type\":\"dom\"},{\"name\":\"bookmark\",\"type\":\"dom\"},{\"name\":\"hr\",\"type\":\"dom\"},{\"name\":\"html\",\"type\":\"dom\"},{\"name\":\"image\",\"type\":\"dom\"},{\"name\":\"markdown\",\"type\":\"dom\"},{\"name\":\"gallery\",\"type\":\"dom\"}]},\"_defaultApiPathOptions\":{\"baseApiPath\":\"/ghost/api\",\"version\":\"v3\",\"type\":\"content\",\"apiVersions\":{\"all\":[\"v2\",\"v3\",\"canary\"],\"canary\":{\"admin\":\"canary/admin\",\"content\":\"canary/content\",\"members\":\"canary/members\"},\"v3\":{\"admin\":\"v3/admin\",\"content\":\"v3/content\",\"members\":\"v3/members\"},\"v2\":{\"admin\":\"v2/admin\",\"content\":\"v2/content\"}}}}],[\"markdown\",{\"markdown\":\"    //go:generate goversioninfo\\n\\n    package main\\n\\n    import \\\"fmt\\\"\\n\\n    func main() {\\n        fmt.Println(\\\"Hello world\\\")\\n    }\\n\"}],[\"image\",{\"src\":\"__GHOST_URL__/content/images/2020/05/---2020-05-22-012503.png\"}],[\"markdown\",{\"markdown\":\"    {\\n        \\\"FixedFileInfo\\\": {\\n            \\\"FileVersion\\\": {\\n                \\\"Major\\\": 1,\\n                \\\"Minor\\\": 0,\\n                \\\"Patch\\\": 0,\\n                \\\"Build\\\": 0\\n            },\\n            \\\"ProductVersion\\\": {\\n                \\\"Major\\\": 1,\\n                \\\"Minor\\\": 0,\\n                \\\"Patch\\\": 0,\\n                \\\"Build\\\": 0\\n            },\\n            \\\"FileFlagsMask\\\": \\\"3f\\\",\\n            \\\"FileFlags \\\": \\\"00\\\",\\n            \\\"FileOS\\\": \\\"040004\\\",\\n            \\\"FileType\\\": \\\"01\\\",\\n            \\\"FileSubType\\\": \\\"00\\\"\\n        },\\n        \\\"StringFileInfo\\\": {\\n            \\\"Comments\\\": \\\"Test file.\\\",\\n            \\\"CompanyName\\\": \\\"josephspurrier\\\",\\n            \\\"FileDescription\\\": \\\"This is a hello world file.\\\",\\n            \\\"FileVersion\\\": \\\"v1.0.0.0\\\",\\n            \\\"InternalName\\\": \\\"goversioninfo.exe\\\",\\n            \\\"LegalCopyright\\\": \\\"Copyright (c) 2019 Joseph Spurrier\\\",\\n            \\\"LegalTrademarks\\\": \\\"\\\",\\n            \\\"OriginalFilename\\\": \\\"main.go\\\",\\n            \\\"PrivateBuild\\\": \\\"\\\",\\n            \\\"ProductName\\\": \\\"goversioninfo\\\",\\n            \\\"ProductVersion\\\": \\\"v1.0.0.0\\\",\\n            \\\"SpecialBuild\\\": \\\"\\\"\\n        },\\n        \\\"VarFileInfo\\\": {\\n            \\\"Translation\\\": {\\n                \\\"LangID\\\": \\\"0409\\\",\\n                \\\"CharsetID\\\": \\\"04B0\\\"\\n            }\\n        },\\n        \\\"IconPath\\\": \\\"resource/icon.ico\\\",\\n        \\\"ManifestPath\\\": \\\"resource/goversioninfo.exe.manifest\\\"\\n    }\"}],[\"markdown\",{\"markdown\":\"    go generate\\n    go generate your\\\\package\\\\route\"}],[\"image\",{\"src\":\"__GHOST_URL__/content/images/2020/05/---2020-05-22-013035.png\"}],[\"markdown\",{\"markdown\":\"    go build\\n    go build -o output\\\\route your\\\\package\\\\route\"}],[\"image\",{\"src\":\"__GHOST_URL__/content/images/2020/05/---2020-05-22-013343.png\"}]],\"markups\":[],\"sections\":[[1,\"p\",[[0,[],0,\"GoVersionInfo package可在生成執行檔時指定執行檔縮圖及檔案屬性，檔案描述、檔案類型、版本等參數皆可指定\"]]],[10,0],[1,\"h2\",[[0,[],0,\"安裝\"],[1,[],0,0]]],[1,\"h3\",[[0,[],0,\"使用指令安裝package\"]]],[10,1],[1,\"h3\",[[0,[],0,\"產生可執行檔\"]]],[1,\"p\",[[0,[],0,\"-0 bin/goversioninfo.exe代表要將產生出來的可執行檔放在bin目錄裡，並將檔名命名為goversioninfo.exe\"],[1,[],0,1],[0,[],0,\"空一格後面接github.com/josephspurrier/goversioninfo/cmd/goversioninfo代表要以這個package為目標產生可執行檔\"]]],[10,2],[10,3],[1,\"h2\",[[0,[],0,\"設定\"],[1,[],0,2]]],[1,\"h3\",[[0,[],0,\"設定go generate註釋\"]]],[1,\"p\",[[0,[],0,\"將//go:generate goversioninfo加入到程式碼的最頂端，往後在執行go generate命令時才能夠被搜尋到\"]]],[10,4],[1,\"h3\",[[0,[],0,\"設定versioninfo.json檔案\"]]],[1,\"p\",[[0,[],0,\"在github.com\\\\josephspurrier\\\\goversioninfo\\\\testdata\\\\resource內有一個檔名為versioninfo的json檔，將其複製並放置於要產生執行檔的程式碼的目錄中\"]]],[1,\"p\",[[0,[],0,\"resource資料夾內有icon和goversioninfo.exe.manifest兩個檔案，等等在設定versioninfo時會用到\"]]],[10,5],[1,\"h3\",[[0,[],0,\"指定versioninfo.json檔案參數\"]]],[1,\"p\",[[0,[],0,\"將IconPath和ManifestPath的路徑指定為可執行檔圖示的路徑和Manifest檔案的路徑\"]]],[10,6],[1,\"h3\",[[0,[],0,\"產生syso檔\"]]],[1,\"p\",[[0,[],0,\"輸入go generate指令產生resource.syso檔案，若不在同個目錄內可指定package路徑，例如主程式在D:\\\\Project\\\\Go\\\\src\\\\goinfotest，若當前位置在目錄內直接下go generate即可，若不在目錄內則要輸入go generate+從src目錄後開始算的package路徑(go generate goinfotest)產生syso檔\"]]],[10,7],[10,8],[1,\"h3\",[[0,[],0,\"產生可執行檔\"]]],[1,\"p\",[[0,[],0,\"使用go build產生可執行檔，亦可使用\\\"go build -o 目的路徑與檔名 +package路徑\\\"產生可執行檔\"]]],[10,9],[10,10],[1,\"p\",[]]],\"ghostVersion\":\"3.0\"}","lexical":null,"html":"<p>GoVersionInfo package可在生成執行檔時指定執行檔縮圖及檔案屬性，檔案描述、檔案類型、版本等參數皆可指定</p><hr><h2 id=\"-\">安裝<br></h2><h3 id=\"-package\">使用指令安裝package</h3><!--kg-card-begin: markdown--><pre><code>go get github.com/josephspurrier/goversioninfo/cmd/goversioninfo\n</code></pre>\n<!--kg-card-end: markdown--><h3 id=\"--1\">產生可執行檔</h3><p>-0 bin/goversioninfo.exe代表要將產生出來的可執行檔放在bin目錄裡，並將檔名命名為goversioninfo.exe<br>空一格後面接github.com/josephspurrier/goversioninfo/cmd/goversioninfo代表要以這個package為目標產生可執行檔</p><!--kg-card-begin: markdown--><pre><code>go build -o bin/goversioninfo.exe github.com/josephspurrier/goversioninfo/cmd/goversioninfo\n</code></pre>\n<!--kg-card-end: markdown--><hr><h2 id=\"--2\">設定<br></h2><h3 id=\"-go-generate-\">設定go generate註釋</h3><p>將//go:generate goversioninfo加入到程式碼的最頂端，往後在執行go generate命令時才能夠被搜尋到</p><!--kg-card-begin: markdown--><pre><code>//go:generate goversioninfo\n\npackage main\n\nimport &quot;fmt&quot;\n\nfunc main() {\n    fmt.Println(&quot;Hello world&quot;)\n}\n</code></pre>\n<!--kg-card-end: markdown--><h3 id=\"-versioninfo-json-\">設定versioninfo.json檔案</h3><p>在github.com\\josephspurrier\\goversioninfo\\testdata\\resource內有一個檔名為versioninfo的json檔，將其複製並放置於要產生執行檔的程式碼的目錄中</p><p>resource資料夾內有icon和goversioninfo.exe.manifest兩個檔案，等等在設定versioninfo時會用到</p><figure class=\"kg-card kg-image-card\"><img src=\"__GHOST_URL__/content/images/2020/05/---2020-05-22-012503.png\" class=\"kg-image\" alt loading=\"lazy\"></figure><h3 id=\"-versioninfo-json--1\">指定versioninfo.json檔案參數</h3><p>將IconPath和ManifestPath的路徑指定為可執行檔圖示的路徑和Manifest檔案的路徑</p><!--kg-card-begin: markdown--><pre><code>{\n    &quot;FixedFileInfo&quot;: {\n        &quot;FileVersion&quot;: {\n            &quot;Major&quot;: 1,\n            &quot;Minor&quot;: 0,\n            &quot;Patch&quot;: 0,\n            &quot;Build&quot;: 0\n        },\n        &quot;ProductVersion&quot;: {\n            &quot;Major&quot;: 1,\n            &quot;Minor&quot;: 0,\n            &quot;Patch&quot;: 0,\n            &quot;Build&quot;: 0\n        },\n        &quot;FileFlagsMask&quot;: &quot;3f&quot;,\n        &quot;FileFlags &quot;: &quot;00&quot;,\n        &quot;FileOS&quot;: &quot;040004&quot;,\n        &quot;FileType&quot;: &quot;01&quot;,\n        &quot;FileSubType&quot;: &quot;00&quot;\n    },\n    &quot;StringFileInfo&quot;: {\n        &quot;Comments&quot;: &quot;Test file.&quot;,\n        &quot;CompanyName&quot;: &quot;josephspurrier&quot;,\n        &quot;FileDescription&quot;: &quot;This is a hello world file.&quot;,\n        &quot;FileVersion&quot;: &quot;v1.0.0.0&quot;,\n        &quot;InternalName&quot;: &quot;goversioninfo.exe&quot;,\n        &quot;LegalCopyright&quot;: &quot;Copyright (c) 2019 Joseph Spurrier&quot;,\n        &quot;LegalTrademarks&quot;: &quot;&quot;,\n        &quot;OriginalFilename&quot;: &quot;main.go&quot;,\n        &quot;PrivateBuild&quot;: &quot;&quot;,\n        &quot;ProductName&quot;: &quot;goversioninfo&quot;,\n        &quot;ProductVersion&quot;: &quot;v1.0.0.0&quot;,\n        &quot;SpecialBuild&quot;: &quot;&quot;\n    },\n    &quot;VarFileInfo&quot;: {\n        &quot;Translation&quot;: {\n            &quot;LangID&quot;: &quot;0409&quot;,\n            &quot;CharsetID&quot;: &quot;04B0&quot;\n        }\n    },\n    &quot;IconPath&quot;: &quot;resource/icon.ico&quot;,\n    &quot;ManifestPath&quot;: &quot;resource/goversioninfo.exe.manifest&quot;\n}\n</code></pre>\n<!--kg-card-end: markdown--><h3 id=\"-syso-\">產生syso檔</h3><p>輸入go generate指令產生resource.syso檔案，若不在同個目錄內可指定package路徑，例如主程式在D:\\Project\\Go\\src\\goinfotest，若當前位置在目錄內直接下go generate即可，若不在目錄內則要輸入go generate+從src目錄後開始算的package路徑(go generate goinfotest)產生syso檔</p><!--kg-card-begin: markdown--><pre><code>go generate\ngo generate your\\package\\route\n</code></pre>\n<!--kg-card-end: markdown--><figure class=\"kg-card kg-image-card\"><img src=\"__GHOST_URL__/content/images/2020/05/---2020-05-22-013035.png\" class=\"kg-image\" alt loading=\"lazy\"></figure><h3 id=\"--3\">產生可執行檔</h3><p>使用go build產生可執行檔，亦可使用\"go build -o 目的路徑與檔名 +package路徑\"產生可執行檔</p><!--kg-card-begin: markdown--><pre><code>go build\ngo build -o output\\route your\\package\\route\n</code></pre>\n<!--kg-card-end: markdown--><figure class=\"kg-card kg-image-card\"><img src=\"__GHOST_URL__/content/images/2020/05/---2020-05-22-013343.png\" class=\"kg-image\" alt loading=\"lazy\"></figure>","comment_id":"5ec6a6b6986e6527cc1d24c9","plaintext":"GoVersionInfo package可在生成執行檔時指定執行檔縮圖及檔案屬性，檔案描述、檔案類型、版本等參數皆可指定\n\n\n安裝\n\n\n\n使用指令安裝package\n\ngo get github.com/josephspurrier/goversioninfo/cmd/goversioninfo\n\n\n\n\n產生可執行檔\n\n-0 bin/goversioninfo.exe代表要將產生出來的可執行檔放在bin目錄裡，並將檔名命名為goversioninfo.exe\n空一格後面接github.com/josephspurrier/goversioninfo/cmd/goversioninfo代表要以這個package為目標產生可執行檔\n\ngo build -o bin/goversioninfo.exe github.com/josephspurrier/goversioninfo/cmd/goversioninfo\n\n\n\n\n設定\n\n\n\n設定go generate註釋\n\n將//go:generate goversioninfo加入到程式碼的最頂端，往後在執行go generate命令時才能夠被搜尋到\n\n//go:generate goversioninfo\n\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n    fmt.Println(\"Hello world\")\n}\n\n\n\n\n設定versioninfo.json檔案\n\n在github.com\\josephspurrier\\goversioninfo\\testdata\\resource內有一個檔名為versioninfo的json檔，將其複製並放置於要產生執行檔的程式碼的目錄中\n\nresource資料夾內有icon和goversioninfo.exe.manifest兩個檔案，等等在設定versioninfo時會用到\n\n\n指定versioninfo.json檔案參數\n\n將IconPath和ManifestPath的路徑指定為可執行檔圖示的路徑和Manifest檔案的路徑\n\n{\n    \"FixedFileInfo\": {\n        \"FileVersion\": {\n            \"Major\": 1,\n            \"Minor\": 0,\n            \"Patch\": 0,\n            \"Build\": 0\n        },\n        \"ProductVersion\": {\n            \"Major\": 1,\n            \"Minor\": 0,\n            \"Patch\": 0,\n            \"Build\": 0\n        },\n        \"FileFlagsMask\": \"3f\",\n        \"FileFlags \": \"00\",\n        \"FileOS\": \"040004\",\n        \"FileType\": \"01\",\n        \"FileSubType\": \"00\"\n    },\n    \"StringFileInfo\": {\n        \"Comments\": \"Test file.\",\n        \"CompanyName\": \"josephspurrier\",\n        \"FileDescription\": \"This is a hello world file.\",\n        \"FileVersion\": \"v1.0.0.0\",\n        \"InternalName\": \"goversioninfo.exe\",\n        \"LegalCopyright\": \"Copyright (c) 2019 Joseph Spurrier\",\n        \"LegalTrademarks\": \"\",\n        \"OriginalFilename\": \"main.go\",\n        \"PrivateBuild\": \"\",\n        \"ProductName\": \"goversioninfo\",\n        \"ProductVersion\": \"v1.0.0.0\",\n        \"SpecialBuild\": \"\"\n    },\n    \"VarFileInfo\": {\n        \"Translation\": {\n            \"LangID\": \"0409\",\n            \"CharsetID\": \"04B0\"\n        }\n    },\n    \"IconPath\": \"resource/icon.ico\",\n    \"ManifestPath\": \"resource/goversioninfo.exe.manifest\"\n}\n\n\n\n\n產生syso檔\n\n輸入go generate指令產生resource.syso檔案，若不在同個目錄內可指定package路徑，例如主程式在D:\\Project\\Go\\src\\goinfotest，若當前位置在目錄內直接下go generate即可，若不在目錄內則要輸入go generate+從src目錄後開始算的package路徑(go generate goinfotest)產生syso檔\n\ngo generate\ngo generate your\\package\\route\n\n\n\n\n產生可執行檔\n\n使用go build產生可執行檔，亦可使用\"go build -o 目的路徑與檔名 +package路徑\"產生可執行檔\n\ngo build\ngo build -o output\\route your\\package\\route\n\n","feature_image":"__GHOST_URL__/content/images/2020/05/golang-long.jpeg","featured":0,"type":"post","status":"published","locale":null,"visibility":"public","email_recipient_filter":"none","created_at":"2020-05-21 16:05:10","created_by":"1","updated_at":"2020-10-27 18:27:11","updated_by":null,"published_at":"2020-05-21 17:34:18","published_by":"1","custom_excerpt":"GoVersionInfo package可在生成執行檔時指定執行檔縮圖及檔案屬性，檔案描述、檔案類型、版本等參數皆可指定","codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null,"newsletter_id":null},{"id":"635a812457207246b927a812","uuid":"462ec3bb-7ce2-4e7d-85bf-20ab1d4e9f4c","title":"[Design Pattern]Flyweight Pattern","slug":"design-pattern-flyweight-pattern","mobiledoc":"{\"version\":\"0.3.1\",\"atoms\":[[\"soft-return\",\"\",{}],[\"soft-return\",\"\",{}],[\"soft-return\",\"\",{}],[\"soft-return\",\"\",{}],[\"soft-return\",\"\",{}]],\"cards\":[[\"image\",{\"src\":\"__GHOST_URL__/content/images/2020/05/---2020-05-24-190630.png\"}],[\"hr\",{\"_config\":{\"url\":\"http://localhost:2368/\",\"adminUrl\":null,\"apiVersions\":{\"all\":[\"v2\",\"v3\",\"canary\"],\"canary\":{\"admin\":\"canary/admin\",\"content\":\"canary/content\",\"members\":\"canary/members\"},\"v3\":{\"admin\":\"v3/admin\",\"content\":\"v3/content\",\"members\":\"v3/members\"},\"v2\":{\"admin\":\"v2/admin\",\"content\":\"v2/content\"}},\"slugs\":[\"ghost\",\"rss\",\"amp\"],\"redirectCacheMaxAge\":31536000,\"baseApiPath\":\"/ghost/api\",\"defaultApiVersion\":\"v3\",\"defaultApiType\":\"content\",\"staticImageUrlPrefix\":\"content/images\",\"cardTransformers\":[{\"name\":\"card-markdown\",\"type\":\"dom\"},{\"name\":\"code\",\"type\":\"dom\"},{\"name\":\"embed\",\"type\":\"dom\"},{\"name\":\"bookmark\",\"type\":\"dom\"},{\"name\":\"hr\",\"type\":\"dom\"},{\"name\":\"html\",\"type\":\"dom\"},{\"name\":\"image\",\"type\":\"dom\"},{\"name\":\"markdown\",\"type\":\"dom\"},{\"name\":\"gallery\",\"type\":\"dom\"}]},\"_defaultApiPathOptions\":{\"baseApiPath\":\"/ghost/api\",\"version\":\"v3\",\"type\":\"content\",\"apiVersions\":{\"all\":[\"v2\",\"v3\",\"canary\"],\"canary\":{\"admin\":\"canary/admin\",\"content\":\"canary/content\",\"members\":\"canary/members\"},\"v3\":{\"admin\":\"v3/admin\",\"content\":\"v3/content\",\"members\":\"v3/members\"},\"v2\":{\"admin\":\"v2/admin\",\"content\":\"v2/content\"}}}}]],\"markups\":[],\"sections\":[[1,\"p\",[]],[1,\"h2\",[[0,[],0,\"結構\"]]],[10,0],[1,\"h3\",[[0,[],0,\"Flyweight(負責制定Flyweight介面)\"],[1,[],0,0]]],[1,\"h3\",[[0,[],0,\"ConcreteFlyweight(負責儲存Intrinsic state)\"]]],[1,\"p\",[[0,[],0,\"實際的Flyweight類別\"]]],[1,\"h3\",[[0,[],0,\"UnsharedConcreteFlyweight(不共享的Flyweight子類別)\"],[1,[],0,1]]],[1,\"h3\",[[0,[],0,\"FlyweightFactory(負責建立與儲存Flyweight物件)\"]]],[1,\"p\",[[0,[],0,\"FlyweightFactory會判斷Client要求的物件是否存在\"],[1,[],0,2],[0,[],0,\"若存在則返回給Client\"],[1,[],0,3],[0,[],0,\"若不存在則建立一個Flyweight物件、儲存物件並返回給Client\"]]],[1,\"h3\",[[0,[],0,\"Client(負責使用Flyweight)\"]]],[1,\"p\",[[0,[],0,\"對Extrinsic state進行儲存或運算\"],[1,[],0,4],[0,[],0,\"必須透過FlyweightFactory對ConcreteFlyweight進行存取，以確保Flyweight物件的單一性\"]]],[10,1],[1,\"p\",[[0,[],0,\"The state stored inside a flyweight is called “intrinsic.” The state passed to the flyweight’s methods is called “extrinsic.”\"]]]],\"ghostVersion\":\"3.0\"}","lexical":null,"html":"<p></p><h2 id=\"-\">結構</h2><figure class=\"kg-card kg-image-card\"><img src=\"__GHOST_URL__/content/images/2020/05/---2020-05-24-190630.png\" class=\"kg-image\" alt loading=\"lazy\"></figure><h3 id=\"flyweight-flyweight-\">Flyweight(負責制定Flyweight介面)<br></h3><h3 id=\"concreteflyweight-intrinsic-state-\">ConcreteFlyweight(負責儲存Intrinsic state)</h3><p>實際的Flyweight類別</p><h3 id=\"unsharedconcreteflyweight-flyweight-\">UnsharedConcreteFlyweight(不共享的Flyweight子類別)<br></h3><h3 id=\"flyweightfactory-flyweight-\">FlyweightFactory(負責建立與儲存Flyweight物件)</h3><p>FlyweightFactory會判斷Client要求的物件是否存在<br>若存在則返回給Client<br>若不存在則建立一個Flyweight物件、儲存物件並返回給Client</p><h3 id=\"client-flyweight-\">Client(負責使用Flyweight)</h3><p>對Extrinsic state進行儲存或運算<br>必須透過FlyweightFactory對ConcreteFlyweight進行存取，以確保Flyweight物件的單一性</p><hr><p>The state stored inside a flyweight is called “intrinsic.” The state passed to the flyweight’s methods is called “extrinsic.”</p>","comment_id":"5eca1ef467a22515d40ba7c8","plaintext":"結構\n\n\nFlyweight(負責制定Flyweight介面)\n\n\n\nConcreteFlyweight(負責儲存Intrinsic state)\n\n實際的Flyweight類別\n\n\nUnsharedConcreteFlyweight(不共享的Flyweight子類別)\n\n\n\nFlyweightFactory(負責建立與儲存Flyweight物件)\n\nFlyweightFactory會判斷Client要求的物件是否存在\n若存在則返回給Client\n若不存在則建立一個Flyweight物件、儲存物件並返回給Client\n\n\nClient(負責使用Flyweight)\n\n對Extrinsic state進行儲存或運算\n必須透過FlyweightFactory對ConcreteFlyweight進行存取，以確保Flyweight物件的單一性\n\nThe state stored inside a flyweight is called “intrinsic.” The state passed to the flyweight’s methods is called “extrinsic.”","feature_image":null,"featured":0,"type":"post","status":"draft","locale":null,"visibility":"public","email_recipient_filter":"all","created_at":"2020-05-24 07:15:00","created_by":"1","updated_at":"2020-05-25 10:58:55","updated_by":null,"published_at":null,"published_by":null,"custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null,"newsletter_id":null},{"id":"635a812457207246b927a813","uuid":"eda32301-fa9b-449e-a33b-6ad960e7617c","title":"[Qt]Qt的鍵盤與滑鼠點擊事件","slug":"qt-key-mouse-press-event","mobiledoc":"{\"version\":\"0.3.1\",\"atoms\":[[\"soft-return\",\"\",{}]],\"cards\":[[\"hr\",{\"_config\":{\"url\":\"http://localhost:2368/\",\"adminUrl\":null,\"apiVersions\":{\"all\":[\"v2\",\"v3\",\"canary\"],\"canary\":{\"admin\":\"canary/admin\",\"content\":\"canary/content\",\"members\":\"canary/members\"},\"v3\":{\"admin\":\"v3/admin\",\"content\":\"v3/content\",\"members\":\"v3/members\"},\"v2\":{\"admin\":\"v2/admin\",\"content\":\"v2/content\"}},\"slugs\":[\"ghost\",\"rss\",\"amp\"],\"redirectCacheMaxAge\":31536000,\"baseApiPath\":\"/ghost/api\",\"defaultApiVersion\":\"v3\",\"defaultApiType\":\"content\",\"staticImageUrlPrefix\":\"content/images\",\"cardTransformers\":[{\"name\":\"card-markdown\",\"type\":\"dom\"},{\"name\":\"code\",\"type\":\"dom\"},{\"name\":\"embed\",\"type\":\"dom\"},{\"name\":\"bookmark\",\"type\":\"dom\"},{\"name\":\"hr\",\"type\":\"dom\"},{\"name\":\"html\",\"type\":\"dom\"},{\"name\":\"image\",\"type\":\"dom\"},{\"name\":\"markdown\",\"type\":\"dom\"},{\"name\":\"gallery\",\"type\":\"dom\"}]},\"_defaultApiPathOptions\":{\"baseApiPath\":\"/ghost/api\",\"version\":\"v3\",\"type\":\"content\",\"apiVersions\":{\"all\":[\"v2\",\"v3\",\"canary\"],\"canary\":{\"admin\":\"canary/admin\",\"content\":\"canary/content\",\"members\":\"canary/members\"},\"v3\":{\"admin\":\"v3/admin\",\"content\":\"v3/content\",\"members\":\"v3/members\"},\"v2\":{\"admin\":\"v2/admin\",\"content\":\"v2/content\"}}}}],[\"markdown\",{\"markdown\":\"    #include <QMouseEvent>\"}],[\"markdown\",{\"markdown\":\"    protected:\\n        void mousePressEvent(QMouseEvent * event);\"}],[\"markdown\",{\"markdown\":\"    void MainWindow::mousePressEvent(QMouseEvent * e)\\n    {\\n        //獲取座標\\n        qDebug() <<\\\"(\\\"<< e->x() << \\\",\\\" << e->y()<<\\\")\\\";\\n\\n        if(e->button() == Qt::LeftButton)\\n        {\\n            qDebug() << \\\"左鍵\\\" ;\\n        }\\n        else if(e->button() == Qt::RightButton)\\n        {\\n            qDebug() << \\\"右鍵\\\" ;\\n        }\\n    }\"}],[\"hr\",{\"_config\":{\"url\":\"http://localhost:2368/\",\"adminUrl\":null,\"apiVersions\":{\"all\":[\"v2\",\"v3\",\"canary\"],\"canary\":{\"admin\":\"canary/admin\",\"content\":\"canary/content\",\"members\":\"canary/members\"},\"v3\":{\"admin\":\"v3/admin\",\"content\":\"v3/content\",\"members\":\"v3/members\"},\"v2\":{\"admin\":\"v2/admin\",\"content\":\"v2/content\"}},\"slugs\":[\"ghost\",\"rss\",\"amp\"],\"redirectCacheMaxAge\":31536000,\"baseApiPath\":\"/ghost/api\",\"defaultApiVersion\":\"v3\",\"defaultApiType\":\"content\",\"staticImageUrlPrefix\":\"content/images\",\"cardTransformers\":[{\"name\":\"card-markdown\",\"type\":\"dom\"},{\"name\":\"code\",\"type\":\"dom\"},{\"name\":\"embed\",\"type\":\"dom\"},{\"name\":\"bookmark\",\"type\":\"dom\"},{\"name\":\"hr\",\"type\":\"dom\"},{\"name\":\"html\",\"type\":\"dom\"},{\"name\":\"image\",\"type\":\"dom\"},{\"name\":\"markdown\",\"type\":\"dom\"},{\"name\":\"gallery\",\"type\":\"dom\"}]},\"_defaultApiPathOptions\":{\"baseApiPath\":\"/ghost/api\",\"version\":\"v3\",\"type\":\"content\",\"apiVersions\":{\"all\":[\"v2\",\"v3\",\"canary\"],\"canary\":{\"admin\":\"canary/admin\",\"content\":\"canary/content\",\"members\":\"canary/members\"},\"v3\":{\"admin\":\"v3/admin\",\"content\":\"v3/content\",\"members\":\"v3/members\"},\"v2\":{\"admin\":\"v2/admin\",\"content\":\"v2/content\"}}}}],[\"markdown\",{\"markdown\":\"    protected:\\n        void keyPressEvent(QKeyEvent * event);\"}],[\"markdown\",{\"markdown\":\"    void MainWindow::keyPressEvent(QKeyEvent * event)\\n    {\\n        switch (event->key())\\n        {\\n            case Qt::Key_Alt:{\\n                    qDebug() << \\\"Alt\\\";\\n                break;\\n            }\\n            default:{\\n                    qDebug() << event->key();\\n                break;\\n            }\\n        }\\n    }\"}]],\"markups\":[],\"sections\":[[1,\"p\",[]],[1,\"h2\",[[0,[],0,\"環境\"]]],[1,\"p\",[[0,[],0,\"Qt 5.14.1\"],[1,[],0,0],[0,[],0,\"Qt Creator 4.11.1\"]]],[10,0],[1,\"h2\",[[0,[],0,\"滑鼠點擊事件\"]]],[1,\"p\",[[0,[],0,\"引用QMouseEvent標頭檔\"]]],[10,1],[1,\"p\",[[0,[],0,\"在protected裡定義滑鼠觸發事件\"]]],[10,2],[1,\"p\",[[0,[],0,\"新增具體觸發事件\"]]],[10,3],[1,\"p\",[[0,[],0,\"要使用qDebug()輸出時必須增加#include<QDebug>引用QDebug標頭檔\"]]],[10,4],[1,\"h2\",[[0,[],0,\"鍵盤點擊事件\"]]],[1,\"p\",[[0,[],0,\"在protected裡定義滑鼠觸發事件\"]]],[10,5],[1,\"p\",[[0,[],0,\"新增鍵盤觸發事件\"]]],[10,6],[1,\"p\",[]]],\"ghostVersion\":\"3.0\"}","lexical":null,"html":"<p></p><h2 id=\"-\">環境</h2><p>Qt 5.14.1<br>Qt Creator 4.11.1</p><hr><h2 id=\"--1\">滑鼠點擊事件</h2><p>引用QMouseEvent標頭檔</p><!--kg-card-begin: markdown--><pre><code>#include &lt;QMouseEvent&gt;\n</code></pre>\n<!--kg-card-end: markdown--><p>在protected裡定義滑鼠觸發事件</p><!--kg-card-begin: markdown--><pre><code>protected:\n    void mousePressEvent(QMouseEvent * event);\n</code></pre>\n<!--kg-card-end: markdown--><p>新增具體觸發事件</p><!--kg-card-begin: markdown--><pre><code>void MainWindow::mousePressEvent(QMouseEvent * e)\n{\n    //獲取座標\n    qDebug() &lt;&lt;&quot;(&quot;&lt;&lt; e-&gt;x() &lt;&lt; &quot;,&quot; &lt;&lt; e-&gt;y()&lt;&lt;&quot;)&quot;;\n\n    if(e-&gt;button() == Qt::LeftButton)\n    {\n        qDebug() &lt;&lt; &quot;左鍵&quot; ;\n    }\n    else if(e-&gt;button() == Qt::RightButton)\n    {\n        qDebug() &lt;&lt; &quot;右鍵&quot; ;\n    }\n}\n</code></pre>\n<!--kg-card-end: markdown--><p>要使用qDebug()輸出時必須增加#include&lt;QDebug&gt;引用QDebug標頭檔</p><hr><h2 id=\"--2\">鍵盤點擊事件</h2><p>在protected裡定義滑鼠觸發事件</p><!--kg-card-begin: markdown--><pre><code>protected:\n    void keyPressEvent(QKeyEvent * event);\n</code></pre>\n<!--kg-card-end: markdown--><p>新增鍵盤觸發事件</p><!--kg-card-begin: markdown--><pre><code>void MainWindow::keyPressEvent(QKeyEvent * event)\n{\n    switch (event-&gt;key())\n    {\n        case Qt::Key_Alt:{\n                qDebug() &lt;&lt; &quot;Alt&quot;;\n            break;\n        }\n        default:{\n                qDebug() &lt;&lt; event-&gt;key();\n            break;\n        }\n    }\n}\n</code></pre>\n<!--kg-card-end: markdown-->","comment_id":"5ee33b6118d9a726c4d13dcf","plaintext":"環境\n\nQt 5.14.1\nQt Creator 4.11.1\n\n\n滑鼠點擊事件\n\n引用QMouseEvent標頭檔\n\n#include <QMouseEvent>\n\n\n\n在protected裡定義滑鼠觸發事件\n\nprotected:\n    void mousePressEvent(QMouseEvent * event);\n\n\n\n新增具體觸發事件\n\nvoid MainWindow::mousePressEvent(QMouseEvent * e)\n{\n    //獲取座標\n    qDebug() <<\"(\"<< e->x() << \",\" << e->y()<<\")\";\n\n    if(e->button() == Qt::LeftButton)\n    {\n        qDebug() << \"左鍵\" ;\n    }\n    else if(e->button() == Qt::RightButton)\n    {\n        qDebug() << \"右鍵\" ;\n    }\n}\n\n\n\n要使用qDebug()輸出時必須增加#include<QDebug>引用QDebug標頭檔\n\n\n鍵盤點擊事件\n\n在protected裡定義滑鼠觸發事件\n\nprotected:\n    void keyPressEvent(QKeyEvent * event);\n\n\n\n新增鍵盤觸發事件\n\nvoid MainWindow::keyPressEvent(QKeyEvent * event)\n{\n    switch (event->key())\n    {\n        case Qt::Key_Alt:{\n                qDebug() << \"Alt\";\n            break;\n        }\n        default:{\n                qDebug() << event->key();\n            break;\n        }\n    }\n}\n\n","feature_image":"__GHOST_URL__/content/images/2020/06/DarkCyan.jpg","featured":0,"type":"post","status":"published","locale":null,"visibility":"public","email_recipient_filter":"none","created_at":"2020-06-12 08:22:57","created_by":"1","updated_at":"2020-10-27 18:33:15","updated_by":null,"published_at":"2020-06-12 14:29:28","published_by":"1","custom_excerpt":"Qt的鍵盤與滑鼠點擊事件","codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null,"newsletter_id":null},{"id":"635a812457207246b927a814","uuid":"b17eb711-469a-4a62-bb82-e6946a3ac950","title":"[GolangPackage] 使用lnx/walk建立圖形化介面","slug":"golang-package-walk","mobiledoc":"{\"version\":\"0.3.1\",\"atoms\":[],\"cards\":[[\"markdown\",{\"markdown\":\"golang 普遍使用CLI作為使用者介面，但因為需要做一個程式給不常使用指令的人使用，所以使用lxn/walk建立圖形化使用者介面，lxn/walk可以滿足視窗的大部分需求，適用於建立一些基本的圖形化介面\\n\\n## 環境\\n- Windows 10 x64\\n- go 1.15\\n- github.com/lxn/walk v0.0.0-20200806153934-8721e9bc9ff7\\n- github.com/akavel/rsrc v0.9.0\\n\\n## 安裝\\n要將程式包裝成可執行檔需要兩個package，分別是lxn/walk和akavel/rsrc\\nlxn/walk用來建立圖形化介面\\nakavel/rsrc用來將資源嵌入可執行檔\\n使用指令安裝lxn/walk和akavel/rsrc\\n```\\ngo get github.com/lxn/walk\\ngo get github.com/akavel/rsrc\\n```\\n\\n## 結構\\n在lxn/walk下包含了declarative sub package、範例檔和各種元件的檔案\\n```\\n－github.com\\n    |－lxn\\n        |－walk\\n            |－declarative\\n            |－examples\\n            |...其他檔案\\n```\\n以examples下的action範例裡的一小段程式碼為例\\n```\\nPushButton{\\n\\tAssignTo: &toggleSpecialModePB,\\n\\tText:     \\\"Enable Special Mode\\\",\\n\\tOnClicked: func() {\\n\\t\\tisSpecialMode.SetSatisfied(!isSpecialMode.Satisfied())\\n\\n\\t\\tif isSpecialMode.Satisfied() {\\n\\t\\t\\ttoggleSpecialModePB.SetText(\\\"Disable Special Mode\\\")\\n\\t\\t} else {\\n\\t\\t\\ttoggleSpecialModePB.SetText(\\\"Enable Special Mode\\\")\\n\\t\\t}\\n\\t},\\n\\tAccessibility: Accessibility{\\n\\t\\tHelp: \\\"Toggles special mode\\\",\\n\\t},\\n},\\n```\\n很好奇PushButton裡面的這些參數到底是哪裡來的對吧\\n讓我們看看declarative目錄下的pushbutton.go檔案  \\n\\n**pushbutton.go**\\n```\\npackage declarative\\n\\nimport (\\n\\t\\\"github.com/lxn/walk\\\"\\n)\\n\\ntype PushButton struct {\\n\\t// Window\\n\\n\\tAccessibility      Accessibility\\n\\tBackground         Brush\\n\\tContextMenuItems   []MenuItem\\n\\tDoubleBuffering    bool\\n\\tEnabled            Property\\n\\tFont               Font\\n\\tMaxSize            Size\\n\\tMinSize            Size\\n\\tName               string\\n\\tOnBoundsChanged    walk.EventHandler\\n\\tOnKeyDown          walk.KeyEventHandler\\n\\tOnKeyPress         walk.KeyEventHandler\\n\\tOnKeyUp            walk.KeyEventHandler\\n\\tOnMouseDown        walk.MouseEventHandler\\n\\tOnMouseMove        walk.MouseEventHandler\\n\\tOnMouseUp          walk.MouseEventHandler\\n\\tOnSizeChanged      walk.EventHandler\\n\\tPersistent         bool\\n\\tRightToLeftReading bool\\n\\tToolTipText        Property\\n\\tVisible            Property\\n\\n\\t// Widget\\n\\n\\tAlignment          Alignment2D\\n\\tAlwaysConsumeSpace bool\\n\\tColumn             int\\n\\tColumnSpan         int\\n\\tGraphicsEffects    []walk.WidgetGraphicsEffect\\n\\tRow                int\\n\\tRowSpan            int\\n\\tStretchFactor      int\\n\\n\\t// Button\\n\\n\\tImage     Property\\n\\tOnClicked walk.EventHandler\\n\\tText      Property\\n\\n\\t// PushButton\\n\\n\\tAssignTo       **walk.PushButton\\n\\tImageAboveText bool\\n}\\n```\\n這邊清楚的定義了哪些元件可以用哪些參數，只要照著結構裡定義的屬性名稱和型別給予對應的數值就可以了\\n\\n## 建置與執行\\n\\n要執行圖形化介面無法直接使用go run執行\\n必須在相同目錄下新增.manifest檔案並使用go build建置產生可執行檔\\n再啟動可執行檔執行\\n我們使用examples下的clipboard作為範例  \\n\\n**clipboard.go**\\n```\\n// Copyright 2013 The Walk Authors. All rights reserved.\\n// Use of this source code is governed by a BSD-style\\n// license that can be found in the LICENSE file.\\n\\npackage main\\n\\nimport (\\n\\t\\\"log\\\"\\n)\\n\\nimport (\\n\\t\\\"github.com/lxn/walk\\\"\\n\\t. \\\"github.com/lxn/walk/declarative\\\"\\n)\\n\\nfunc main() {\\n\\tvar te *walk.TextEdit\\n\\n\\tif _, err := (MainWindow{\\n\\t\\tTitle:   \\\"Walk Clipboard Example\\\",\\n\\t\\tMinSize: Size{300, 200},\\n\\t\\tLayout:  VBox{},\\n\\t\\tChildren: []Widget{\\n\\t\\t\\tPushButton{\\n\\t\\t\\t\\tText: \\\"Copy\\\",\\n\\t\\t\\t\\tOnClicked: func() {\\n\\t\\t\\t\\t\\tif err := walk.Clipboard().SetText(te.Text()); err != nil {\\n\\t\\t\\t\\t\\t\\tlog.Print(\\\"Copy: \\\", err)\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t},\\n\\t\\t\\t},\\n\\t\\t\\tPushButton{\\n\\t\\t\\t\\tText: \\\"Paste\\\",\\n\\t\\t\\t\\tOnClicked: func() {\\n\\t\\t\\t\\t\\tif text, err := walk.Clipboard().Text(); err != nil {\\n\\t\\t\\t\\t\\t\\tlog.Print(\\\"Paste: \\\", err)\\n\\t\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\t\\tte.SetText(text)\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t},\\n\\t\\t\\t},\\n\\t\\t\\tTextEdit{\\n\\t\\t\\t\\tAssignTo: &te,\\n\\t\\t\\t},\\n\\t\\t},\\n\\t}).Run(); err != nil {\\n\\t\\tlog.Fatal(err)\\n\\t}\\n}\\n```\\n**test.manifest**\\n```\\n<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\" standalone=\\\"yes\\\"?>\\n<assembly xmlns=\\\"urn:schemas-microsoft-com:asm.v1\\\" manifestVersion=\\\"1.0\\\">\\n    <assemblyIdentity version=\\\"1.0.0.0\\\" processorArchitecture=\\\"*\\\" name=\\\"SomeFunkyNameHere\\\" type=\\\"win32\\\"/>\\n    <dependency>\\n        <dependentAssembly>\\n            <assemblyIdentity type=\\\"win32\\\" name=\\\"Microsoft.Windows.Common-Controls\\\" version=\\\"6.0.0.0\\\" processorArchitecture=\\\"*\\\" publicKeyToken=\\\"6595b64144ccf1df\\\" language=\\\"*\\\"/>\\n        </dependentAssembly>\\n    </dependency>\\n    <application xmlns=\\\"urn:schemas-microsoft-com:asm.v3\\\">\\n        <windowsSettings>\\n            <dpiAwareness xmlns=\\\"http://schemas.microsoft.com/SMI/2016/WindowsSettings\\\">PerMonitorV2, PerMonitor</dpiAwareness>\\n            <dpiAware xmlns=\\\"http://schemas.microsoft.com/SMI/2005/WindowsSettings\\\">True</dpiAware>\\n        </windowsSettings>\\n    </application>\\n</assembly>\\n```\\n建立一個目錄並在目錄底下放置clipboard.go和test.manifest兩個檔案\\n```\\n－walktest\\n    |－clipboard.go\\n    |－test.manifest\\n```\\n第一次要使用指令產生.syso檔\\n```\\nrsrc -manifest test.manifest -o rsrc.syso\\n```\\n再輸入指令建置可執行檔\\n```\\ngo build\\n```\\n運行可執行檔就會出現圖形化介面了\\n```\\nwalktest.exe\\n```\\n![](assets/1.png)\"}]],\"markups\":[],\"sections\":[[10,0],[1,\"p\",[]]],\"ghostVersion\":\"3.0\"}","lexical":null,"html":"<!--kg-card-begin: markdown--><p>golang 普遍使用CLI作為使用者介面，但因為需要做一個程式給不常使用指令的人使用，所以使用lxn/walk建立圖形化使用者介面，lxn/walk可以滿足視窗的大部分需求，適用於建立一些基本的圖形化介面</p>\n<h2 id=\"\">環境</h2>\n<ul>\n<li>Windows 10 x64</li>\n<li>go 1.15</li>\n<li>github.com/lxn/walk v0.0.0-20200806153934-8721e9bc9ff7</li>\n<li>github.com/akavel/rsrc v0.9.0</li>\n</ul>\n<h2 id=\"\">安裝</h2>\n<p>要將程式包裝成可執行檔需要兩個package，分別是lxn/walk和akavel/rsrc<br>\nlxn/walk用來建立圖形化介面<br>\nakavel/rsrc用來將資源嵌入可執行檔<br>\n使用指令安裝lxn/walk和akavel/rsrc</p>\n<pre><code>go get github.com/lxn/walk\ngo get github.com/akavel/rsrc\n</code></pre>\n<h2 id=\"\">結構</h2>\n<p>在lxn/walk下包含了declarative sub package、範例檔和各種元件的檔案</p>\n<pre><code>－github.com\n    |－lxn\n        |－walk\n            |－declarative\n            |－examples\n            |...其他檔案\n</code></pre>\n<p>以examples下的action範例裡的一小段程式碼為例</p>\n<pre><code>PushButton{\n\tAssignTo: &amp;toggleSpecialModePB,\n\tText:     &quot;Enable Special Mode&quot;,\n\tOnClicked: func() {\n\t\tisSpecialMode.SetSatisfied(!isSpecialMode.Satisfied())\n\n\t\tif isSpecialMode.Satisfied() {\n\t\t\ttoggleSpecialModePB.SetText(&quot;Disable Special Mode&quot;)\n\t\t} else {\n\t\t\ttoggleSpecialModePB.SetText(&quot;Enable Special Mode&quot;)\n\t\t}\n\t},\n\tAccessibility: Accessibility{\n\t\tHelp: &quot;Toggles special mode&quot;,\n\t},\n},\n</code></pre>\n<p>很好奇PushButton裡面的這些參數到底是哪裡來的對吧<br>\n讓我們看看declarative目錄下的pushbutton.go檔案</p>\n<p><strong>pushbutton.go</strong></p>\n<pre><code>package declarative\n\nimport (\n\t&quot;github.com/lxn/walk&quot;\n)\n\ntype PushButton struct {\n\t// Window\n\n\tAccessibility      Accessibility\n\tBackground         Brush\n\tContextMenuItems   []MenuItem\n\tDoubleBuffering    bool\n\tEnabled            Property\n\tFont               Font\n\tMaxSize            Size\n\tMinSize            Size\n\tName               string\n\tOnBoundsChanged    walk.EventHandler\n\tOnKeyDown          walk.KeyEventHandler\n\tOnKeyPress         walk.KeyEventHandler\n\tOnKeyUp            walk.KeyEventHandler\n\tOnMouseDown        walk.MouseEventHandler\n\tOnMouseMove        walk.MouseEventHandler\n\tOnMouseUp          walk.MouseEventHandler\n\tOnSizeChanged      walk.EventHandler\n\tPersistent         bool\n\tRightToLeftReading bool\n\tToolTipText        Property\n\tVisible            Property\n\n\t// Widget\n\n\tAlignment          Alignment2D\n\tAlwaysConsumeSpace bool\n\tColumn             int\n\tColumnSpan         int\n\tGraphicsEffects    []walk.WidgetGraphicsEffect\n\tRow                int\n\tRowSpan            int\n\tStretchFactor      int\n\n\t// Button\n\n\tImage     Property\n\tOnClicked walk.EventHandler\n\tText      Property\n\n\t// PushButton\n\n\tAssignTo       **walk.PushButton\n\tImageAboveText bool\n}\n</code></pre>\n<p>這邊清楚的定義了哪些元件可以用哪些參數，只要照著結構裡定義的屬性名稱和型別給予對應的數值就可以了</p>\n<h2 id=\"\">建置與執行</h2>\n<p>要執行圖形化介面無法直接使用go run執行<br>\n必須在相同目錄下新增.manifest檔案並使用go build建置產生可執行檔<br>\n再啟動可執行檔執行<br>\n我們使用examples下的clipboard作為範例</p>\n<p><strong>clipboard.go</strong></p>\n<pre><code>// Copyright 2013 The Walk Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style\n// license that can be found in the LICENSE file.\n\npackage main\n\nimport (\n\t&quot;log&quot;\n)\n\nimport (\n\t&quot;github.com/lxn/walk&quot;\n\t. &quot;github.com/lxn/walk/declarative&quot;\n)\n\nfunc main() {\n\tvar te *walk.TextEdit\n\n\tif _, err := (MainWindow{\n\t\tTitle:   &quot;Walk Clipboard Example&quot;,\n\t\tMinSize: Size{300, 200},\n\t\tLayout:  VBox{},\n\t\tChildren: []Widget{\n\t\t\tPushButton{\n\t\t\t\tText: &quot;Copy&quot;,\n\t\t\t\tOnClicked: func() {\n\t\t\t\t\tif err := walk.Clipboard().SetText(te.Text()); err != nil {\n\t\t\t\t\t\tlog.Print(&quot;Copy: &quot;, err)\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t},\n\t\t\tPushButton{\n\t\t\t\tText: &quot;Paste&quot;,\n\t\t\t\tOnClicked: func() {\n\t\t\t\t\tif text, err := walk.Clipboard().Text(); err != nil {\n\t\t\t\t\t\tlog.Print(&quot;Paste: &quot;, err)\n\t\t\t\t\t} else {\n\t\t\t\t\t\tte.SetText(text)\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t},\n\t\t\tTextEdit{\n\t\t\t\tAssignTo: &amp;te,\n\t\t\t},\n\t\t},\n\t}).Run(); err != nil {\n\t\tlog.Fatal(err)\n\t}\n}\n</code></pre>\n<p><strong>test.manifest</strong></p>\n<pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;yes&quot;?&gt;\n&lt;assembly xmlns=&quot;urn:schemas-microsoft-com:asm.v1&quot; manifestVersion=&quot;1.0&quot;&gt;\n    &lt;assemblyIdentity version=&quot;1.0.0.0&quot; processorArchitecture=&quot;*&quot; name=&quot;SomeFunkyNameHere&quot; type=&quot;win32&quot;/&gt;\n    &lt;dependency&gt;\n        &lt;dependentAssembly&gt;\n            &lt;assemblyIdentity type=&quot;win32&quot; name=&quot;Microsoft.Windows.Common-Controls&quot; version=&quot;6.0.0.0&quot; processorArchitecture=&quot;*&quot; publicKeyToken=&quot;6595b64144ccf1df&quot; language=&quot;*&quot;/&gt;\n        &lt;/dependentAssembly&gt;\n    &lt;/dependency&gt;\n    &lt;application xmlns=&quot;urn:schemas-microsoft-com:asm.v3&quot;&gt;\n        &lt;windowsSettings&gt;\n            &lt;dpiAwareness xmlns=&quot;http://schemas.microsoft.com/SMI/2016/WindowsSettings&quot;&gt;PerMonitorV2, PerMonitor&lt;/dpiAwareness&gt;\n            &lt;dpiAware xmlns=&quot;http://schemas.microsoft.com/SMI/2005/WindowsSettings&quot;&gt;True&lt;/dpiAware&gt;\n        &lt;/windowsSettings&gt;\n    &lt;/application&gt;\n&lt;/assembly&gt;\n</code></pre>\n<p>建立一個目錄並在目錄底下放置clipboard.go和test.manifest兩個檔案</p>\n<pre><code>－walktest\n    |－clipboard.go\n    |－test.manifest\n</code></pre>\n<p>第一次要使用指令產生.syso檔</p>\n<pre><code>rsrc -manifest test.manifest -o rsrc.syso\n</code></pre>\n<p>再輸入指令建置可執行檔</p>\n<pre><code>go build\n</code></pre>\n<p>運行可執行檔就會出現圖形化介面了</p>\n<pre><code>walktest.exe\n</code></pre>\n<p><img src=\"assets/1.png\" alt=\"\" loading=\"lazy\"></p>\n<!--kg-card-end: markdown-->","comment_id":"5f4809f66c8c391358537596","plaintext":"golang 普遍使用CLI作為使用者介面，但因為需要做一個程式給不常使用指令的人使用，所以使用lxn/walk建立圖形化使用者介面，lxn/walk可以滿足視窗的大部分需求，適用於建立一些基本的圖形化介面\n\n\n\n環境\n\n\n * Windows 10 x64\n * go 1.15\n * github.com/lxn/walk v0.0.0-20200806153934-8721e9bc9ff7\n * github.com/akavel/rsrc v0.9.0\n\n\n\n安裝\n\n\n要將程式包裝成可執行檔需要兩個package，分別是lxn/walk和akavel/rsrc\n\nlxn/walk用來建立圖形化介面\n\nakavel/rsrc用來將資源嵌入可執行檔\n\n使用指令安裝lxn/walk和akavel/rsrc\n\n\ngo get github.com/lxn/walk\ngo get github.com/akavel/rsrc\n\n\n\n\n結構\n\n\n在lxn/walk下包含了declarative sub package、範例檔和各種元件的檔案\n\n\n－github.com\n    |－lxn\n        |－walk\n            |－declarative\n            |－examples\n            |...其他檔案\n\n\n\n以examples下的action範例裡的一小段程式碼為例\n\n\nPushButton{\n\tAssignTo: &toggleSpecialModePB,\n\tText:     \"Enable Special Mode\",\n\tOnClicked: func() {\n\t\tisSpecialMode.SetSatisfied(!isSpecialMode.Satisfied())\n\n\t\tif isSpecialMode.Satisfied() {\n\t\t\ttoggleSpecialModePB.SetText(\"Disable Special Mode\")\n\t\t} else {\n\t\t\ttoggleSpecialModePB.SetText(\"Enable Special Mode\")\n\t\t}\n\t},\n\tAccessibility: Accessibility{\n\t\tHelp: \"Toggles special mode\",\n\t},\n},\n\n\n\n很好奇PushButton裡面的這些參數到底是哪裡來的對吧\n\n讓我們看看declarative目錄下的pushbutton.go檔案\n\n\npushbutton.go\n\n\npackage declarative\n\nimport (\n\t\"github.com/lxn/walk\"\n)\n\ntype PushButton struct {\n\t// Window\n\n\tAccessibility      Accessibility\n\tBackground         Brush\n\tContextMenuItems   []MenuItem\n\tDoubleBuffering    bool\n\tEnabled            Property\n\tFont               Font\n\tMaxSize            Size\n\tMinSize            Size\n\tName               string\n\tOnBoundsChanged    walk.EventHandler\n\tOnKeyDown          walk.KeyEventHandler\n\tOnKeyPress         walk.KeyEventHandler\n\tOnKeyUp            walk.KeyEventHandler\n\tOnMouseDown        walk.MouseEventHandler\n\tOnMouseMove        walk.MouseEventHandler\n\tOnMouseUp          walk.MouseEventHandler\n\tOnSizeChanged      walk.EventHandler\n\tPersistent         bool\n\tRightToLeftReading bool\n\tToolTipText        Property\n\tVisible            Property\n\n\t// Widget\n\n\tAlignment          Alignment2D\n\tAlwaysConsumeSpace bool\n\tColumn             int\n\tColumnSpan         int\n\tGraphicsEffects    []walk.WidgetGraphicsEffect\n\tRow                int\n\tRowSpan            int\n\tStretchFactor      int\n\n\t// Button\n\n\tImage     Property\n\tOnClicked walk.EventHandler\n\tText      Property\n\n\t// PushButton\n\n\tAssignTo       **walk.PushButton\n\tImageAboveText bool\n}\n\n\n\n這邊清楚的定義了哪些元件可以用哪些參數，只要照著結構裡定義的屬性名稱和型別給予對應的數值就可以了\n\n\n\n建置與執行\n\n\n要執行圖形化介面無法直接使用go run執行\n\n必須在相同目錄下新增.manifest檔案並使用go build建置產生可執行檔\n\n再啟動可執行檔執行\n\n我們使用examples下的clipboard作為範例\n\n\nclipboard.go\n\n\n// Copyright 2013 The Walk Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style\n// license that can be found in the LICENSE file.\n\npackage main\n\nimport (\n\t\"log\"\n)\n\nimport (\n\t\"github.com/lxn/walk\"\n\t. \"github.com/lxn/walk/declarative\"\n)\n\nfunc main() {\n\tvar te *walk.TextEdit\n\n\tif _, err := (MainWindow{\n\t\tTitle:   \"Walk Clipboard Example\",\n\t\tMinSize: Size{300, 200},\n\t\tLayout:  VBox{},\n\t\tChildren: []Widget{\n\t\t\tPushButton{\n\t\t\t\tText: \"Copy\",\n\t\t\t\tOnClicked: func() {\n\t\t\t\t\tif err := walk.Clipboard().SetText(te.Text()); err != nil {\n\t\t\t\t\t\tlog.Print(\"Copy: \", err)\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t},\n\t\t\tPushButton{\n\t\t\t\tText: \"Paste\",\n\t\t\t\tOnClicked: func() {\n\t\t\t\t\tif text, err := walk.Clipboard().Text(); err != nil {\n\t\t\t\t\t\tlog.Print(\"Paste: \", err)\n\t\t\t\t\t} else {\n\t\t\t\t\t\tte.SetText(text)\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t},\n\t\t\tTextEdit{\n\t\t\t\tAssignTo: &te,\n\t\t\t},\n\t\t},\n\t}).Run(); err != nil {\n\t\tlog.Fatal(err)\n\t}\n}\n\n\n\ntest.manifest\n\n\n<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<assembly xmlns=\"urn:schemas-microsoft-com:asm.v1\" manifestVersion=\"1.0\">\n    <assemblyIdentity version=\"1.0.0.0\" processorArchitecture=\"*\" name=\"SomeFunkyNameHere\" type=\"win32\"/>\n    <dependency>\n        <dependentAssembly>\n            <assemblyIdentity type=\"win32\" name=\"Microsoft.Windows.Common-Controls\" version=\"6.0.0.0\" processorArchitecture=\"*\" publicKeyToken=\"6595b64144ccf1df\" language=\"*\"/>\n        </dependentAssembly>\n    </dependency>\n    <application xmlns=\"urn:schemas-microsoft-com:asm.v3\">\n        <windowsSettings>\n            <dpiAwareness xmlns=\"http://schemas.microsoft.com/SMI/2016/WindowsSettings\">PerMonitorV2, PerMonitor</dpiAwareness>\n            <dpiAware xmlns=\"http://schemas.microsoft.com/SMI/2005/WindowsSettings\">True</dpiAware>\n        </windowsSettings>\n    </application>\n</assembly>\n\n\n\n建立一個目錄並在目錄底下放置clipboard.go和test.manifest兩個檔案\n\n\n－walktest\n    |－clipboard.go\n    |－test.manifest\n\n\n\n第一次要使用指令產生.syso檔\n\n\nrsrc -manifest test.manifest -o rsrc.syso\n\n\n\n再輸入指令建置可執行檔\n\n\ngo build\n\n\n\n運行可執行檔就會出現圖形化介面了\n\n\nwalktest.exe\n\n\n\n\n","feature_image":"__GHOST_URL__/content/images/2020/08/golang-long.jpeg","featured":0,"type":"post","status":"published","locale":null,"visibility":"public","email_recipient_filter":"none","created_at":"2020-08-27 19:31:02","created_by":"1","updated_at":"2020-09-01 15:57:02","updated_by":null,"published_at":"2020-08-27 19:48:31","published_by":"1","custom_excerpt":"golang 普遍使用CLI作為使用者介面，但因為需要做一個程式給不常使用指令的人使用，所以使用lxn/walk建立圖形化使用者介面，lxn/walk可以滿足視窗的大部分需求，適用於建立一些基本的圖形化介面","codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null,"newsletter_id":null},{"id":"635a812457207246b927a815","uuid":"bb3ddc88-c7ac-4d86-8981-6212e7e081d6","title":"[Golang]使用筆畫排序中文字","slug":"golang-sort-traditionalchinese","mobiledoc":"{\"version\":\"0.3.1\",\"atoms\":[],\"cards\":[[\"markdown\",{\"markdown\":\"有次嘗試要使用筆劃排序中文姓名時，直接使用sort包進行排序，但發現結果並不是照著筆劃排序，查了點資料發現原來和UTF-8、Big5兩種編碼有極大的關係\\n\\n## 環境\\n- Windows 10 x64\\n- go 1.15\\n- golang.org/x/text v0.3.3\\n\\n## UTF-8和Big5的排序\\n### Big5\\n從全字庫查詢到Big5的編碼原則\\n>以國家標準CNS11643及國際標準ISO10646漢字集為字源範圍，並依CNS11643之序編碼。\\n>\\n而CNS11643的字碼編排原則又是如何呢?以下是定義\\n>依**先筆畫後部首**排列順序編碼。 說明： 每一字面均以文字總筆畫數為首序、部首為次序、筆順為末序編訂字碼，使用者只需以書寫之實際筆畫數即可查尋到國標碼。\\n>\\n所以我們可以得知Big5以\\\"**筆畫->部首->筆順**\\\"為排列順序\\n### UTF-8\\n而全字庫裡對於UTF-8的說明如下\\n>在I區的中日韓漢字部份，最當初進行編碼時，因各國漢字型體不盡相同，必須先進行認同(unify)整理工作，SC2/WG2因此邀集有關各國指派專家組成CJK/JRG(中日韓聯合研究工作組，即IRG前身)，進行字集的總整理。CJK/JRG歷經五次會議完成此項艱鉅工作，所整理的「中日韓認同表意文字」(CJK Unified Ideographs)參考了我國75年版CNS 11643之第1、2、14字面(T欄)，大陸的GB 2312、GB 12345、GB 7589、GB 17590、GB 8565(G欄)，日本的JIS X 0208、JIS X 0212(J欄)及南韓的KS C 5601、KSC 5667(K欄)等標準字符集，可說已包含這四地所常用的字。其字序主要是參考康熙字典、大漢和詞典、漢語大詞典及大字源字典，以**先部首後筆劃**的順序排列。\\n>\\n所以我們可以得知UTF-8以\\\"**部首->筆畫**\\\"為排列順序\\n\\n## Golang的預設編碼\\ngolang預設使用UTF-8作為編碼格式，所以若直接使用sort包進行排序得出的結果會是依照先部首後筆畫的順序排序\\n\\n## 轉為Big5排序\\n若想得到以先筆畫後部首的方式排序，其中一個方法是將預設的UTF-8轉為Big5，使用Big5排序過後依照需求再轉換回UTF-8\\n\\n## 程式碼\\n以\\\"**毛隆青,劉雅君,陳嘉鴻,王育如,郭苡良,楊宗穎,李玉全,劉玉合,姚昶民,林欣麟**\\\"十個姓名作為測試資料輸入，結果應為[**毛隆青 王育如 李玉全 林欣麟 姚昶民 郭苡良 陳嘉鴻 楊宗穎 劉玉合 劉雅君**]  \\n\\n此處須注意若筆劃數量相同，則會比對完部首後再比對下一個字，例如:\\n**毛隆青**和**王育如**姓氏都是四劃，但是比對過筆劃後結果是'**毛**'先於'**王**'所以'**毛**'才會排在'**王**'前面  \\n\\n**main.go**\\n```go\\npackage main\\n\\nimport (\\n\\t\\\"fmt\\\"\\n\\t\\\"sort\\\"\\n\\n\\t\\\"golang.org/x/text/encoding/traditionalchinese\\\"\\n\\t\\\"golang.org/x/text/transform\\\"\\n)\\n\\nfunc main() {\\n\\n\\ts := []string{\\\"毛隆青\\\", \\\"劉雅君\\\", \\\"陳嘉鴻\\\", \\\"王育如\\\", \\\"郭苡良\\\", \\\"楊宗穎\\\", \\\"李玉全\\\", \\\"劉玉合\\\", \\\"姚昶民\\\", \\\"林欣麟\\\"}\\n\\n\\ts1 := sortByStroke(s)\\n\\tfmt.Println(s1)\\n}\\n\\nfunc sortByStroke(input []string) (output []string) {\\n\\toutput = make([]string, 0)\\n    \\n\\t//建立Encoder和Decoder\\n\\tutf8ToBig5 := traditionalchinese.Big5.NewEncoder()\\n\\tbig5ToUtf8 := traditionalchinese.Big5.NewDecoder()\\n\\n\\t//將UTF-8轉換為Big5\\n\\tfor index := range input {\\n\\t\\tbig5, _, _ := transform.String(utf8ToBig5, input[index])\\n\\t\\tinput[index] = big5\\n\\t}\\n\\n\\t//使用轉換成Big5的編碼進行排序\\n\\tsort.Strings(input)\\n\\n\\t//將排序過後的Big5碼轉回UTF-8並放入output slice\\n\\tfor _, value := range input {\\n\\t\\tutf8, _, _ := transform.String(big5ToUtf8, value)\\n\\t\\toutput = append(output, utf8)\\n\\t}\\n\\n\\treturn output\\n}\\n```\\n```\\nD:\\\\>go run main\\n[毛隆青 王育如 李玉全 林欣麟 姚昶民 郭苡良 陳嘉鴻 楊宗穎 劉玉合 劉雅君]\\n```\\n\\n## 參考資料\\n[全字庫-中文碼介紹](https://www.cns11643.gov.tw/pageView.jsp?ID=9)\"}]],\"markups\":[],\"sections\":[[10,0],[1,\"p\",[]]],\"ghostVersion\":\"3.0\"}","lexical":null,"html":"<!--kg-card-begin: markdown--><p>有次嘗試要使用筆劃排序中文姓名時，直接使用sort包進行排序，但發現結果並不是照著筆劃排序，查了點資料發現原來和UTF-8、Big5兩種編碼有極大的關係</p>\n<h2 id=\"\">環境</h2>\n<ul>\n<li>Windows 10 x64</li>\n<li>go 1.15</li>\n<li>golang.org/x/text v0.3.3</li>\n</ul>\n<h2 id=\"utf8big5\">UTF-8和Big5的排序</h2>\n<h3 id=\"big5\">Big5</h3>\n<p>從全字庫查詢到Big5的編碼原則</p>\n<blockquote>\n<p>以國家標準CNS11643及國際標準ISO10646漢字集為字源範圍，並依CNS11643之序編碼。</p>\n</blockquote>\n<p>而CNS11643的字碼編排原則又是如何呢?以下是定義</p>\n<blockquote>\n<p>依<strong>先筆畫後部首</strong>排列順序編碼。 說明： 每一字面均以文字總筆畫數為首序、部首為次序、筆順為末序編訂字碼，使用者只需以書寫之實際筆畫數即可查尋到國標碼。</p>\n</blockquote>\n<p>所以我們可以得知Big5以&quot;<strong>筆畫-&gt;部首-&gt;筆順</strong>&quot;為排列順序</p>\n<h3 id=\"utf8\">UTF-8</h3>\n<p>而全字庫裡對於UTF-8的說明如下</p>\n<blockquote>\n<p>在I區的中日韓漢字部份，最當初進行編碼時，因各國漢字型體不盡相同，必須先進行認同(unify)整理工作，SC2/WG2因此邀集有關各國指派專家組成CJK/JRG(中日韓聯合研究工作組，即IRG前身)，進行字集的總整理。CJK/JRG歷經五次會議完成此項艱鉅工作，所整理的「中日韓認同表意文字」(CJK Unified Ideographs)參考了我國75年版CNS 11643之第1、2、14字面(T欄)，大陸的GB 2312、GB 12345、GB 7589、GB 17590、GB 8565(G欄)，日本的JIS X 0208、JIS X 0212(J欄)及南韓的KS C 5601、KSC 5667(K欄)等標準字符集，可說已包含這四地所常用的字。其字序主要是參考康熙字典、大漢和詞典、漢語大詞典及大字源字典，以<strong>先部首後筆劃</strong>的順序排列。</p>\n</blockquote>\n<p>所以我們可以得知UTF-8以&quot;<strong>部首-&gt;筆畫</strong>&quot;為排列順序</p>\n<h2 id=\"golang\">Golang的預設編碼</h2>\n<p>golang預設使用UTF-8作為編碼格式，所以若直接使用sort包進行排序得出的結果會是依照先部首後筆畫的順序排序</p>\n<h2 id=\"big5\">轉為Big5排序</h2>\n<p>若想得到以先筆畫後部首的方式排序，其中一個方法是將預設的UTF-8轉為Big5，使用Big5排序過後依照需求再轉換回UTF-8</p>\n<h2 id=\"\">程式碼</h2>\n<p>以&quot;<strong>毛隆青,劉雅君,陳嘉鴻,王育如,郭苡良,楊宗穎,李玉全,劉玉合,姚昶民,林欣麟</strong>&quot;十個姓名作為測試資料輸入，結果應為[<strong>毛隆青 王育如 李玉全 林欣麟 姚昶民 郭苡良 陳嘉鴻 楊宗穎 劉玉合 劉雅君</strong>]</p>\n<p>此處須注意若筆劃數量相同，則會比對完部首後再比對下一個字，例如:<br>\n<strong>毛隆青</strong>和<strong>王育如</strong>姓氏都是四劃，但是比對過筆劃後結果是'<strong>毛</strong>'先於'<strong>王</strong>'所以'<strong>毛</strong>'才會排在'<strong>王</strong>'前面</p>\n<p><strong>main.go</strong></p>\n<pre><code class=\"language-go\">package main\n\nimport (\n\t&quot;fmt&quot;\n\t&quot;sort&quot;\n\n\t&quot;golang.org/x/text/encoding/traditionalchinese&quot;\n\t&quot;golang.org/x/text/transform&quot;\n)\n\nfunc main() {\n\n\ts := []string{&quot;毛隆青&quot;, &quot;劉雅君&quot;, &quot;陳嘉鴻&quot;, &quot;王育如&quot;, &quot;郭苡良&quot;, &quot;楊宗穎&quot;, &quot;李玉全&quot;, &quot;劉玉合&quot;, &quot;姚昶民&quot;, &quot;林欣麟&quot;}\n\n\ts1 := sortByStroke(s)\n\tfmt.Println(s1)\n}\n\nfunc sortByStroke(input []string) (output []string) {\n\toutput = make([]string, 0)\n    \n\t//建立Encoder和Decoder\n\tutf8ToBig5 := traditionalchinese.Big5.NewEncoder()\n\tbig5ToUtf8 := traditionalchinese.Big5.NewDecoder()\n\n\t//將UTF-8轉換為Big5\n\tfor index := range input {\n\t\tbig5, _, _ := transform.String(utf8ToBig5, input[index])\n\t\tinput[index] = big5\n\t}\n\n\t//使用轉換成Big5的編碼進行排序\n\tsort.Strings(input)\n\n\t//將排序過後的Big5碼轉回UTF-8並放入output slice\n\tfor _, value := range input {\n\t\tutf8, _, _ := transform.String(big5ToUtf8, value)\n\t\toutput = append(output, utf8)\n\t}\n\n\treturn output\n}\n</code></pre>\n<pre><code>D:\\&gt;go run main\n[毛隆青 王育如 李玉全 林欣麟 姚昶民 郭苡良 陳嘉鴻 楊宗穎 劉玉合 劉雅君]\n</code></pre>\n<h2 id=\"\">參考資料</h2>\n<p><a href=\"https://www.cns11643.gov.tw/pageView.jsp?ID=9\">全字庫-中文碼介紹</a></p>\n<!--kg-card-end: markdown-->","comment_id":"5f4e5a4978355806f01eea76","plaintext":"有次嘗試要使用筆劃排序中文姓名時，直接使用sort包進行排序，但發現結果並不是照著筆劃排序，查了點資料發現原來和UTF-8、Big5兩種編碼有極大的關係\n\n\n\n環境\n\n\n * Windows 10 x64\n * go 1.15\n * golang.org/x/text v0.3.3\n\n\n\nUTF-8和Big5的排序\n\n\n\nBig5\n\n\n從全字庫查詢到Big5的編碼原則\n\n\n\n\n\n以國家標準CNS11643及國際標準ISO10646漢字集為字源範圍，並依CNS11643之序編碼。\n\n\n\n而CNS11643的字碼編排原則又是如何呢?以下是定義\n\n\n\n\n\n依先筆畫後部首排列順序編碼。 說明： 每一字面均以文字總筆畫數為首序、部首為次序、筆順為末序編訂字碼，使用者只需以書寫之實際筆畫數即可查尋到國標碼。\n\n\n\n所以我們可以得知Big5以\"筆畫->部首->筆順\"為排列順序\n\n\n\nUTF-8\n\n\n而全字庫裡對於UTF-8的說明如下\n\n\n\n\n\n在I區的中日韓漢字部份，最當初進行編碼時，因各國漢字型體不盡相同，必須先進行認同(unify)整理工作，SC2/WG2因此邀集有關各國指派專家組成CJK/JRG(中日韓聯合研究工作組，即IRG前身)，進行字集的總整理。CJK/JRG歷經五次會議完成此項艱鉅工作，所整理的「中日韓認同表意文字」(CJK Unified Ideographs)參考了我國75年版CNS 11643之第1、2、14字面(T欄)，大陸的GB 2312、GB 12345、GB 7589、GB 17590、GB 8565(G欄)，日本的JIS X 0208、JIS X 0212(J欄)及南韓的KS C 5601、KSC 5667(K欄)等標準字符集，可說已包含這四地所常用的字。其字序主要是參考康熙字典、大漢和詞典、漢語大詞典及大字源字典，以先部首後筆劃的順序排列。\n\n\n\n所以我們可以得知UTF-8以\"部首->筆畫\"為排列順序\n\n\n\nGolang的預設編碼\n\n\ngolang預設使用UTF-8作為編碼格式，所以若直接使用sort包進行排序得出的結果會是依照先部首後筆畫的順序排序\n\n\n\n轉為Big5排序\n\n\n若想得到以先筆畫後部首的方式排序，其中一個方法是將預設的UTF-8轉為Big5，使用Big5排序過後依照需求再轉換回UTF-8\n\n\n\n程式碼\n\n\n以\"毛隆青,劉雅君,陳嘉鴻,王育如,郭苡良,楊宗穎,李玉全,劉玉合,姚昶民,林欣麟\"十個姓名作為測試資料輸入，結果應為[毛隆青 王育如 李玉全 林欣麟 姚昶民 郭苡良 陳嘉鴻 楊宗穎 劉玉合 劉雅君]\n\n\n此處須注意若筆劃數量相同，則會比對完部首後再比對下一個字，例如:\n\n毛隆青和王育如姓氏都是四劃，但是比對過筆劃後結果是'毛'先於'王'所以'毛'才會排在'王'前面\n\n\nmain.go\n\n\npackage main\n\nimport (\n\t\"fmt\"\n\t\"sort\"\n\n\t\"golang.org/x/text/encoding/traditionalchinese\"\n\t\"golang.org/x/text/transform\"\n)\n\nfunc main() {\n\n\ts := []string{\"毛隆青\", \"劉雅君\", \"陳嘉鴻\", \"王育如\", \"郭苡良\", \"楊宗穎\", \"李玉全\", \"劉玉合\", \"姚昶民\", \"林欣麟\"}\n\n\ts1 := sortByStroke(s)\n\tfmt.Println(s1)\n}\n\nfunc sortByStroke(input []string) (output []string) {\n\toutput = make([]string, 0)\n    \n\t//建立Encoder和Decoder\n\tutf8ToBig5 := traditionalchinese.Big5.NewEncoder()\n\tbig5ToUtf8 := traditionalchinese.Big5.NewDecoder()\n\n\t//將UTF-8轉換為Big5\n\tfor index := range input {\n\t\tbig5, _, _ := transform.String(utf8ToBig5, input[index])\n\t\tinput[index] = big5\n\t}\n\n\t//使用轉換成Big5的編碼進行排序\n\tsort.Strings(input)\n\n\t//將排序過後的Big5碼轉回UTF-8並放入output slice\n\tfor _, value := range input {\n\t\tutf8, _, _ := transform.String(big5ToUtf8, value)\n\t\toutput = append(output, utf8)\n\t}\n\n\treturn output\n}\n\n\n\nD:\\>go run main\n[毛隆青 王育如 李玉全 林欣麟 姚昶民 郭苡良 陳嘉鴻 楊宗穎 劉玉合 劉雅君]\n\n\n\n\n參考資料\n\n\n全字庫-中文碼介紹\n","feature_image":"__GHOST_URL__/content/images/2020/09/golang-long.jpeg","featured":0,"type":"post","status":"published","locale":null,"visibility":"public","email_recipient_filter":"none","created_at":"2020-09-01 14:27:21","created_by":"1","updated_at":"2020-09-01 15:55:54","updated_by":null,"published_at":"2020-09-01 14:33:48","published_by":"1","custom_excerpt":"有次嘗試要使用筆劃排序中文姓名時，直接使用sort包進行排序，但發現結果並不是照著筆劃排序，查了點資料發現原來和UTF-8、Big5兩種編碼有極大的關係","codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null,"newsletter_id":null},{"id":"635a812457207246b927a816","uuid":"deb6fde9-4235-452b-9fd4-7aa6fc33faa7","title":"[C#]使用Npgsql連接到PostgreSQL server","slug":"csharp-connect-to-postgresql","mobiledoc":"{\"version\":\"0.3.1\",\"atoms\":[],\"cards\":[[\"markdown\",{\"markdown\":\"## 環境\\n- Windows 10 x64\\n- Visual Studio Community 2019 v16.2.2\\n- Npgsql v4.1.4\\n\\n## 安裝\\n開啟visual studio後點選\\\"**工具**->**NuGet套件管理員**->**管理方案的NuGet套件**\\\"  \\n![1](__GHOST_URL__/content/images/2020/09/1.png)\\n點選Npgsql，勾選右方會執行到此套件的專案，再點選安裝\\n![2](__GHOST_URL__/content/images/2020/09/2.png)\\n按確定進行安裝\\n![3](__GHOST_URL__/content/images/2020/09/3.png)\\n\\n## 建立連線\\n設定好`host` `post` `username` `password` `database`等連線資訊後，使用`NpgsqlConnection`建立一個新連線，再使用Open()方法開啟連線\\n``` csharp\\nclass Program\\n{\\n    \\n    static void Main(string[] args)\\n    {\\n        string host = \\\"localhost\\\";\\n        string port = \\\"5432\\\";\\n        string username = \\\"postgres\\\";\\n        string password = \\\"password\\\";\\n        string database = \\\"postgis\\\";\\n        string connStr = $\\\"Host={host};Port={port};Username={username};Password={password};Database={database};\\\";\\n        using (NpgsqlConnection pgconn = new NpgsqlConnection(connStr))\\n        {\\n            pgconn.Open();\\n        }\\n\\n    }\\n}\\n```\\n\\n## 執行查詢\\n### 方法一：使用NpgsqlDataReader讀取資料\\n執行查詢必須用到先前建立好的連線和即將要執行的查詢式\\n```csharp\\nclass Program\\n{\\n    static void Main(string[] args)\\n    {\\n        ExecuteQuery(\\\"SELECT id,x,y FROM users;\\\");\\n    }\\n    \\n    public static void ExecuteQuery(string sqlstr)\\n    {\\n        using (var pgconn = new NpgsqlConnection(connStr))\\n        {\\n            pgconn.Open();\\n            using (var cmd = new NpgsqlCommand(sqlstr, pgconn))\\n            {\\n                using (var reader = cmd.ExecuteReader())//使用NpgsqlDataReader讀取資料\\n                {\\n                    while (reader.Read())//讀取下一列直到沒有數值\\n                    {\\n                        Console.Write(reader.GetInt32(0));//0代表該列第0行的值，也就是對應到查詢式中的id\\n                        Console.Write(reader.GetDouble(1));//1代表該列第1行的值，也就是對應到查詢式中的x\\n                        Console.WriteLine(reader.GetDouble(2));//2代表該列第2行的值，也就是對應到查詢式中的y\\n                    }\\n                }\\n            }\\n        }\\n    }\\n    private static string host = \\\"localhost\\\";\\n    private static string port = \\\"5432\\\";\\n    private static string username = \\\"postgres\\\";\\n    private static string password = \\\"password\\\";\\n    private static string database = \\\"postgis\\\";\\n    private static string connStr = $\\\"Host={host};Port={port};Username={username};Password={password};Database={database};\\\";\\n}\\n```\\n\\n### 方法二：使用NpgsqlDataAdapter將資料放入DataTable\\n```csharp\\nclass Program\\n{\\n    static void Main(string[] args)\\n    {\\n        DataTable dt = ExecuteQuery(\\\"SELECT id,x,y FROM sptable;\\\");\\n\\n        foreach (DataRow row in dt.Rows)\\n        {\\n            Console.WriteLine(\\\"{0} {1} {2}\\\", row[0], row[1], row[2]);//輸出該行的0,1,2個值，分別為id,x,y的值\\n        }\\n    }\\n    public static DataTable ExecuteQuery(string sqlstr)\\n    {\\n        using (NpgsqlConnection pgconn = new NpgsqlConnection(connStr))\\n        {\\n            pgconn.Open();\\n\\n            DataTable dt = new DataTable();//建立一個DataTable\\n\\n            try\\n            {\\n                using (NpgsqlDataAdapter sqladap = new NpgsqlDataAdapter(sqlstr, pgconn))\\n                {\\n                    sqladap.Fill(dt);//使用NpgsqlDataAdapter將資料放入DataTable中\\n                }\\n                return dt;//返回DataTable\\n            }\\n            catch (Exception ex)\\n            {\\n                Console.WriteLine(ex.ToString());\\n                return dt;\\n            }\\n        }\\n    }\\n    private static string host = \\\"localhost\\\";\\n    private static string port = \\\"5432\\\";\\n    private static string username = \\\"postgres\\\";\\n    private static string password = \\\"password\\\";\\n    private static string database = \\\"postgis\\\";\\n    private static string connStr = $\\\"Host={host};Port={port};Username={username};Password={password};Database={database};\\\";\\n}\\n```\"}]],\"markups\":[],\"sections\":[[10,0],[1,\"p\",[]]],\"ghostVersion\":\"3.0\"}","lexical":null,"html":"<!--kg-card-begin: markdown--><h2 id=\"\">環境</h2>\n<ul>\n<li>Windows 10 x64</li>\n<li>Visual Studio Community 2019 v16.2.2</li>\n<li>Npgsql v4.1.4</li>\n</ul>\n<h2 id=\"\">安裝</h2>\n<p>開啟visual studio後點選&quot;<strong>工具</strong>-&gt;<strong>NuGet套件管理員</strong>-&gt;<strong>管理方案的NuGet套件</strong>&quot;<br>\n<img src=\"__GHOST_URL__/content/images/2020/09/1.png\" alt=\"1\" loading=\"lazy\"><br>\n點選Npgsql，勾選右方會執行到此套件的專案，再點選安裝<br>\n<img src=\"__GHOST_URL__/content/images/2020/09/2.png\" alt=\"2\" loading=\"lazy\"><br>\n按確定進行安裝<br>\n<img src=\"__GHOST_URL__/content/images/2020/09/3.png\" alt=\"3\" loading=\"lazy\"></p>\n<h2 id=\"\">建立連線</h2>\n<p>設定好<code>host</code> <code>post</code> <code>username</code> <code>password</code> <code>database</code>等連線資訊後，使用<code>NpgsqlConnection</code>建立一個新連線，再使用Open()方法開啟連線</p>\n<pre><code class=\"language-csharp\">class Program\n{\n    \n    static void Main(string[] args)\n    {\n        string host = &quot;localhost&quot;;\n        string port = &quot;5432&quot;;\n        string username = &quot;postgres&quot;;\n        string password = &quot;password&quot;;\n        string database = &quot;postgis&quot;;\n        string connStr = $&quot;Host={host};Port={port};Username={username};Password={password};Database={database};&quot;;\n        using (NpgsqlConnection pgconn = new NpgsqlConnection(connStr))\n        {\n            pgconn.Open();\n        }\n\n    }\n}\n</code></pre>\n<h2 id=\"\">執行查詢</h2>\n<h3 id=\"npgsqldatareader\">方法一：使用NpgsqlDataReader讀取資料</h3>\n<p>執行查詢必須用到先前建立好的連線和即將要執行的查詢式</p>\n<pre><code class=\"language-csharp\">class Program\n{\n    static void Main(string[] args)\n    {\n        ExecuteQuery(&quot;SELECT id,x,y FROM users;&quot;);\n    }\n    \n    public static void ExecuteQuery(string sqlstr)\n    {\n        using (var pgconn = new NpgsqlConnection(connStr))\n        {\n            pgconn.Open();\n            using (var cmd = new NpgsqlCommand(sqlstr, pgconn))\n            {\n                using (var reader = cmd.ExecuteReader())//使用NpgsqlDataReader讀取資料\n                {\n                    while (reader.Read())//讀取下一列直到沒有數值\n                    {\n                        Console.Write(reader.GetInt32(0));//0代表該列第0行的值，也就是對應到查詢式中的id\n                        Console.Write(reader.GetDouble(1));//1代表該列第1行的值，也就是對應到查詢式中的x\n                        Console.WriteLine(reader.GetDouble(2));//2代表該列第2行的值，也就是對應到查詢式中的y\n                    }\n                }\n            }\n        }\n    }\n    private static string host = &quot;localhost&quot;;\n    private static string port = &quot;5432&quot;;\n    private static string username = &quot;postgres&quot;;\n    private static string password = &quot;password&quot;;\n    private static string database = &quot;postgis&quot;;\n    private static string connStr = $&quot;Host={host};Port={port};Username={username};Password={password};Database={database};&quot;;\n}\n</code></pre>\n<h3 id=\"npgsqldataadapterdatatable\">方法二：使用NpgsqlDataAdapter將資料放入DataTable</h3>\n<pre><code class=\"language-csharp\">class Program\n{\n    static void Main(string[] args)\n    {\n        DataTable dt = ExecuteQuery(&quot;SELECT id,x,y FROM sptable;&quot;);\n\n        foreach (DataRow row in dt.Rows)\n        {\n            Console.WriteLine(&quot;{0} {1} {2}&quot;, row[0], row[1], row[2]);//輸出該行的0,1,2個值，分別為id,x,y的值\n        }\n    }\n    public static DataTable ExecuteQuery(string sqlstr)\n    {\n        using (NpgsqlConnection pgconn = new NpgsqlConnection(connStr))\n        {\n            pgconn.Open();\n\n            DataTable dt = new DataTable();//建立一個DataTable\n\n            try\n            {\n                using (NpgsqlDataAdapter sqladap = new NpgsqlDataAdapter(sqlstr, pgconn))\n                {\n                    sqladap.Fill(dt);//使用NpgsqlDataAdapter將資料放入DataTable中\n                }\n                return dt;//返回DataTable\n            }\n            catch (Exception ex)\n            {\n                Console.WriteLine(ex.ToString());\n                return dt;\n            }\n        }\n    }\n    private static string host = &quot;localhost&quot;;\n    private static string port = &quot;5432&quot;;\n    private static string username = &quot;postgres&quot;;\n    private static string password = &quot;password&quot;;\n    private static string database = &quot;postgis&quot;;\n    private static string connStr = $&quot;Host={host};Port={port};Username={username};Password={password};Database={database};&quot;;\n}\n</code></pre>\n<!--kg-card-end: markdown-->","comment_id":"5f4ffba3a1fe94288c940dc2","plaintext":"環境\n\n\n * Windows 10 x64\n * Visual Studio Community 2019 v16.2.2\n * Npgsql v4.1.4\n\n\n\n安裝\n\n\n開啟visual studio後點選\"工具->NuGet套件管理員->管理方案的NuGet套件\"\n\n\n\n點選Npgsql，勾選右方會執行到此套件的專案，再點選安裝\n\n\n\n按確定進行安裝\n\n\n\n\n\n建立連線\n\n\n設定好host post username password database等連線資訊後，使用NpgsqlConnection建立一個新連線，再使用Open()方法開啟連線\n\n\nclass Program\n{\n    \n    static void Main(string[] args)\n    {\n        string host = \"localhost\";\n        string port = \"5432\";\n        string username = \"postgres\";\n        string password = \"password\";\n        string database = \"postgis\";\n        string connStr = $\"Host={host};Port={port};Username={username};Password={password};Database={database};\";\n        using (NpgsqlConnection pgconn = new NpgsqlConnection(connStr))\n        {\n            pgconn.Open();\n        }\n\n    }\n}\n\n\n\n\n執行查詢\n\n\n\n方法一：使用NpgsqlDataReader讀取資料\n\n\n執行查詢必須用到先前建立好的連線和即將要執行的查詢式\n\n\nclass Program\n{\n    static void Main(string[] args)\n    {\n        ExecuteQuery(\"SELECT id,x,y FROM users;\");\n    }\n    \n    public static void ExecuteQuery(string sqlstr)\n    {\n        using (var pgconn = new NpgsqlConnection(connStr))\n        {\n            pgconn.Open();\n            using (var cmd = new NpgsqlCommand(sqlstr, pgconn))\n            {\n                using (var reader = cmd.ExecuteReader())//使用NpgsqlDataReader讀取資料\n                {\n                    while (reader.Read())//讀取下一列直到沒有數值\n                    {\n                        Console.Write(reader.GetInt32(0));//0代表該列第0行的值，也就是對應到查詢式中的id\n                        Console.Write(reader.GetDouble(1));//1代表該列第1行的值，也就是對應到查詢式中的x\n                        Console.WriteLine(reader.GetDouble(2));//2代表該列第2行的值，也就是對應到查詢式中的y\n                    }\n                }\n            }\n        }\n    }\n    private static string host = \"localhost\";\n    private static string port = \"5432\";\n    private static string username = \"postgres\";\n    private static string password = \"password\";\n    private static string database = \"postgis\";\n    private static string connStr = $\"Host={host};Port={port};Username={username};Password={password};Database={database};\";\n}\n\n\n\n\n方法二：使用NpgsqlDataAdapter將資料放入DataTable\n\n\nclass Program\n{\n    static void Main(string[] args)\n    {\n        DataTable dt = ExecuteQuery(\"SELECT id,x,y FROM sptable;\");\n\n        foreach (DataRow row in dt.Rows)\n        {\n            Console.WriteLine(\"{0} {1} {2}\", row[0], row[1], row[2]);//輸出該行的0,1,2個值，分別為id,x,y的值\n        }\n    }\n    public static DataTable ExecuteQuery(string sqlstr)\n    {\n        using (NpgsqlConnection pgconn = new NpgsqlConnection(connStr))\n        {\n            pgconn.Open();\n\n            DataTable dt = new DataTable();//建立一個DataTable\n\n            try\n            {\n                using (NpgsqlDataAdapter sqladap = new NpgsqlDataAdapter(sqlstr, pgconn))\n                {\n                    sqladap.Fill(dt);//使用NpgsqlDataAdapter將資料放入DataTable中\n                }\n                return dt;//返回DataTable\n            }\n            catch (Exception ex)\n            {\n                Console.WriteLine(ex.ToString());\n                return dt;\n            }\n        }\n    }\n    private static string host = \"localhost\";\n    private static string port = \"5432\";\n    private static string username = \"postgres\";\n    private static string password = \"password\";\n    private static string database = \"postgis\";\n    private static string connStr = $\"Host={host};Port={port};Username={username};Password={password};Database={database};\";\n}\n\n","feature_image":"__GHOST_URL__/content/images/2020/09/dotNET.png","featured":0,"type":"post","status":"published","locale":null,"visibility":"public","email_recipient_filter":"none","created_at":"2020-09-02 20:08:03","created_by":"1","updated_at":"2020-09-02 20:22:00","updated_by":null,"published_at":"2020-09-02 20:21:06","published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null,"newsletter_id":null},{"id":"635a812457207246b927a817","uuid":"daf77d74-b103-4171-a71f-53b0363f403b","title":"[Vue]使用Vue CLI建立專案","slug":"vue-vuecli-init","mobiledoc":"{\"version\":\"0.3.1\",\"atoms\":[],\"cards\":[[\"markdown\",{\"markdown\":\"## 環境\\n- Windows10 x64 2004\\n- Node.js - v12.19.0\\n- Vue - @vue/cli 4.5.8\\n\\n## 下載並安裝VueCLI\\n開啟終端機並輸入指令進行安裝\\n```shell=cmd\\nnpm install -g @vue/cli\\n```\\n輸入指令驗證VueCLI版本\\n```shell=cmd\\nvue -V\\n```\\n## 建立Vue專案\\n![1](__GHOST_URL__/content/images/2020/10/1.png)\\n開啟終端機並輸入指令開啟建立專案程式，指令中的`<name>`使用自行定義的專案名稱替換掉\\n```shell=cmd\\nvue create <name>\\n```\\n\\n![2](__GHOST_URL__/content/images/2020/10/2.png)\\n選擇要使用哪項模式建立專案，我們使用Manually select features進行自定義設定\\n\\n![3](__GHOST_URL__/content/images/2020/10/3.png)\\n預設會有三個選項已被勾選，為了防止一直報錯，我們按下方向鍵移動選項到Linter / Formatter並按下空白鍵，暫時將此選項取消勾選\\n\\n接著移動到Choose Vue version並按下Enter鍵選擇Vue版本\\n\\n![4](__GHOST_URL__/content/images/2020/10/4.png)\\n這裡我們選擇使用Vue3的版本\\n\\n![5](__GHOST_URL__/content/images/2020/10/5.png)\\n接著選擇In dedicated config files選項\\n\\n![6](__GHOST_URL__/content/images/2020/10/6.png)\\n輸入y後按下Enter確認以上安裝資訊\\n\\n![7](__GHOST_URL__/content/images/2020/10/7.png)\\n若要將本次的選擇儲存成預設設定可填入名稱紀錄本次設定，下次在下vue create指令時就可以選擇此次的設定建立專案\\n![8](__GHOST_URL__/content/images/2020/10/8.png)\\n\\n![9](__GHOST_URL__/content/images/2020/10/9.png)\\n建立好專案後就可以在目錄內看到Vue的專案檔案了\\n\\n## 設定Vue專案\\n為了確保可以正確讀取assets的內容，我們需要修改@vue/cli-serve/lib/option.js內的參數或是以新增vue.config.js檔案的方式進行設定\\n[Vue配置参考](https://cli.vuejs.org/zh/config) [VueCli設定](http://wm.dyu.edu.tw/testweb/myWeb/)\\n- 於Public資料夾下新增tools資料夾\\n- 在專案**根目錄**新增vue.config.js檔案，並輸入以下內容\\n```javascript\\nmodule.exports = {\\n    productionSourceMap:false,\\n    indexPath: 'index.html',\\n    assetsDir: 'tools',\\n    publicPath : ''\\n}\\n```\\n\\n## 啟動開發者模式伺服器\\n開啟終端機並輸入指令\\n```shell\\nnpm run serve\\n```\\n![10](__GHOST_URL__/content/images/2020/10/10.png)\\n出現Done就代表完成了，點選下方網址便可以使用瀏覽器觀看專案內網頁的狀態囉\\n\\n## 打包檔案\\n當我們寫好網頁之後，我們可以使用build指令將檔案打包，便可以部屬到伺服器上了\\n```shell=cmd\\nnpm run build\\n```\\n執行之後在根目錄裡面出現dist資料夾就是已經打包好的檔案囉\"}]],\"markups\":[],\"sections\":[[1,\"p\",[[0,[],0,\"在之前的課堂裡，我們都是直接開一個html檔案然後把vue寫在裡頭，這次助教介紹了Vue CLI，Vue CLI是一個官方出的工具，可以直接開一個測試用的伺服器，讓開發更方便，並且可以將程式碼打包，方便某些情況下的部屬\"]]],[10,0],[1,\"p\",[]]],\"ghostVersion\":\"3.0\"}","lexical":null,"html":"<p>在之前的課堂裡，我們都是直接開一個html檔案然後把vue寫在裡頭，這次助教介紹了Vue CLI，Vue CLI是一個官方出的工具，可以直接開一個測試用的伺服器，讓開發更方便，並且可以將程式碼打包，方便某些情況下的部屬</p><!--kg-card-begin: markdown--><h2 id=\"\">環境</h2>\n<ul>\n<li>Windows10 x64 2004</li>\n<li>Node.js - v12.19.0</li>\n<li>Vue - @vue/cli 4.5.8</li>\n</ul>\n<h2 id=\"vuecli\">下載並安裝VueCLI</h2>\n<p>開啟終端機並輸入指令進行安裝</p>\n<pre><code class=\"language-shell=cmd\">npm install -g @vue/cli\n</code></pre>\n<p>輸入指令驗證VueCLI版本</p>\n<pre><code class=\"language-shell=cmd\">vue -V\n</code></pre>\n<h2 id=\"vue\">建立Vue專案</h2>\n<p><img src=\"__GHOST_URL__/content/images/2020/10/1.png\" alt=\"1\" loading=\"lazy\"><br>\n開啟終端機並輸入指令開啟建立專案程式，指令中的<code>&lt;name&gt;</code>使用自行定義的專案名稱替換掉</p>\n<pre><code class=\"language-shell=cmd\">vue create &lt;name&gt;\n</code></pre>\n<p><img src=\"__GHOST_URL__/content/images/2020/10/2.png\" alt=\"2\" loading=\"lazy\"><br>\n選擇要使用哪項模式建立專案，我們使用Manually select features進行自定義設定</p>\n<p><img src=\"__GHOST_URL__/content/images/2020/10/3.png\" alt=\"3\" loading=\"lazy\"><br>\n預設會有三個選項已被勾選，為了防止一直報錯，我們按下方向鍵移動選項到Linter / Formatter並按下空白鍵，暫時將此選項取消勾選</p>\n<p>接著移動到Choose Vue version並按下Enter鍵選擇Vue版本</p>\n<p><img src=\"__GHOST_URL__/content/images/2020/10/4.png\" alt=\"4\" loading=\"lazy\"><br>\n這裡我們選擇使用Vue3的版本</p>\n<p><img src=\"__GHOST_URL__/content/images/2020/10/5.png\" alt=\"5\" loading=\"lazy\"><br>\n接著選擇In dedicated config files選項</p>\n<p><img src=\"__GHOST_URL__/content/images/2020/10/6.png\" alt=\"6\" loading=\"lazy\"><br>\n輸入y後按下Enter確認以上安裝資訊</p>\n<p><img src=\"__GHOST_URL__/content/images/2020/10/7.png\" alt=\"7\" loading=\"lazy\"><br>\n若要將本次的選擇儲存成預設設定可填入名稱紀錄本次設定，下次在下vue create指令時就可以選擇此次的設定建立專案<br>\n<img src=\"__GHOST_URL__/content/images/2020/10/8.png\" alt=\"8\" loading=\"lazy\"></p>\n<p><img src=\"__GHOST_URL__/content/images/2020/10/9.png\" alt=\"9\" loading=\"lazy\"><br>\n建立好專案後就可以在目錄內看到Vue的專案檔案了</p>\n<h2 id=\"vue\">設定Vue專案</h2>\n<p>為了確保可以正確讀取assets的內容，我們需要修改@vue/cli-serve/lib/option.js內的參數或是以新增vue.config.js檔案的方式進行設定<br>\n<a href=\"https://cli.vuejs.org/zh/config\">Vue配置参考</a> <a href=\"http://wm.dyu.edu.tw/testweb/myWeb/\">VueCli設定</a></p>\n<ul>\n<li>於Public資料夾下新增tools資料夾</li>\n<li>在專案<strong>根目錄</strong>新增vue.config.js檔案，並輸入以下內容</li>\n</ul>\n<pre><code class=\"language-javascript\">module.exports = {\n    productionSourceMap:false,\n    indexPath: 'index.html',\n    assetsDir: 'tools',\n    publicPath : ''\n}\n</code></pre>\n<h2 id=\"\">啟動開發者模式伺服器</h2>\n<p>開啟終端機並輸入指令</p>\n<pre><code class=\"language-shell\">npm run serve\n</code></pre>\n<p><img src=\"__GHOST_URL__/content/images/2020/10/10.png\" alt=\"10\" loading=\"lazy\"><br>\n出現Done就代表完成了，點選下方網址便可以使用瀏覽器觀看專案內網頁的狀態囉</p>\n<h2 id=\"\">打包檔案</h2>\n<p>當我們寫好網頁之後，我們可以使用build指令將檔案打包，便可以部屬到伺服器上了</p>\n<pre><code class=\"language-shell=cmd\">npm run build\n</code></pre>\n<p>執行之後在根目錄裡面出現dist資料夾就是已經打包好的檔案囉</p>\n<!--kg-card-end: markdown-->","comment_id":"5f986050c88dfb30b47715dc","plaintext":"在之前的課堂裡，我們都是直接開一個html檔案然後把vue寫在裡頭，這次助教介紹了Vue CLI，Vue CLI是一個官方出的工具，可以直接開一個測試用的伺服器，讓開發更方便，並且可以將程式碼打包，方便某些情況下的部屬\n\n\n環境\n\n\n * Windows10 x64 2004\n * Node.js - v12.19.0\n * Vue - @vue/cli 4.5.8\n\n\n\n下載並安裝VueCLI\n\n\n開啟終端機並輸入指令進行安裝\n\n\nnpm install -g @vue/cli\n\n\n\n輸入指令驗證VueCLI版本\n\n\nvue -V\n\n\n\n\n建立Vue專案\n\n\n\n\n開啟終端機並輸入指令開啟建立專案程式，指令中的<name>使用自行定義的專案名稱替換掉\n\n\nvue create <name>\n\n\n\n\n\n選擇要使用哪項模式建立專案，我們使用Manually select features進行自定義設定\n\n\n\n\n預設會有三個選項已被勾選，為了防止一直報錯，我們按下方向鍵移動選項到Linter / Formatter並按下空白鍵，暫時將此選項取消勾選\n\n\n接著移動到Choose Vue version並按下Enter鍵選擇Vue版本\n\n\n\n\n這裡我們選擇使用Vue3的版本\n\n\n\n\n接著選擇In dedicated config files選項\n\n\n\n\n輸入y後按下Enter確認以上安裝資訊\n\n\n\n\n若要將本次的選擇儲存成預設設定可填入名稱紀錄本次設定，下次在下vue create指令時就可以選擇此次的設定建立專案\n\n\n\n\n\n\n建立好專案後就可以在目錄內看到Vue的專案檔案了\n\n\n\n設定Vue專案\n\n\n為了確保可以正確讀取assets的內容，我們需要修改@vue/cli-serve/lib/option.js內的參數或是以新增vue.config.js檔案的方式進行設定\n\nVue配置参考 VueCli設定\n\n\n * 於Public資料夾下新增tools資料夾\n * 在專案根目錄新增vue.config.js檔案，並輸入以下內容\n\n\nmodule.exports = {\n    productionSourceMap:false,\n    indexPath: 'index.html',\n    assetsDir: 'tools',\n    publicPath : ''\n}\n\n\n\n\n啟動開發者模式伺服器\n\n\n開啟終端機並輸入指令\n\n\nnpm run serve\n\n\n\n\n\n出現Done就代表完成了，點選下方網址便可以使用瀏覽器觀看專案內網頁的狀態囉\n\n\n\n打包檔案\n\n\n當我們寫好網頁之後，我們可以使用build指令將檔案打包，便可以部屬到伺服器上了\n\n\nnpm run build\n\n\n\n執行之後在根目錄裡面出現dist資料夾就是已經打包好的檔案囉\n","feature_image":"__GHOST_URL__/content/images/2020/10/vue.jpg","featured":0,"type":"post","status":"published","locale":null,"visibility":"public","email_recipient_filter":"none","created_at":"2020-10-27 18:00:48","created_by":"1","updated_at":"2020-10-27 18:17:14","updated_by":null,"published_at":"2020-10-27 18:13:25","published_by":"1","custom_excerpt":"在之前的課堂裡，我們都是直接開一個html檔案然後把vue寫在裡頭，這次助教介紹了Vue CLI，Vue CLI是一個官方出的工具，可以直接開一個測試用的伺服器，讓開發更方便，並且可以將程式碼打包，方便某些情況下的部屬","codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null,"newsletter_id":null},{"id":"635a812457207246b927a818","uuid":"d37ee044-41fa-4234-9d1f-ab7b789f1006","title":"[Vue]Vuetify安裝與使用","slug":"vue-vuetify-init","mobiledoc":"{\"version\":\"0.3.1\",\"atoms\":[],\"cards\":[[\"markdown\",{\"markdown\":\"## 環境\\n- Windows10 x64 2004\\n- Node.js - 6.12.1\\n- Vue - @vue/cli 4.5.8\\n- vue-cli-plugin-vuetify@2.0.7\\n\\n## 建立Vue專案\\n在使用Vuetify之前必須先建立Vue專案，建立專案的方法請參考[[Vue]使用Vue CLI建立專案](https://vincent87720.github.io/Blog/vue-vuecli-init/index.html)\\n\\n## 將Vuetify加入到專案\\n切換到專案根目錄，並開啟終端機輸入指令，將Vuetify加入到專案\\n```shell\\nvue add vuetify\\n```\\n![1](__GHOST_URL__/content/images/2020/11/1.png)\\n選擇`Default (recommended)`\\n![2](__GHOST_URL__/content/images/2020/11/2.png)\\n安裝完成後在終端機輸入指令啟動開發者模式\\n```shell\\nnpm run serve\\n```\\n![3](__GHOST_URL__/content/images/2020/11/3.png)\\n成功啟動後會顯示網址，在瀏覽器網址列輸入網址即可瀏覽目前專案的狀態\\n在瀏覽器輸入網址執行後，若出現以下畫面代表安裝成功\\n![4](__GHOST_URL__/content/images/2020/11/4.png)\"}]],\"markups\":[],\"sections\":[[1,\"p\",[[0,[],0,\"Vuetify是一個Vue的UI框架，有許多精美和現成的組件可讓我們快速進行網頁排版及呈現，由於這篇文章撰寫時vuetify尚未支援Vue3，所以本篇文章以Vue2為例，示範如何將vuetify加入到Vue2專案中\"]]],[10,0],[1,\"p\",[]]],\"ghostVersion\":\"3.0\"}","lexical":null,"html":"<p>Vuetify是一個Vue的UI框架，有許多精美和現成的組件可讓我們快速進行網頁排版及呈現，由於這篇文章撰寫時vuetify尚未支援Vue3，所以本篇文章以Vue2為例，示範如何將vuetify加入到Vue2專案中</p><!--kg-card-begin: markdown--><h2 id=\"\">環境</h2>\n<ul>\n<li>Windows10 x64 2004</li>\n<li>Node.js - 6.12.1</li>\n<li>Vue - @vue/cli 4.5.8</li>\n<li>vue-cli-plugin-vuetify@2.0.7</li>\n</ul>\n<h2 id=\"vue\">建立Vue專案</h2>\n<p>在使用Vuetify之前必須先建立Vue專案，建立專案的方法請參考<a href=\"https://vincent87720.github.io/Blog/vue-vuecli-init/index.html\">[Vue]使用Vue CLI建立專案</a></p>\n<h2 id=\"vuetify\">將Vuetify加入到專案</h2>\n<p>切換到專案根目錄，並開啟終端機輸入指令，將Vuetify加入到專案</p>\n<pre><code class=\"language-shell\">vue add vuetify\n</code></pre>\n<p><img src=\"__GHOST_URL__/content/images/2020/11/1.png\" alt=\"1\" loading=\"lazy\"><br>\n選擇<code>Default (recommended)</code><br>\n<img src=\"__GHOST_URL__/content/images/2020/11/2.png\" alt=\"2\" loading=\"lazy\"><br>\n安裝完成後在終端機輸入指令啟動開發者模式</p>\n<pre><code class=\"language-shell\">npm run serve\n</code></pre>\n<p><img src=\"__GHOST_URL__/content/images/2020/11/3.png\" alt=\"3\" loading=\"lazy\"><br>\n成功啟動後會顯示網址，在瀏覽器網址列輸入網址即可瀏覽目前專案的狀態<br>\n在瀏覽器輸入網址執行後，若出現以下畫面代表安裝成功<br>\n<img src=\"__GHOST_URL__/content/images/2020/11/4.png\" alt=\"4\" loading=\"lazy\"></p>\n<!--kg-card-end: markdown-->","comment_id":"5fa82780420dbd31a087d3d1","plaintext":"Vuetify是一個Vue的UI框架，有許多精美和現成的組件可讓我們快速進行網頁排版及呈現，由於這篇文章撰寫時vuetify尚未支援Vue3，所以本篇文章以Vue2為例，示範如何將vuetify加入到Vue2專案中\n\n\n環境\n\n\n * Windows10 x64 2004\n * Node.js - 6.12.1\n * Vue - @vue/cli 4.5.8\n * vue-cli-plugin-vuetify@2.0.7\n\n\n\n建立Vue專案\n\n\n在使用Vuetify之前必須先建立Vue專案，建立專案的方法請參考[Vue]使用Vue CLI建立專案\n\n\n\n將Vuetify加入到專案\n\n\n切換到專案根目錄，並開啟終端機輸入指令，將Vuetify加入到專案\n\n\nvue add vuetify\n\n\n\n\n\n選擇Default (recommended)\n\n\n\n安裝完成後在終端機輸入指令啟動開發者模式\n\n\nnpm run serve\n\n\n\n\n\n成功啟動後會顯示網址，在瀏覽器網址列輸入網址即可瀏覽目前專案的狀態\n\n在瀏覽器輸入網址執行後，若出現以下畫面代表安裝成功\n\n\n","feature_image":"__GHOST_URL__/content/images/2020/11/vue.jpg","featured":0,"type":"post","status":"published","locale":null,"visibility":"public","email_recipient_filter":"none","created_at":"2020-11-08 17:14:40","created_by":"1","updated_at":"2020-11-08 17:25:21","updated_by":null,"published_at":"2020-11-08 17:18:40","published_by":"1","custom_excerpt":"Vuetify是一個Vue的UI框架，有許多精美和現成的組件可讓我們快速進行網頁排版及呈現，由於這篇文章撰寫時vuetify尚未支援Vue3，所以本篇文章以Vue2為例，示範如何將vuetify加入到Vue2專案中","codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null,"newsletter_id":null},{"id":"635a812457207246b927a819","uuid":"b8866358-70e4-4b06-a7c0-b393e317b690","title":"[Vue]將Vue-Router加入到專案中","slug":"vue-vuerouter-init","mobiledoc":"{\"version\":\"0.3.1\",\"atoms\":[],\"cards\":[[\"markdown\",{\"markdown\":\"## 環境\\n- Windows10 x64 2004\\n- Node.js - v12.19.0\\n- Vue - @vue/cli 4.5.8\\n- vue-router@3.4.9\\n\\n## 安裝Vue-Router\\n要將Vue-Router加入到專案可使用CDN嵌入，或是使用npm安裝\\n\\n### CDN\\n在`<head></head>`標籤中加入下面這行標籤即可將Vue-Router加入到專案\\n```htmlmixed\\n<head>\\n    <script src=\\\"https://unpkg.com/vue-router/dist/vue-router.js\\\"></script>\\n</head>\\n```\\n\\n### npm\\n開啟終端機，並輸入以下指令，即可安裝Vue-Router\\n```shell\\nnpm install vue-router\\n```\\n\\n## 建立Vue專案\\n在使用Vue-Router之前建議先建立Vue專案，建立專案的方法請參考[[Vue]使用Vue CLI建立專案](https://vincent87720.github.io/Blog/vue-vuecli-init/index.html)\\n\\n## 加入component\\n在已建立好的專案中尋找src資料夾，並在src目錄下新增views目錄\\n![1-1](__GHOST_URL__/content/images/2020/11/1-1.png)\\n在views目錄中放入想要進行切換的component，這邊以Home.vue和About.vue進行示範\\n![2-1](__GHOST_URL__/content/images/2020/11/2-1.png)\\n**Home.vue**\\n```htmlmixed\\n<template>\\n  <div class=\\\"home\\\">\\n    <h1>Home page</h1>\\n  </div>\\n</template>\\n\\n<script>\\nexport default {\\n\\n}\\n</script>\\n\\n```\\n\\n**About.vue**\\n```htmlmixed\\n<template>\\n  <div class=\\\"about\\\">\\n    <h1>About page</h1>\\n  </div>\\n</template>\\n\\n<script>\\nexport default {\\n\\n}\\n</script>\\n\\n```\\n\\n## 建立路由目錄與檔案\\n接著在src目錄下新增router資料夾，並新增index.js檔案\\n![3-1](__GHOST_URL__/content/images/2020/11/3-1.png)\\n在檔案中可自由新增或刪除component，並配置component對應的路由\\n\\n**index.js**\\n```javascript\\nimport Vue from 'vue'\\nimport VueRouter from 'vue-router'\\n\\n//這裡可以自行import需要的component\\nimport Home from '../views/Home.vue'\\nimport About from '../views/About.vue'\\n\\nVue.use(VueRouter)\\n\\n//建立路由routes\\nconst routes = [\\n    {\\n        path: '/',\\n        component: Home\\n    },\\n    {\\n        path: '/About',\\n        component: About\\n    }\\n]\\n\\n//建立Vue-Router的instance，並將routes的配置帶入\\nconst router = new VueRouter({\\n    mode: 'hash',\\n    routes\\n})\\n//匯出成模組給Vue使用\\nexport default router\\n\\n```\\n\\n## 匯入路由\\n![4-1](__GHOST_URL__/content/images/2020/11/4-1.png)\\n在`main.js`中加入以下指令載入router模組\\n```javascript\\nimport router from './router'\\n```\\n並在new Vue中加入router\\n```javascript\\nnew Vue({\\n  router,\\n  render: h => h(App)\\n}).$mount('#app')\\n```\\n\\n**main.js**\\n```javascript\\nimport Vue from 'vue'\\nimport App from './App.vue'\\nimport router from './router'\\n\\nVue.config.productionTip = false\\n\\nnew Vue({\\n  router,\\n  render: h => h(App)\\n}).$mount('#app')\\n\\n```\\n\\n## 加入路由連結\\n在`App.vue`中加入Home和About的連結\\n![5](__GHOST_URL__/content/images/2020/11/5.png)\\n```javascript\\n<router-link to=\\\"/\\\">Home</router-link>|\\n<router-link to=\\\"/About\\\">About</router-link>\\n<router-view></router-view>\\n```\\n\\n**App.vue**\\n```htmlmixed\\n<template>\\n  <v-app>\\n    <v-main>\\n      <router-link to=\\\"/\\\">Home</router-link>|\\n      <router-link to=\\\"/About\\\">About</router-link>\\n      <router-view></router-view>\\n    </v-main>\\n  </v-app>\\n</template>\\n\\n<script>\\n\\nexport default {\\n  name: 'App',\\n\\n  components: {\\n  },\\n\\n  data: () => ({\\n    //\\n  }),\\n};\\n</script>\\n```\\n到這裡我們已經建立好路由了，接著我們使用開發者模式查看成果\\n\\n## 啟動開發者模式\\n在終端機輸入命令啟動開發者模式\\n```shell\\nnpm run serve\\n```\\n![6](__GHOST_URL__/content/images/2020/11/6.png)\\n依照指示在瀏覽器輸入網址\\n\\n## 完成\\n現在已可使用連結切換component!\\n![7](__GHOST_URL__/content/images/2020/11/7.png)\\n![8](__GHOST_URL__/content/images/2020/11/8.png)\"}]],\"markups\":[],\"sections\":[[1,\"p\",[[0,[],0,\"在使用vue時，有時會需要在畫面中切換component，這時vue-router就派上用場啦，vue-router常常被用在single-page application中，這次的期中專題因為要將舊網頁變成single-page app，所以必須先了解如何將vue-router加入到專案中，方便後續使用\"]]],[10,0],[1,\"p\",[]]],\"ghostVersion\":\"3.0\"}","lexical":null,"html":"<p>在使用vue時，有時會需要在畫面中切換component，這時vue-router就派上用場啦，vue-router常常被用在single-page application中，這次的期中專題因為要將舊網頁變成single-page app，所以必須先了解如何將vue-router加入到專案中，方便後續使用</p><!--kg-card-begin: markdown--><h2 id=\"\">環境</h2>\n<ul>\n<li>Windows10 x64 2004</li>\n<li>Node.js - v12.19.0</li>\n<li>Vue - @vue/cli 4.5.8</li>\n<li>vue-router@3.4.9</li>\n</ul>\n<h2 id=\"vuerouter\">安裝Vue-Router</h2>\n<p>要將Vue-Router加入到專案可使用CDN嵌入，或是使用npm安裝</p>\n<h3 id=\"cdn\">CDN</h3>\n<p>在<code>&lt;head&gt;&lt;/head&gt;</code>標籤中加入下面這行標籤即可將Vue-Router加入到專案</p>\n<pre><code class=\"language-htmlmixed\">&lt;head&gt;\n    &lt;script src=&quot;https://unpkg.com/vue-router/dist/vue-router.js&quot;&gt;&lt;/script&gt;\n&lt;/head&gt;\n</code></pre>\n<h3 id=\"npm\">npm</h3>\n<p>開啟終端機，並輸入以下指令，即可安裝Vue-Router</p>\n<pre><code class=\"language-shell\">npm install vue-router\n</code></pre>\n<h2 id=\"vue\">建立Vue專案</h2>\n<p>在使用Vue-Router之前建議先建立Vue專案，建立專案的方法請參考<a href=\"https://vincent87720.github.io/Blog/vue-vuecli-init/index.html\">[Vue]使用Vue CLI建立專案</a></p>\n<h2 id=\"component\">加入component</h2>\n<p>在已建立好的專案中尋找src資料夾，並在src目錄下新增views目錄<br>\n<img src=\"__GHOST_URL__/content/images/2020/11/1-1.png\" alt=\"1-1\" loading=\"lazy\"><br>\n在views目錄中放入想要進行切換的component，這邊以Home.vue和About.vue進行示範<br>\n<img src=\"__GHOST_URL__/content/images/2020/11/2-1.png\" alt=\"2-1\" loading=\"lazy\"><br>\n<strong>Home.vue</strong></p>\n<pre><code class=\"language-htmlmixed\">&lt;template&gt;\n  &lt;div class=&quot;home&quot;&gt;\n    &lt;h1&gt;Home page&lt;/h1&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nexport default {\n\n}\n&lt;/script&gt;\n\n</code></pre>\n<p><strong>About.vue</strong></p>\n<pre><code class=\"language-htmlmixed\">&lt;template&gt;\n  &lt;div class=&quot;about&quot;&gt;\n    &lt;h1&gt;About page&lt;/h1&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nexport default {\n\n}\n&lt;/script&gt;\n\n</code></pre>\n<h2 id=\"\">建立路由目錄與檔案</h2>\n<p>接著在src目錄下新增router資料夾，並新增index.js檔案<br>\n<img src=\"__GHOST_URL__/content/images/2020/11/3-1.png\" alt=\"3-1\" loading=\"lazy\"><br>\n在檔案中可自由新增或刪除component，並配置component對應的路由</p>\n<p><strong>index.js</strong></p>\n<pre><code class=\"language-javascript\">import Vue from 'vue'\nimport VueRouter from 'vue-router'\n\n//這裡可以自行import需要的component\nimport Home from '../views/Home.vue'\nimport About from '../views/About.vue'\n\nVue.use(VueRouter)\n\n//建立路由routes\nconst routes = [\n    {\n        path: '/',\n        component: Home\n    },\n    {\n        path: '/About',\n        component: About\n    }\n]\n\n//建立Vue-Router的instance，並將routes的配置帶入\nconst router = new VueRouter({\n    mode: 'hash',\n    routes\n})\n//匯出成模組給Vue使用\nexport default router\n\n</code></pre>\n<h2 id=\"\">匯入路由</h2>\n<p><img src=\"__GHOST_URL__/content/images/2020/11/4-1.png\" alt=\"4-1\" loading=\"lazy\"><br>\n在<code>main.js</code>中加入以下指令載入router模組</p>\n<pre><code class=\"language-javascript\">import router from './router'\n</code></pre>\n<p>並在new Vue中加入router</p>\n<pre><code class=\"language-javascript\">new Vue({\n  router,\n  render: h =&gt; h(App)\n}).$mount('#app')\n</code></pre>\n<p><strong>main.js</strong></p>\n<pre><code class=\"language-javascript\">import Vue from 'vue'\nimport App from './App.vue'\nimport router from './router'\n\nVue.config.productionTip = false\n\nnew Vue({\n  router,\n  render: h =&gt; h(App)\n}).$mount('#app')\n\n</code></pre>\n<h2 id=\"\">加入路由連結</h2>\n<p>在<code>App.vue</code>中加入Home和About的連結<br>\n<img src=\"__GHOST_URL__/content/images/2020/11/5.png\" alt=\"5\" loading=\"lazy\"></p>\n<pre><code class=\"language-javascript\">&lt;router-link to=&quot;/&quot;&gt;Home&lt;/router-link&gt;|\n&lt;router-link to=&quot;/About&quot;&gt;About&lt;/router-link&gt;\n&lt;router-view&gt;&lt;/router-view&gt;\n</code></pre>\n<p><strong>App.vue</strong></p>\n<pre><code class=\"language-htmlmixed\">&lt;template&gt;\n  &lt;v-app&gt;\n    &lt;v-main&gt;\n      &lt;router-link to=&quot;/&quot;&gt;Home&lt;/router-link&gt;|\n      &lt;router-link to=&quot;/About&quot;&gt;About&lt;/router-link&gt;\n      &lt;router-view&gt;&lt;/router-view&gt;\n    &lt;/v-main&gt;\n  &lt;/v-app&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\n\nexport default {\n  name: 'App',\n\n  components: {\n  },\n\n  data: () =&gt; ({\n    //\n  }),\n};\n&lt;/script&gt;\n</code></pre>\n<p>到這裡我們已經建立好路由了，接著我們使用開發者模式查看成果</p>\n<h2 id=\"\">啟動開發者模式</h2>\n<p>在終端機輸入命令啟動開發者模式</p>\n<pre><code class=\"language-shell\">npm run serve\n</code></pre>\n<p><img src=\"__GHOST_URL__/content/images/2020/11/6.png\" alt=\"6\" loading=\"lazy\"><br>\n依照指示在瀏覽器輸入網址</p>\n<h2 id=\"\">完成</h2>\n<p>現在已可使用連結切換component!<br>\n<img src=\"__GHOST_URL__/content/images/2020/11/7.png\" alt=\"7\" loading=\"lazy\"><br>\n<img src=\"__GHOST_URL__/content/images/2020/11/8.png\" alt=\"8\" loading=\"lazy\"></p>\n<!--kg-card-end: markdown-->","comment_id":"5faab3648214a931cca9350d","plaintext":"在使用vue時，有時會需要在畫面中切換component，這時vue-router就派上用場啦，vue-router常常被用在single-page application中，這次的期中專題因為要將舊網頁變成single-page app，所以必須先了解如何將vue-router加入到專案中，方便後續使用\n\n\n環境\n\n\n * Windows10 x64 2004\n * Node.js - v12.19.0\n * Vue - @vue/cli 4.5.8\n * vue-router@3.4.9\n\n\n\n安裝Vue-Router\n\n\n要將Vue-Router加入到專案可使用CDN嵌入，或是使用npm安裝\n\n\n\nCDN\n\n\n在<head></head>標籤中加入下面這行標籤即可將Vue-Router加入到專案\n\n\n<head>\n    <script src=\"https://unpkg.com/vue-router/dist/vue-router.js\"></script>\n</head>\n\n\n\n\nnpm\n\n\n開啟終端機，並輸入以下指令，即可安裝Vue-Router\n\n\nnpm install vue-router\n\n\n\n\n建立Vue專案\n\n\n在使用Vue-Router之前建議先建立Vue專案，建立專案的方法請參考[Vue]使用Vue CLI建立專案\n\n\n\n加入component\n\n\n在已建立好的專案中尋找src資料夾，並在src目錄下新增views目錄\n\n\n\n在views目錄中放入想要進行切換的component，這邊以Home.vue和About.vue進行示範\n\n\n\nHome.vue\n\n\n<template>\n  <div class=\"home\">\n    <h1>Home page</h1>\n  </div>\n</template>\n\n<script>\nexport default {\n\n}\n</script>\n\n\n\n\nAbout.vue\n\n\n<template>\n  <div class=\"about\">\n    <h1>About page</h1>\n  </div>\n</template>\n\n<script>\nexport default {\n\n}\n</script>\n\n\n\n\n\n建立路由目錄與檔案\n\n\n接著在src目錄下新增router資料夾，並新增index.js檔案\n\n\n\n在檔案中可自由新增或刪除component，並配置component對應的路由\n\n\nindex.js\n\n\nimport Vue from 'vue'\nimport VueRouter from 'vue-router'\n\n//這裡可以自行import需要的component\nimport Home from '../views/Home.vue'\nimport About from '../views/About.vue'\n\nVue.use(VueRouter)\n\n//建立路由routes\nconst routes = [\n    {\n        path: '/',\n        component: Home\n    },\n    {\n        path: '/About',\n        component: About\n    }\n]\n\n//建立Vue-Router的instance，並將routes的配置帶入\nconst router = new VueRouter({\n    mode: 'hash',\n    routes\n})\n//匯出成模組給Vue使用\nexport default router\n\n\n\n\n\n匯入路由\n\n\n\n\n在main.js中加入以下指令載入router模組\n\n\nimport router from './router'\n\n\n\n並在new Vue中加入router\n\n\nnew Vue({\n  router,\n  render: h => h(App)\n}).$mount('#app')\n\n\n\nmain.js\n\n\nimport Vue from 'vue'\nimport App from './App.vue'\nimport router from './router'\n\nVue.config.productionTip = false\n\nnew Vue({\n  router,\n  render: h => h(App)\n}).$mount('#app')\n\n\n\n\n\n加入路由連結\n\n\n在App.vue中加入Home和About的連結\n\n\n\n\n<router-link to=\"/\">Home</router-link>|\n<router-link to=\"/About\">About</router-link>\n<router-view></router-view>\n\n\n\nApp.vue\n\n\n<template>\n  <v-app>\n    <v-main>\n      <router-link to=\"/\">Home</router-link>|\n      <router-link to=\"/About\">About</router-link>\n      <router-view></router-view>\n    </v-main>\n  </v-app>\n</template>\n\n<script>\n\nexport default {\n  name: 'App',\n\n  components: {\n  },\n\n  data: () => ({\n    //\n  }),\n};\n</script>\n\n\n\n到這裡我們已經建立好路由了，接著我們使用開發者模式查看成果\n\n\n\n啟動開發者模式\n\n\n在終端機輸入命令啟動開發者模式\n\n\nnpm run serve\n\n\n\n\n\n依照指示在瀏覽器輸入網址\n\n\n\n完成\n\n\n現在已可使用連結切換component!\n\n\n\n\n","feature_image":"__GHOST_URL__/content/images/2020/11/vue-1.jpg","featured":0,"type":"post","status":"published","locale":null,"visibility":"public","email_recipient_filter":"none","created_at":"2020-11-10 15:36:04","created_by":"1","updated_at":"2020-11-10 15:39:37","updated_by":null,"published_at":"2020-11-10 15:39:37","published_by":"1","custom_excerpt":"在使用vue時，有時會需要在畫面中切換component，這時vue-router就派上用場啦，vue-router常常被用在single-page application中，這次的期中專題因為要將舊網頁變成single-page app，所以必須先了解如何將vue-router加入到專案中，方便後續使用","codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null,"newsletter_id":null},{"id":"635a812457207246b927a81a","uuid":"2693fd82-de37-4dcf-8e7b-403e7d622b35","title":"Tags","slug":"tags","mobiledoc":"{\"version\":\"0.3.1\",\"atoms\":[],\"cards\":[],\"markups\":[],\"sections\":[[1,\"p\",[]]],\"ghostVersion\":\"3.0\"}","lexical":null,"html":null,"comment_id":"5faac20682b34e13e4fcf3ca","plaintext":null,"feature_image":null,"featured":0,"type":"page","status":"published","locale":null,"visibility":"public","email_recipient_filter":"none","created_at":"2020-11-10 16:38:30","created_by":"1","updated_at":"2021-06-09 16:17:48","updated_by":null,"published_at":"2020-11-10 16:38:45","published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null,"newsletter_id":null},{"id":"635a812457207246b927a81b","uuid":"33469502-846c-4501-ad31-859c4942a123","title":"[MQTT]Mosquitto Server 安裝與啟動","slug":"mqtt-mosquitto-server-init","mobiledoc":"{\"version\":\"0.3.1\",\"atoms\":[],\"cards\":[[\"markdown\",{\"markdown\":\"## 環境\\n- Windows10 x64 2004\\n- mosquitto-1.6.12a\\n\\n## 下載\\n進入[Mosquitto-Download](https://mosquitto.org/download/)下載頁面進行下載\\n![1-2](__GHOST_URL__/content/images/2020/11/1-2.png)\\n\\n## 安裝\\n點擊已下載完成的安裝檔進行安裝\\n![2-2](__GHOST_URL__/content/images/2020/11/2-2.png)\\n![3-2](__GHOST_URL__/content/images/2020/11/3-2.png)\\n可選擇安裝路徑\\n![4-2](__GHOST_URL__/content/images/2020/11/4-2.png)\\n安裝完成\\n![5-1](__GHOST_URL__/content/images/2020/11/5-1.png)\\n\\n## 啟動\\n使用**工作管理員**或**執行**開啟**服務**功能\\n\\n### 使用工作管理員開啟服務\\n在開始列點選右鍵，點擊\\\"工作管理員\\\"以開啟\\n![6-1](__GHOST_URL__/content/images/2020/11/6-1.png)\\n### 使用執行開啟服務\\n按下快捷鍵`windows+R`並輸入services.msc開啟服務功能\\n![7-1](__GHOST_URL__/content/images/2020/11/7-1.png)\\n\\n尋找mosquitto並點選右鍵啟動服務\\n![8-1](__GHOST_URL__/content/images/2020/11/8-1.png)\\n![9](__GHOST_URL__/content/images/2020/11/9.png)\\n\\n## 查看伺服器狀態\\n在終端機輸入`netstat -an`查看作用中的連線，以檢查伺服器是否正常運行\\n![10](__GHOST_URL__/content/images/2020/11/10.png)\\n\\n## 在防火牆中開啟連接埠\\n進入控制台 > 系統及安全性 > Windows Defender防火牆 > 進階設定，或直接按下快捷鍵`windows+R`並輸入WF.msc，開啟**具有進階安全性的 Windows Defender 防火牆**\\n\\n在**輸入規則**中點選新增規則\\n![11](__GHOST_URL__/content/images/2020/11/11.png)\\n建立指定連接埠的規則\\n![12](__GHOST_URL__/content/images/2020/11/12.png)\\n輸入1883連接埠進行設定\\n![13](__GHOST_URL__/content/images/2020/11/13.png)\\n![14](__GHOST_URL__/content/images/2020/11/14.png)\\n![15](__GHOST_URL__/content/images/2020/11/15.png)\\n指定規則名稱\\n![16](__GHOST_URL__/content/images/2020/11/16.png)\\n\\n## 安裝完成\\n完成以上設定後就可以透過1883連接埠對MQTT Server進行連線啦\"}]],\"markups\":[],\"sections\":[[1,\"p\",[[0,[],0,\"在使用MQTT進行資料傳遞時，會需要一個代理人，也就是MQTT Broker，作為訂閱/發布的橋樑，Mosquitto Server是一個開源的MQTT的Server，本篇筆記紀錄在Windows下如何安裝並開啟MQTT Server\"]]],[10,0],[1,\"p\",[]]],\"ghostVersion\":\"3.0\"}","lexical":null,"html":"<p>在使用MQTT進行資料傳遞時，會需要一個代理人，也就是MQTT Broker，作為訂閱/發布的橋樑，Mosquitto Server是一個開源的MQTT的Server，本篇筆記紀錄在Windows下如何安裝並開啟MQTT Server</p><!--kg-card-begin: markdown--><h2 id=\"\">環境</h2>\n<ul>\n<li>Windows10 x64 2004</li>\n<li>mosquitto-1.6.12a</li>\n</ul>\n<h2 id=\"\">下載</h2>\n<p>進入<a href=\"https://mosquitto.org/download/\">Mosquitto-Download</a>下載頁面進行下載<br>\n<img src=\"__GHOST_URL__/content/images/2020/11/1-2.png\" alt=\"1-2\" loading=\"lazy\"></p>\n<h2 id=\"\">安裝</h2>\n<p>點擊已下載完成的安裝檔進行安裝<br>\n<img src=\"__GHOST_URL__/content/images/2020/11/2-2.png\" alt=\"2-2\" loading=\"lazy\"><br>\n<img src=\"__GHOST_URL__/content/images/2020/11/3-2.png\" alt=\"3-2\" loading=\"lazy\"><br>\n可選擇安裝路徑<br>\n<img src=\"__GHOST_URL__/content/images/2020/11/4-2.png\" alt=\"4-2\" loading=\"lazy\"><br>\n安裝完成<br>\n<img src=\"__GHOST_URL__/content/images/2020/11/5-1.png\" alt=\"5-1\" loading=\"lazy\"></p>\n<h2 id=\"\">啟動</h2>\n<p>使用<strong>工作管理員</strong>或<strong>執行</strong>開啟<strong>服務</strong>功能</p>\n<h3 id=\"\">使用工作管理員開啟服務</h3>\n<p>在開始列點選右鍵，點擊&quot;工作管理員&quot;以開啟<br>\n<img src=\"__GHOST_URL__/content/images/2020/11/6-1.png\" alt=\"6-1\" loading=\"lazy\"></p>\n<h3 id=\"\">使用執行開啟服務</h3>\n<p>按下快捷鍵<code>windows+R</code>並輸入services.msc開啟服務功能<br>\n<img src=\"__GHOST_URL__/content/images/2020/11/7-1.png\" alt=\"7-1\" loading=\"lazy\"></p>\n<p>尋找mosquitto並點選右鍵啟動服務<br>\n<img src=\"__GHOST_URL__/content/images/2020/11/8-1.png\" alt=\"8-1\" loading=\"lazy\"><br>\n<img src=\"__GHOST_URL__/content/images/2020/11/9.png\" alt=\"9\" loading=\"lazy\"></p>\n<h2 id=\"\">查看伺服器狀態</h2>\n<p>在終端機輸入<code>netstat -an</code>查看作用中的連線，以檢查伺服器是否正常運行<br>\n<img src=\"__GHOST_URL__/content/images/2020/11/10.png\" alt=\"10\" loading=\"lazy\"></p>\n<h2 id=\"\">在防火牆中開啟連接埠</h2>\n<p>進入控制台 &gt; 系統及安全性 &gt; Windows Defender防火牆 &gt; 進階設定，或直接按下快捷鍵<code>windows+R</code>並輸入WF.msc，開啟<strong>具有進階安全性的 Windows Defender 防火牆</strong></p>\n<p>在<strong>輸入規則</strong>中點選新增規則<br>\n<img src=\"__GHOST_URL__/content/images/2020/11/11.png\" alt=\"11\" loading=\"lazy\"><br>\n建立指定連接埠的規則<br>\n<img src=\"__GHOST_URL__/content/images/2020/11/12.png\" alt=\"12\" loading=\"lazy\"><br>\n輸入1883連接埠進行設定<br>\n<img src=\"__GHOST_URL__/content/images/2020/11/13.png\" alt=\"13\" loading=\"lazy\"><br>\n<img src=\"__GHOST_URL__/content/images/2020/11/14.png\" alt=\"14\" loading=\"lazy\"><br>\n<img src=\"__GHOST_URL__/content/images/2020/11/15.png\" alt=\"15\" loading=\"lazy\"><br>\n指定規則名稱<br>\n<img src=\"__GHOST_URL__/content/images/2020/11/16.png\" alt=\"16\" loading=\"lazy\"></p>\n<h2 id=\"\">安裝完成</h2>\n<p>完成以上設定後就可以透過1883連接埠對MQTT Server進行連線啦</p>\n<!--kg-card-end: markdown-->","comment_id":"5fbd476923e6d4238ca4b81e","plaintext":"在使用MQTT進行資料傳遞時，會需要一個代理人，也就是MQTT Broker，作為訂閱/發布的橋樑，Mosquitto Server是一個開源的MQTT的Server，本篇筆記紀錄在Windows下如何安裝並開啟MQTT Server\n\n\n環境\n\n\n * Windows10 x64 2004\n * mosquitto-1.6.12a\n\n\n\n下載\n\n\n進入Mosquitto-Download下載頁面進行下載\n\n\n\n\n\n安裝\n\n\n點擊已下載完成的安裝檔進行安裝\n\n\n\n\n\n可選擇安裝路徑\n\n\n\n安裝完成\n\n\n\n\n\n啟動\n\n\n使用工作管理員或執行開啟服務功能\n\n\n\n使用工作管理員開啟服務\n\n\n在開始列點選右鍵，點擊\"工作管理員\"以開啟\n\n\n\n\n\n使用執行開啟服務\n\n\n按下快捷鍵windows+R並輸入services.msc開啟服務功能\n\n\n\n\n尋找mosquitto並點選右鍵啟動服務\n\n\n\n\n\n\n\n查看伺服器狀態\n\n\n在終端機輸入netstat -an查看作用中的連線，以檢查伺服器是否正常運行\n\n\n\n\n\n在防火牆中開啟連接埠\n\n\n進入控制台 > 系統及安全性 > Windows Defender防火牆 > 進階設定，或直接按下快捷鍵windows+R並輸入WF.msc，開啟具有進階安全性的 Windows Defender 防火牆\n\n\n在輸入規則中點選新增規則\n\n\n\n建立指定連接埠的規則\n\n\n\n輸入1883連接埠進行設定\n\n\n\n\n\n\n\n指定規則名稱\n\n\n\n\n\n安裝完成\n\n\n完成以上設定後就可以透過1883連接埠對MQTT Server進行連線啦\n","feature_image":"__GHOST_URL__/content/images/2020/11/MQTT.png","featured":0,"type":"post","status":"published","locale":null,"visibility":"public","email_recipient_filter":"none","created_at":"2020-11-24 17:48:25","created_by":"1","updated_at":"2020-11-24 18:53:17","updated_by":null,"published_at":"2020-11-24 18:53:17","published_by":"1","custom_excerpt":"在使用MQTT進行資料傳遞時，會需要一個代理人，也就是MQTT Broker，作為訂閱/發布的橋樑，Mosquitto Server是一個開源的MQTT的Server，本篇筆記紀錄在Windows下如何安裝並開啟MQTT Server","codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null,"newsletter_id":null},{"id":"635a812457207246b927a81c","uuid":"4467cc8e-35f2-492d-bc4c-d0251bb4f3c4","title":"[IDE]在Visual Studio Code中使用MSYS作為終端機","slug":"ide-vscode-terminal-using-msys","mobiledoc":"{\"version\":\"0.3.1\",\"atoms\":[],\"cards\":[[\"markdown\",{\"markdown\":\"因為需要用到Makefile的緣故，而windows沒有提供相關的功能，所以希望能夠把Visual studio code預設的powershell改為MSYS作為終端機，便於make指令的操作\\n\\n## 環境\\n- Windows10 x64 2004\\n- MSYS2\\n- Visual Studio Code 1.52.1\\n\\n## 開啟Visual studio code的settings.json\\n### 開啟設定介面\\n#### 方法1 : 使用選單開啟\\n點選左上角的File > Preferences > Settings\\n![1](__GHOST_URL__/content/images/2021/01/1.png)\\n#### 方法2 : 使用快捷鍵開啟\\n點擊空白處並按下快捷鍵`ctrl`+`,`\\n\\n### 設定settings.json\\n點選右上角的OpenSettings(JSON)按鈕\\n![2](__GHOST_URL__/content/images/2021/01/2.png)\\n\\n### 在大括號中加入以下設定\\n```json\\n    \\\"terminal.integrated.shell.windows\\\": \\\"C:\\\\\\\\msys64\\\\\\\\usr\\\\\\\\bin\\\\\\\\bash.exe\\\",\\n    \\\"terminal.integrated.shellArgs.windows\\\": [\\\"--login\\\", \\\"-i\\\"],\\n```\\n*注意! \\\"terminal.integrated.shell.windows\\\"設定的路徑需依照自己電腦上MSYS的路徑進行設定*\\n![3](__GHOST_URL__/content/images/2021/01/3.png)\\n\\n### 完成\\n修改後重新開啟終端機就可以使用MSYS2作為終端機了\\n![4](__GHOST_URL__/content/images/2021/01/4.png)\"}]],\"markups\":[],\"sections\":[[10,0],[1,\"p\",[]]],\"ghostVersion\":\"3.0\"}","lexical":null,"html":"<!--kg-card-begin: markdown--><p>因為需要用到Makefile的緣故，而windows沒有提供相關的功能，所以希望能夠把Visual studio code預設的powershell改為MSYS作為終端機，便於make指令的操作</p>\n<h2 id=\"\">環境</h2>\n<ul>\n<li>Windows10 x64 2004</li>\n<li>MSYS2</li>\n<li>Visual Studio Code 1.52.1</li>\n</ul>\n<h2 id=\"visualstudiocodesettingsjson\">開啟Visual studio code的settings.json</h2>\n<h3 id=\"\">開啟設定介面</h3>\n<h4 id=\"1\">方法1 : 使用選單開啟</h4>\n<p>點選左上角的File &gt; Preferences &gt; Settings<br>\n<img src=\"__GHOST_URL__/content/images/2021/01/1.png\" alt=\"1\" loading=\"lazy\"></p>\n<h4 id=\"2\">方法2 : 使用快捷鍵開啟</h4>\n<p>點擊空白處並按下快捷鍵<code>ctrl</code>+<code>,</code></p>\n<h3 id=\"settingsjson\">設定settings.json</h3>\n<p>點選右上角的OpenSettings(JSON)按鈕<br>\n<img src=\"__GHOST_URL__/content/images/2021/01/2.png\" alt=\"2\" loading=\"lazy\"></p>\n<h3 id=\"\">在大括號中加入以下設定</h3>\n<pre><code class=\"language-json\">    &quot;terminal.integrated.shell.windows&quot;: &quot;C:\\\\msys64\\\\usr\\\\bin\\\\bash.exe&quot;,\n    &quot;terminal.integrated.shellArgs.windows&quot;: [&quot;--login&quot;, &quot;-i&quot;],\n</code></pre>\n<p><em>注意! &quot;terminal.integrated.shell.windows&quot;設定的路徑需依照自己電腦上MSYS的路徑進行設定</em><br>\n<img src=\"__GHOST_URL__/content/images/2021/01/3.png\" alt=\"3\" loading=\"lazy\"></p>\n<h3 id=\"\">完成</h3>\n<p>修改後重新開啟終端機就可以使用MSYS2作為終端機了<br>\n<img src=\"__GHOST_URL__/content/images/2021/01/4.png\" alt=\"4\" loading=\"lazy\"></p>\n<!--kg-card-end: markdown-->","comment_id":"60095c7f31b2a401081db783","plaintext":"因為需要用到Makefile的緣故，而windows沒有提供相關的功能，所以希望能夠把Visual studio code預設的powershell改為MSYS作為終端機，便於make指令的操作\n\n\n\n環境\n\n\n * Windows10 x64 2004\n * MSYS2\n * Visual Studio Code 1.52.1\n\n\n\n開啟Visual studio code的settings.json\n\n\n\n開啟設定介面\n\n\n方法1 : 使用選單開啟\n\n\n點選左上角的File > Preferences > Settings\n\n\n\n\n方法2 : 使用快捷鍵開啟\n\n\n點擊空白處並按下快捷鍵ctrl+,\n\n\n\n設定settings.json\n\n\n點選右上角的OpenSettings(JSON)按鈕\n\n\n\n\n\n在大括號中加入以下設定\n\n\n    \"terminal.integrated.shell.windows\": \"C:\\\\msys64\\\\usr\\\\bin\\\\bash.exe\",\n    \"terminal.integrated.shellArgs.windows\": [\"--login\", \"-i\"],\n\n\n\n注意! \"terminal.integrated.shell.windows\"設定的路徑需依照自己電腦上MSYS的路徑進行設定\n\n\n\n\n\n完成\n\n\n修改後重新開啟終端機就可以使用MSYS2作為終端機了\n\n\n","feature_image":"__GHOST_URL__/content/images/2021/01/visualStudioCode.png","featured":0,"type":"post","status":"published","locale":null,"visibility":"public","email_recipient_filter":"none","created_at":"2021-01-21 10:50:39","created_by":"1","updated_at":"2021-01-21 11:04:37","updated_by":null,"published_at":"2021-01-21 10:59:50","published_by":"1","custom_excerpt":"因為需要用到Makefile的緣故，而windows沒有提供相關的功能，所以希望能夠把Visual studio code預設的powershell改為MSYS作為終端機，便於make指令的操作","codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null,"newsletter_id":null},{"id":"635a812457207246b927a81d","uuid":"32131f9e-2bcd-4102-aae0-e5d2bd6e4473","title":"[ESP8266]ESP-01韌體燒錄","slug":"flash-firmware-on-esp01","mobiledoc":"{\"version\":\"0.3.1\",\"atoms\":[],\"cards\":[[\"markdown\",{\"markdown\":\"## 材料\\n### 硬體\\n- ESP-01s\\n- ESP-01燒錄器\\n\\n### 軟體\\n- Flash Download Tools (ESP8266 & ESP32 & ESP32-S2) V3.8.5\\n- RealTerm 2.0.0.70\\n\\n### SDK\\n- ESP8266 NONOS SDK V3.0.4\\n\\n### AT指令集(含韌體燒錄位址說明)\\n- ESP8266 Non-OS AT Instruction Set V3.0.3\\n\\n## 準備所需軟體及韌體\\n點擊下方連結下載燒錄工具、韌體及指令集\\n- [ESP8266 NONOS SDK](https://www.espressif.com/en/support/download/sdks-demos)\\n- [Flash Download Tools](https://www.espressif.com/en/support/download/other-tools)\\n- [ESP8266 Non-OS AT Instruction Set](https://www.espressif.com/en/support/documents/technical-documents)\\n\\n## 連接ESP-01\\n將ESP-01插在燒錄器上，並將燒錄器插入USB Port\\n接著按下`Windows鍵+R`，輸入**devmgmt.msc**按下確定，進入裝置管理員查看燒錄器的COM Port(範例為COM7)\\n![1](__GHOST_URL__/content/images/2021/02/1.png)\\n\\n\\n## 設定燒錄資訊\\n點擊`flash_download_tool_3.8.5.exe`執行燒錄程式\\n![2](__GHOST_URL__/content/images/2021/02/2.png)\\n\\n選擇`Developer Mode`\\n![3](__GHOST_URL__/content/images/2021/02/3.png)\\n\\n選擇`ESP8266 DownloadTool`\\n![4](__GHOST_URL__/content/images/2021/02/4.png)\\n\\n韌體燒錄位址表在`AT指令集`裡可以找到，在**1.2. Downloading AT Firmware into the Flash**裡的**1.2.4. 8 Mbit Flash**有詳細說明\\n![5](__GHOST_URL__/content/images/2021/02/5.png)\\n\\n![6](__GHOST_URL__/content/images/2021/02/6.png)\\n\\n\\n解壓縮已經下載好的`ESP8266_NONOS_SDK-3.0.4`檔案，在裡面尋找bin資料夾，裡面的檔案就是燒錄所需的檔案，依照韌體燒錄位址表進行設定，將特定檔案對上相對的位址，並將左邊方格打勾\\n\\n`FLASH SIZE`記得要改為8Mbit(ESP-01的Flash size為1MB，也就是8Mbit)\\n\\n右下角的COM選單選擇剛才在裝置管理員看到的COM Port編號\\n\\nBAUD設為**115200**\\n\\n![7](__GHOST_URL__/content/images/2021/02/7.png)\\n\\n## 執行韌體燒錄程式\\n\\n設定完成之後按下`START`按鈕便可開始進行燒錄\\n\\n若有抓到ESP-01會顯示**Download下載中...**，後面的方格也會顯示ESP-01的MAC位址\\n\\n![8](__GHOST_URL__/content/images/2021/02/8.png)\\n\\n若燒錄成功會顯示**FINISH完成**\\n\\n![9](__GHOST_URL__/content/images/2021/02/9.png)\\n\\n\\n\\n## 檢查燒錄狀態\\n開啟RealTerm終端機程式\\n\\n在**Display**頁籤設定Display As **Ansi**\\n![10](__GHOST_URL__/content/images/2021/02/10.png)\\n\\n\\n在**Port**頁籤設定\\n- Baud為**115200**(若無回應可嘗試其他BaudRate)\\n- Port為USB燒錄器的COM Port編號(可至裝置管理員確認，或移除裝置後重新插上以便確認)\\n- 重新按壓Open按鈕，確認為壓下狀態(有任何更改都可以重新按壓，確保狀態有被改變)\\n- 確認右下角狀態是否正確\\n\\n![11](__GHOST_URL__/content/images/2021/02/11.png)\\n\\n在**Send**頁籤**勾選EOL的前兩個**，輸入要傳送的指令後按下Send ASCII即可傳送指令\\n- AT - 測試AT是否已啟動\\n- AT+GMR - 查詢AT及SDK的版本資訊\\n\\n![12](__GHOST_URL__/content/images/2021/02/12.png)\\n\\n![13](__GHOST_URL__/content/images/2021/02/13.png)\\n\\n若送出指令AT有返回OK，且送出指令AT+GMR有返回版本資訊便可開始使用ESP-01了\\n\\n\\n## 參考資料\\n[ESPRESSIF](https://www.espressif.com/en)\\n[ESP8266 NONOS SDK](https://www.espressif.com/en/support/download/sdks-demos)\\n[Flash Download Tools](https://www.espressif.com/en/support/download/other-tools)\\n[ESP8266 Non-OS AT Instruction Set](https://www.espressif.com/en/support/documents/technical-documents)\\n[ESP8266 ESP-01s測試(01)利用USB 轉TTL模組](https://laoweizz.blogspot.com/2017/02/esp8266-esp-01s-01-usb-ttl-esp6288-wifi.html)\"}]],\"markups\":[],\"sections\":[[1,\"p\",[[0,[],0,\"在使用ESP8266有時會遇到兩種情況，原廠出貨的韌體怪怪的導致無法使用AT指令跟ESP8266溝通，或是已經把自己的程式燒進去之後又想重新使用AT指令的功能，這時候就需要重新燒錄韌體，這篇筆記紀錄使用ESP-01作為範例的韌體燒錄及AT指令驗證步驟\"]]],[10,0],[1,\"p\",[]]],\"ghostVersion\":\"3.0\"}","lexical":null,"html":"<p>在使用ESP8266有時會遇到兩種情況，原廠出貨的韌體怪怪的導致無法使用AT指令跟ESP8266溝通，或是已經把自己的程式燒進去之後又想重新使用AT指令的功能，這時候就需要重新燒錄韌體，這篇筆記紀錄使用ESP-01作為範例的韌體燒錄及AT指令驗證步驟</p><!--kg-card-begin: markdown--><h2 id=\"\">材料</h2>\n<h3 id=\"\">硬體</h3>\n<ul>\n<li>ESP-01s</li>\n<li>ESP-01燒錄器</li>\n</ul>\n<h3 id=\"\">軟體</h3>\n<ul>\n<li>Flash Download Tools (ESP8266 &amp; ESP32 &amp; ESP32-S2) V3.8.5</li>\n<li>RealTerm 2.0.0.70</li>\n</ul>\n<h3 id=\"sdk\">SDK</h3>\n<ul>\n<li>ESP8266 NONOS SDK V3.0.4</li>\n</ul>\n<h3 id=\"at\">AT指令集(含韌體燒錄位址說明)</h3>\n<ul>\n<li>ESP8266 Non-OS AT Instruction Set V3.0.3</li>\n</ul>\n<h2 id=\"\">準備所需軟體及韌體</h2>\n<p>點擊下方連結下載燒錄工具、韌體及指令集</p>\n<ul>\n<li><a href=\"https://www.espressif.com/en/support/download/sdks-demos\">ESP8266 NONOS SDK</a></li>\n<li><a href=\"https://www.espressif.com/en/support/download/other-tools\">Flash Download Tools</a></li>\n<li><a href=\"https://www.espressif.com/en/support/documents/technical-documents\">ESP8266 Non-OS AT Instruction Set</a></li>\n</ul>\n<h2 id=\"esp01\">連接ESP-01</h2>\n<p>將ESP-01插在燒錄器上，並將燒錄器插入USB Port<br>\n接著按下<code>Windows鍵+R</code>，輸入<strong>devmgmt.msc</strong>按下確定，進入裝置管理員查看燒錄器的COM Port(範例為COM7)<br>\n<img src=\"__GHOST_URL__/content/images/2021/02/1.png\" alt=\"1\" loading=\"lazy\"></p>\n<h2 id=\"\">設定燒錄資訊</h2>\n<p>點擊<code>flash_download_tool_3.8.5.exe</code>執行燒錄程式<br>\n<img src=\"__GHOST_URL__/content/images/2021/02/2.png\" alt=\"2\" loading=\"lazy\"></p>\n<p>選擇<code>Developer Mode</code><br>\n<img src=\"__GHOST_URL__/content/images/2021/02/3.png\" alt=\"3\" loading=\"lazy\"></p>\n<p>選擇<code>ESP8266 DownloadTool</code><br>\n<img src=\"__GHOST_URL__/content/images/2021/02/4.png\" alt=\"4\" loading=\"lazy\"></p>\n<p>韌體燒錄位址表在<code>AT指令集</code>裡可以找到，在<strong>1.2. Downloading AT Firmware into the Flash</strong>裡的<strong>1.2.4. 8 Mbit Flash</strong>有詳細說明<br>\n<img src=\"__GHOST_URL__/content/images/2021/02/5.png\" alt=\"5\" loading=\"lazy\"></p>\n<p><img src=\"__GHOST_URL__/content/images/2021/02/6.png\" alt=\"6\" loading=\"lazy\"></p>\n<p>解壓縮已經下載好的<code>ESP8266_NONOS_SDK-3.0.4</code>檔案，在裡面尋找bin資料夾，裡面的檔案就是燒錄所需的檔案，依照韌體燒錄位址表進行設定，將特定檔案對上相對的位址，並將左邊方格打勾</p>\n<p><code>FLASH SIZE</code>記得要改為8Mbit(ESP-01的Flash size為1MB，也就是8Mbit)</p>\n<p>右下角的COM選單選擇剛才在裝置管理員看到的COM Port編號</p>\n<p>BAUD設為<strong>115200</strong></p>\n<p><img src=\"__GHOST_URL__/content/images/2021/02/7.png\" alt=\"7\" loading=\"lazy\"></p>\n<h2 id=\"\">執行韌體燒錄程式</h2>\n<p>設定完成之後按下<code>START</code>按鈕便可開始進行燒錄</p>\n<p>若有抓到ESP-01會顯示<strong>Download下載中...</strong>，後面的方格也會顯示ESP-01的MAC位址</p>\n<p><img src=\"__GHOST_URL__/content/images/2021/02/8.png\" alt=\"8\" loading=\"lazy\"></p>\n<p>若燒錄成功會顯示<strong>FINISH完成</strong></p>\n<p><img src=\"__GHOST_URL__/content/images/2021/02/9.png\" alt=\"9\" loading=\"lazy\"></p>\n<h2 id=\"\">檢查燒錄狀態</h2>\n<p>開啟RealTerm終端機程式</p>\n<p>在<strong>Display</strong>頁籤設定Display As <strong>Ansi</strong><br>\n<img src=\"__GHOST_URL__/content/images/2021/02/10.png\" alt=\"10\" loading=\"lazy\"></p>\n<p>在<strong>Port</strong>頁籤設定</p>\n<ul>\n<li>Baud為<strong>115200</strong>(若無回應可嘗試其他BaudRate)</li>\n<li>Port為USB燒錄器的COM Port編號(可至裝置管理員確認，或移除裝置後重新插上以便確認)</li>\n<li>重新按壓Open按鈕，確認為壓下狀態(有任何更改都可以重新按壓，確保狀態有被改變)</li>\n<li>確認右下角狀態是否正確</li>\n</ul>\n<p><img src=\"__GHOST_URL__/content/images/2021/02/11.png\" alt=\"11\" loading=\"lazy\"></p>\n<p>在<strong>Send</strong>頁籤<strong>勾選EOL的前兩個</strong>，輸入要傳送的指令後按下Send ASCII即可傳送指令</p>\n<ul>\n<li>AT - 測試AT是否已啟動</li>\n<li>AT+GMR - 查詢AT及SDK的版本資訊</li>\n</ul>\n<p><img src=\"__GHOST_URL__/content/images/2021/02/12.png\" alt=\"12\" loading=\"lazy\"></p>\n<p><img src=\"__GHOST_URL__/content/images/2021/02/13.png\" alt=\"13\" loading=\"lazy\"></p>\n<p>若送出指令AT有返回OK，且送出指令AT+GMR有返回版本資訊便可開始使用ESP-01了</p>\n<h2 id=\"\">參考資料</h2>\n<p><a href=\"https://www.espressif.com/en\">ESPRESSIF</a><br>\n<a href=\"https://www.espressif.com/en/support/download/sdks-demos\">ESP8266 NONOS SDK</a><br>\n<a href=\"https://www.espressif.com/en/support/download/other-tools\">Flash Download Tools</a><br>\n<a href=\"https://www.espressif.com/en/support/documents/technical-documents\">ESP8266 Non-OS AT Instruction Set</a><br>\n<a href=\"https://laoweizz.blogspot.com/2017/02/esp8266-esp-01s-01-usb-ttl-esp6288-wifi.html\">ESP8266 ESP-01s測試(01)利用USB 轉TTL模組</a></p>\n<!--kg-card-end: markdown-->","comment_id":"6033ae12b40e5a0c5c7b4eac","plaintext":"在使用ESP8266有時會遇到兩種情況，原廠出貨的韌體怪怪的導致無法使用AT指令跟ESP8266溝通，或是已經把自己的程式燒進去之後又想重新使用AT指令的功能，這時候就需要重新燒錄韌體，這篇筆記紀錄使用ESP-01作為範例的韌體燒錄及AT指令驗證步驟\n\n\n材料\n\n\n\n硬體\n\n\n * ESP-01s\n * ESP-01燒錄器\n\n\n\n軟體\n\n\n * Flash Download Tools (ESP8266 & ESP32 & ESP32-S2) V3.8.5\n * RealTerm 2.0.0.70\n\n\n\nSDK\n\n\n * ESP8266 NONOS SDK V3.0.4\n\n\n\nAT指令集(含韌體燒錄位址說明)\n\n\n * ESP8266 Non-OS AT Instruction Set V3.0.3\n\n\n\n準備所需軟體及韌體\n\n\n點擊下方連結下載燒錄工具、韌體及指令集\n\n\n * ESP8266 NONOS SDK\n * Flash Download Tools\n * ESP8266 Non-OS AT Instruction Set\n\n\n\n連接ESP-01\n\n\n將ESP-01插在燒錄器上，並將燒錄器插入USB Port\n\n接著按下Windows鍵+R，輸入devmgmt.msc按下確定，進入裝置管理員查看燒錄器的COM Port(範例為COM7)\n\n\n\n\n\n設定燒錄資訊\n\n\n點擊flash_download_tool_3.8.5.exe執行燒錄程式\n\n\n\n\n選擇Developer Mode\n\n\n\n\n選擇ESP8266 DownloadTool\n\n\n\n\n韌體燒錄位址表在AT指令集裡可以找到，在1.2. Downloading AT Firmware into the Flash裡的1.2.4. 8 Mbit Flash有詳細說明\n\n\n\n\n\n\n\n解壓縮已經下載好的ESP8266_NONOS_SDK-3.0.4檔案，在裡面尋找bin資料夾，裡面的檔案就是燒錄所需的檔案，依照韌體燒錄位址表進行設定，將特定檔案對上相對的位址，並將左邊方格打勾\n\n\nFLASH SIZE記得要改為8Mbit(ESP-01的Flash size為1MB，也就是8Mbit)\n\n\n右下角的COM選單選擇剛才在裝置管理員看到的COM Port編號\n\n\nBAUD設為115200\n\n\n\n\n\n\n執行韌體燒錄程式\n\n\n設定完成之後按下START按鈕便可開始進行燒錄\n\n\n若有抓到ESP-01會顯示Download下載中...，後面的方格也會顯示ESP-01的MAC位址\n\n\n\n\n\n若燒錄成功會顯示FINISH完成\n\n\n\n\n\n\n檢查燒錄狀態\n\n\n開啟RealTerm終端機程式\n\n\n在Display頁籤設定Display As Ansi\n\n\n\n\n在Port頁籤設定\n\n\n * Baud為115200(若無回應可嘗試其他BaudRate)\n * Port為USB燒錄器的COM Port編號(可至裝置管理員確認，或移除裝置後重新插上以便確認)\n * 重新按壓Open按鈕，確認為壓下狀態(有任何更改都可以重新按壓，確保狀態有被改變)\n * 確認右下角狀態是否正確\n\n\n\n\n\n在Send頁籤勾選EOL的前兩個，輸入要傳送的指令後按下Send ASCII即可傳送指令\n\n\n * AT - 測試AT是否已啟動\n * AT+GMR - 查詢AT及SDK的版本資訊\n\n\n\n\n\n\n\n\n若送出指令AT有返回OK，且送出指令AT+GMR有返回版本資訊便可開始使用ESP-01了\n\n\n\n參考資料\n\n\nESPRESSIF\n\nESP8266 NONOS SDK\n\nFlash Download Tools\n\nESP8266 Non-OS AT Instruction Set\n\nESP8266 ESP-01s測試(01)利用USB 轉TTL模組\n","feature_image":"__GHOST_URL__/content/images/2021/02/pexels-skitterphoto-1448561.jpg","featured":0,"type":"post","status":"published","locale":null,"visibility":"public","email_recipient_filter":"none","created_at":"2021-02-22 13:13:54","created_by":"1","updated_at":"2021-02-22 13:51:29","updated_by":null,"published_at":"2021-02-22 13:42:24","published_by":"1","custom_excerpt":"在使用ESP8266有時會遇到兩種情況，原廠出貨的韌體怪怪的導致無法使用AT指令跟ESP8266溝通，或是已經把自己的程式燒進去之後又想重新使用AT指令的功能，這時候就需要重新燒錄韌體，這篇筆記紀錄使用ESP-01作為範例的韌體燒錄及AT指令驗證步驟","codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null,"newsletter_id":null},{"id":"635a812457207246b927a81e","uuid":"0d206f1e-5738-429c-87f0-6e26d2bac94b","title":"[Zsh]更改Ubuntu終端機樣式","slug":"zsh-ubuntu-init","mobiledoc":"{\"version\":\"0.3.1\",\"atoms\":[],\"cards\":[[\"markdown\",{\"markdown\":\"近期無意間在網路上發現[Bullet Train](https://github.com/caiogondim/bullet-train.zsh)這個theme，一下子就被燒到了，覺得非常好看，於是決定來將自己的terminal也改成那樣子，提昇~~爽度~~工作效率\\n\\n## 環境\\n- Ubuntu 20.04.2LTS\\n\\n\\n## 安裝\\n\\n更新套件清單\\n```shell\\n$ sudo apt-get update #更新套件清單\\n$ sudo apt-get upgrade #根據已經更新的套件清單，比對是否更新套件\\n```\\n\\n安裝Zsh\\n```shell\\n$ sudo apt-get install zsh\\n```\\n\\n查看Zsh是否成功安裝\\n```shell\\n$ cat /etc/shells\\n```\\n\\n安裝oh-my-zsh\\n```shell\\n$ sh -c \\\"$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)\\\"\\n```\\n\\n安裝完會顯示oh-my-zsh的歡迎畫面\\n\\n## 修改設定\\n目前預設的還是Bash Shell，要將它改成Zsh\\n```shell\\n$ chsh -s /bin/zsh\\n```\\n修改完成後須重新登入\\n\\n## 安裝Theme\\n前往[Bullet train](https://github.com/caiogondim/bullet-train.zsh)下載[主題](https://raw.githubusercontent.com/caiogondim/bullet-train-oh-my-zsh-theme/master/bullet-train.zsh-theme)\\n\\n將下載好的主題**bullet-train.zsh-theme**放入`.oh-my-zsh/themes`目錄內\\n\\n接著編輯`~/.zshrc`，將**ZSH_THEME**設定為\\\"bullet-train\\\"\\n\\n## 安裝powerline\\n\\n```shell\\n$ sudo apt-get install powerline\\n$ sudo apt-get install fonts-powerline\\n```\\n\\n## 安裝Melso字型\\n```shell\\n$ git clone https://github.com/powerline/fonts.git --depth=1\\n$ cd fonts \\n$ ./install.sh\\n```\\n\\n右鍵點選Terminal>偏好設定>文字>自訂字型，選擇**Meslo LG S for Powerline Bold**更改字型\\n\\n\\n## 參考資料\\n\\n- [在 Ubuntu 18.04 LTS / 16.04 LTS 中安裝使用 Oh-My-Zsh](https://medium.com/@wifferlin0505/%E5%9C%A8-ubuntu-16-04-lts-%E4%B8%AD%E5%AE%89%E8%A3%9D%E4%BD%BF%E7%94%A8-oh-my-zsh-cf92203ca8a2)\\n- [用Oh My Zsh把iTerm變美美](https://medium.com/@hazelwu/%E7%94%A8oh-my-zsh%E6%8A%8Aiterm%E8%AE%8A%E7%BE%8E%E7%BE%8E-8a18daa8eac)\\n- [Github - Bullet Train for oh-my-zsh](https://github.com/caiogondim/bullet-train.zsh)\\n- [Github - Powerline fonts](https://github.com/powerline/fonts)\\n- [agnoster.zsh-theme](https://github.com/agnoster/agnoster-zsh-theme)\"}]],\"markups\":[],\"sections\":[[10,0],[1,\"p\",[]]],\"ghostVersion\":\"3.0\"}","lexical":null,"html":"<!--kg-card-begin: markdown--><p>近期無意間在網路上發現<a href=\"https://github.com/caiogondim/bullet-train.zsh\">Bullet Train</a>這個theme，一下子就被燒到了，覺得非常好看，於是決定來將自己的terminal也改成那樣子，提昇<s>爽度</s>工作效率</p>\n<h2 id=\"\">環境</h2>\n<ul>\n<li>Ubuntu 20.04.2LTS</li>\n</ul>\n<h2 id=\"\">安裝</h2>\n<p>更新套件清單</p>\n<pre><code class=\"language-shell\">$ sudo apt-get update #更新套件清單\n$ sudo apt-get upgrade #根據已經更新的套件清單，比對是否更新套件\n</code></pre>\n<p>安裝Zsh</p>\n<pre><code class=\"language-shell\">$ sudo apt-get install zsh\n</code></pre>\n<p>查看Zsh是否成功安裝</p>\n<pre><code class=\"language-shell\">$ cat /etc/shells\n</code></pre>\n<p>安裝oh-my-zsh</p>\n<pre><code class=\"language-shell\">$ sh -c &quot;$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)&quot;\n</code></pre>\n<p>安裝完會顯示oh-my-zsh的歡迎畫面</p>\n<h2 id=\"\">修改設定</h2>\n<p>目前預設的還是Bash Shell，要將它改成Zsh</p>\n<pre><code class=\"language-shell\">$ chsh -s /bin/zsh\n</code></pre>\n<p>修改完成後須重新登入</p>\n<h2 id=\"theme\">安裝Theme</h2>\n<p>前往<a href=\"https://github.com/caiogondim/bullet-train.zsh\">Bullet train</a>下載<a href=\"https://raw.githubusercontent.com/caiogondim/bullet-train-oh-my-zsh-theme/master/bullet-train.zsh-theme\">主題</a></p>\n<p>將下載好的主題<strong>bullet-train.zsh-theme</strong>放入<code>.oh-my-zsh/themes</code>目錄內</p>\n<p>接著編輯<code>~/.zshrc</code>，將<strong>ZSH_THEME</strong>設定為&quot;bullet-train&quot;</p>\n<h2 id=\"powerline\">安裝powerline</h2>\n<pre><code class=\"language-shell\">$ sudo apt-get install powerline\n$ sudo apt-get install fonts-powerline\n</code></pre>\n<h2 id=\"melso\">安裝Melso字型</h2>\n<pre><code class=\"language-shell\">$ git clone https://github.com/powerline/fonts.git --depth=1\n$ cd fonts \n$ ./install.sh\n</code></pre>\n<p>右鍵點選Terminal&gt;偏好設定&gt;文字&gt;自訂字型，選擇<strong>Meslo LG S for Powerline Bold</strong>更改字型</p>\n<h2 id=\"\">參考資料</h2>\n<ul>\n<li><a href=\"https://medium.com/@wifferlin0505/%E5%9C%A8-ubuntu-16-04-lts-%E4%B8%AD%E5%AE%89%E8%A3%9D%E4%BD%BF%E7%94%A8-oh-my-zsh-cf92203ca8a2\">在 Ubuntu 18.04 LTS / 16.04 LTS 中安裝使用 Oh-My-Zsh</a></li>\n<li><a href=\"https://medium.com/@hazelwu/%E7%94%A8oh-my-zsh%E6%8A%8Aiterm%E8%AE%8A%E7%BE%8E%E7%BE%8E-8a18daa8eac\">用Oh My Zsh把iTerm變美美</a></li>\n<li><a href=\"https://github.com/caiogondim/bullet-train.zsh\">Github - Bullet Train for oh-my-zsh</a></li>\n<li><a href=\"https://github.com/powerline/fonts\">Github - Powerline fonts</a></li>\n<li><a href=\"https://github.com/agnoster/agnoster-zsh-theme\">agnoster.zsh-theme</a></li>\n</ul>\n<!--kg-card-end: markdown-->","comment_id":"60ba55154b0bccce2a8deb75","plaintext":"近期無意間在網路上發現Bullet Train這個theme，一下子就被燒到了，覺得非常好看，於是決定來將自己的terminal也改成那樣子，提昇爽度工作效率\n\n\n\n環境\n\n\n * Ubuntu 20.04.2LTS\n\n\n\n安裝\n\n\n更新套件清單\n\n\n$ sudo apt-get update #更新套件清單\n$ sudo apt-get upgrade #根據已經更新的套件清單，比對是否更新套件\n\n\n\n安裝Zsh\n\n\n$ sudo apt-get install zsh\n\n\n\n查看Zsh是否成功安裝\n\n\n$ cat /etc/shells\n\n\n\n安裝oh-my-zsh\n\n\n$ sh -c \"$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)\"\n\n\n\n安裝完會顯示oh-my-zsh的歡迎畫面\n\n\n\n修改設定\n\n\n目前預設的還是Bash Shell，要將它改成Zsh\n\n\n$ chsh -s /bin/zsh\n\n\n\n修改完成後須重新登入\n\n\n\n安裝Theme\n\n\n前往Bullet train下載主題\n\n\n將下載好的主題bullet-train.zsh-theme放入.oh-my-zsh/themes目錄內\n\n\n接著編輯~/.zshrc，將ZSH_THEME設定為\"bullet-train\"\n\n\n\n安裝powerline\n\n\n$ sudo apt-get install powerline\n$ sudo apt-get install fonts-powerline\n\n\n\n\n安裝Melso字型\n\n\n$ git clone https://github.com/powerline/fonts.git --depth=1\n$ cd fonts \n$ ./install.sh\n\n\n\n右鍵點選Terminal>偏好設定>文字>自訂字型，選擇Meslo LG S for Powerline Bold更改字型\n\n\n\n參考資料\n\n\n * 在 Ubuntu 18.04 LTS / 16.04 LTS 中安裝使用 Oh-My-Zsh\n * 用Oh My Zsh把iTerm變美美\n * Github - Bullet Train for oh-my-zsh\n * Github - Powerline fonts\n * agnoster.zsh-theme\n","feature_image":"__GHOST_URL__/content/images/2021/06/2021-06-05-00-26-14-------1.png","featured":0,"type":"post","status":"published","locale":null,"visibility":"public","email_recipient_filter":"none","created_at":"2021-06-04 16:30:13","created_by":"1","updated_at":"2021-06-04 16:33:34","updated_by":null,"published_at":"2021-06-04 16:32:31","published_by":"1","custom_excerpt":"近期無意間在網路上發現Bullet Train這個theme，一下子就被燒到了，覺得非常好看，於是決定來將自己的terminal也改成那樣子，提昇~~爽度~~工作效率","codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null,"newsletter_id":null},{"id":"635a812457207246b927a81f","uuid":"93df952c-70ce-40c0-93c7-2d8374e59b9a","title":"[Golang]MySQL Error 1040: Too Many Connections 錯誤處理","slug":"golang-mysql-error-1040","mobiledoc":"{\"version\":\"0.3.1\",\"atoms\":[],\"cards\":[[\"markdown\",{\"markdown\":\"前陣子寫了一個golang程式用來上傳資料到MySQL，起初程式運作都非常良好，過了一陣子開始出現代號為1040的Too Many Connections錯誤，我們一起來看看發生了甚麼事。\\n\\n## 查看MySQL的連線數量\\n在MySQL下SQL查詢\\n\\n```sql\\nSHOW STATUS LIKE '%connected';\\n```\\n查詢結果如下\\n| Variable_name     | Value |\\n| ----------------- |:----- |\\n| Slaves_connected  | 0     |\\n| Threads_connected | 151   |\\n\\n我們可以發現到Threads_connected已經到達151了，MySQL預設的最大允許連線數量為151，可以使用以下指令查詢最大允許連線數量\\n```sql\\nSHOW VARIABLES LIKE 'max_connections';\\n```\\n\\n## 檢查程式碼\\n\\n後來檢查程式碼發現在database/sql這個package有兩個struct，一個是DB，另一個是Conn，我將DB物件的連線關掉而沒有關閉Conn物件的，導致連線數一直增加，造成1040錯誤。\\n\\n### 錯誤程式碼範例\\n```go\\ndb, err := sql.Open(\\\"mysql\\\", \\\"user:password@tcp(127.0.0.1)/testdb?charset=utf8\\\")\\nif err != nil {\\n    fmt.Println(err)\\n}\\ndefer db.Close()\\n\\n_, err = db.Query(\\\"call SP(?,?,?,?)\\\", \\\"A\\\", \\\"B\\\", \\\"C\\\", \\\"D\\\")\\nif err != nil {\\n    fmt.Println(err)\\n}\\n```\\n\\n我們可以看到上面關閉的是db.Close()，這樣並不能正確關閉連線，必須關閉db.Query的連線才能正確的降低連線卡住的數量\\n\\n### 修正程式碼範例\\n```go\\ndb, err := sql.Open(\\\"mysql\\\", \\\"user:password@tcp(127.0.0.1)/testdb?charset=utf8\\\")\\nif err != nil {\\n    fmt.Println(err)\\n}\\ndefer db.Close()\\n\\nconn, err := db.Query(\\\"call SP(?,?,?,?)\\\", \\\"A\\\", \\\"B\\\", \\\"C\\\", \\\"D\\\")\\nif err != nil {\\n    fmt.Println(err)\\n}\\ndefer conn.Close()\\n\\n```\\n\\n## 參考資料\\n- [stackoverflow - Is it normal to have these many connections in MySQL?](https://stackoverflow.com/questions/39452555/is-it-normal-to-have-these-many-connections-in-mysql)\"}]],\"markups\":[],\"sections\":[[10,0],[1,\"p\",[]]],\"ghostVersion\":\"3.0\"}","lexical":null,"html":"<!--kg-card-begin: markdown--><p>前陣子寫了一個golang程式用來上傳資料到MySQL，起初程式運作都非常良好，過了一陣子開始出現代號為1040的Too Many Connections錯誤，我們一起來看看發生了甚麼事。</p>\n<h2 id=\"mysql\">查看MySQL的連線數量</h2>\n<p>在MySQL下SQL查詢</p>\n<pre><code class=\"language-sql\">SHOW STATUS LIKE '%connected';\n</code></pre>\n<p>查詢結果如下</p>\n<table>\n<thead>\n<tr>\n<th>Variable_name</th>\n<th style=\"text-align:left\">Value</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Slaves_connected</td>\n<td style=\"text-align:left\">0</td>\n</tr>\n<tr>\n<td>Threads_connected</td>\n<td style=\"text-align:left\">151</td>\n</tr>\n</tbody>\n</table>\n<p>我們可以發現到Threads_connected已經到達151了，MySQL預設的最大允許連線數量為151，可以使用以下指令查詢最大允許連線數量</p>\n<pre><code class=\"language-sql\">SHOW VARIABLES LIKE 'max_connections';\n</code></pre>\n<h2 id=\"\">檢查程式碼</h2>\n<p>後來檢查程式碼發現在database/sql這個package有兩個struct，一個是DB，另一個是Conn，我將DB物件的連線關掉而沒有關閉Conn物件的，導致連線數一直增加，造成1040錯誤。</p>\n<h3 id=\"\">錯誤程式碼範例</h3>\n<pre><code class=\"language-go\">db, err := sql.Open(&quot;mysql&quot;, &quot;user:password@tcp(127.0.0.1)/testdb?charset=utf8&quot;)\nif err != nil {\n    fmt.Println(err)\n}\ndefer db.Close()\n\n_, err = db.Query(&quot;call SP(?,?,?,?)&quot;, &quot;A&quot;, &quot;B&quot;, &quot;C&quot;, &quot;D&quot;)\nif err != nil {\n    fmt.Println(err)\n}\n</code></pre>\n<p>我們可以看到上面關閉的是db.Close()，這樣並不能正確關閉連線，必須關閉db.Query的連線才能正確的降低連線卡住的數量</p>\n<h3 id=\"\">修正程式碼範例</h3>\n<pre><code class=\"language-go\">db, err := sql.Open(&quot;mysql&quot;, &quot;user:password@tcp(127.0.0.1)/testdb?charset=utf8&quot;)\nif err != nil {\n    fmt.Println(err)\n}\ndefer db.Close()\n\nconn, err := db.Query(&quot;call SP(?,?,?,?)&quot;, &quot;A&quot;, &quot;B&quot;, &quot;C&quot;, &quot;D&quot;)\nif err != nil {\n    fmt.Println(err)\n}\ndefer conn.Close()\n\n</code></pre>\n<h2 id=\"\">參考資料</h2>\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/39452555/is-it-normal-to-have-these-many-connections-in-mysql\">stackoverflow - Is it normal to have these many connections in MySQL?</a></li>\n</ul>\n<!--kg-card-end: markdown-->","comment_id":"60bf95efd94d554e3a9b2b57","plaintext":"前陣子寫了一個golang程式用來上傳資料到MySQL，起初程式運作都非常良好，過了一陣子開始出現代號為1040的Too Many Connections錯誤，我們一起來看看發生了甚麼事。\n\n\n\n查看MySQL的連線數量\n\n\n在MySQL下SQL查詢\n\n\nSHOW STATUS LIKE '%connected';\n\n\n\n查詢結果如下\n\n\n\n\n\nVariable_name\nValue\n\n\n\n\nSlaves_connected\n0\n\n\nThreads_connected\n151\n\n\n\n\n\n我們可以發現到Threads_connected已經到達151了，MySQL預設的最大允許連線數量為151，可以使用以下指令查詢最大允許連線數量\n\n\nSHOW VARIABLES LIKE 'max_connections';\n\n\n\n\n檢查程式碼\n\n\n後來檢查程式碼發現在database/sql這個package有兩個struct，一個是DB，另一個是Conn，我將DB物件的連線關掉而沒有關閉Conn物件的，導致連線數一直增加，造成1040錯誤。\n\n\n\n錯誤程式碼範例\n\n\ndb, err := sql.Open(\"mysql\", \"user:password@tcp(127.0.0.1)/testdb?charset=utf8\")\nif err != nil {\n    fmt.Println(err)\n}\ndefer db.Close()\n\n_, err = db.Query(\"call SP(?,?,?,?)\", \"A\", \"B\", \"C\", \"D\")\nif err != nil {\n    fmt.Println(err)\n}\n\n\n\n我們可以看到上面關閉的是db.Close()，這樣並不能正確關閉連線，必須關閉db.Query的連線才能正確的降低連線卡住的數量\n\n\n\n修正程式碼範例\n\n\ndb, err := sql.Open(\"mysql\", \"user:password@tcp(127.0.0.1)/testdb?charset=utf8\")\nif err != nil {\n    fmt.Println(err)\n}\ndefer db.Close()\n\nconn, err := db.Query(\"call SP(?,?,?,?)\", \"A\", \"B\", \"C\", \"D\")\nif err != nil {\n    fmt.Println(err)\n}\ndefer conn.Close()\n\n\n\n\n\n參考資料\n\n\n * stackoverflow - Is it normal to have these many connections in MySQL?\n","feature_image":"__GHOST_URL__/content/images/2021/06/golang-long.jpeg","featured":0,"type":"post","status":"published","locale":null,"visibility":"public","email_recipient_filter":"none","created_at":"2021-06-08 16:08:15","created_by":"1","updated_at":"2021-06-08 16:09:52","updated_by":null,"published_at":"2021-06-08 16:09:52","published_by":"1","custom_excerpt":"前陣子寫了一個golang程式用來上傳資料到MySQL，起初程式運作都非常良好，過了一陣子開始出現代號為1040的Too Many Connections錯誤，我們一起來看看發生了甚麼事。","codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null,"newsletter_id":null},{"id":"635a812457207246b927a820","uuid":"6603ed36-3ff9-4055-b534-db166aa5dc16","title":"[Pattern]REST API 設計規範","slug":"pattern-rest-api-design","mobiledoc":"{\"version\":\"0.3.1\",\"atoms\":[],\"cards\":[[\"markdown\",{\"markdown\":\"REST是一種架構風格，類似設計模式，使用一些原則規範應用程式的設計，以下為REST風格的一些特徵\\n\\n## 使用名詞而非動詞\\n當我們想要設計一個學生的API時，應使用名詞進行定義 \\n```javascript\\n//這是對的\\n/students/1\\n```\\n而非使用動詞定義\\n```javascript\\n//這是錯的\\n/getStudent/1\\n```\\n\\n## 使用複數名詞\\n不區分單複數，全部使用複數定義\\n```javascript\\n//這是對的\\n/students\\n```\\n不使用單數定義\\n```javascript\\n//這是錯的\\n/student\\n```\\n\\n## 使用子資源表達資源間的關係\\n以取得所有資源與特定資源為例\\n```javascript\\n//這是對的\\n/students //取得所有學生\\n/students/1 //取得特定學生\\n```\\n呼應到使用複數名詞定義API，取得特定資源時不使用單數表達，而是使用子資源方式定義\\n```javascript\\n//這是錯的\\n/students //取得所有學生\\n/student/1 //取得特定學生\\n```\\n\\n\\n## 使用GET以外的方法改變資源狀態\\n要改變資源狀態應使用GET以外的方法，例如POST、PUT或DELETE等\\n```javascript\\n//這是對的\\nPOST /students/1/activate\\n```\\n不使用GET進行修改\\n```javascript\\n//這是錯的\\nGET /students/1/activate\\n```\\n\\n## 使用HTTP header定義格式\\n- Content-Type定義請求格式\\n- Accept定義接收對應的格式列表\\n\\n## 使用HATEOAS約束\\n用戶端可以在伺服器返回的內容中動態的取得URI的資訊，再使用取得的URI資訊送出請求\\n\\n\\n## 提供過濾、排序、欄位選擇、分頁\\n### 過濾\\n```javascript\\nGET /students?gender=male\\nGET /students?age<=18\\n```\\n\\n### 排序\\n```javascript\\nGET /students?sort=-age,+id\\n```\\n\\n### 欄位選擇\\n```javascript\\nGET /students?fields=id,name,age,gender\\n```\\n\\n### 分頁\\n```javascript\\nGET /students?offset=10&limit=5 //取得學生第20個之後的5個學生\\n```\\n\\n## 使用版本\\n使用版本編號將API版本化，提供彈性\\n```javascript\\n/yourService/api/v1\\n```\\n\\n## 使用HTTP Status Code進行錯誤處理\\n每個錯誤都須返回一個payload，不可僅返回錯誤狀態碼(500 Internal Server Error)\\n\\n```json\\n{\\n    \\\"errors\\\":[\\n        {\\n            \\\"userMessage\\\":\\\"Sorry, the requested resource dose not exists.\\\",\\n            \\\"internalMessage\\\":\\\"Student not found\\\",\\n            \\\"code\\\":\\\"34\\\"\\n        }\\n    ]\\n}\\n```\\n\\n## 參考資料\\n- 巨型公司的網路架構：分散是系統內部解密/柳偉衛\"}]],\"markups\":[],\"sections\":[[10,0],[1,\"p\",[]]],\"ghostVersion\":\"3.0\"}","lexical":null,"html":"<!--kg-card-begin: markdown--><p>REST是一種架構風格，類似設計模式，使用一些原則規範應用程式的設計，以下為REST風格的一些特徵</p>\n<h2 id=\"\">使用名詞而非動詞</h2>\n<p>當我們想要設計一個學生的API時，應使用名詞進行定義</p>\n<pre><code class=\"language-javascript\">//這是對的\n/students/1\n</code></pre>\n<p>而非使用動詞定義</p>\n<pre><code class=\"language-javascript\">//這是錯的\n/getStudent/1\n</code></pre>\n<h2 id=\"\">使用複數名詞</h2>\n<p>不區分單複數，全部使用複數定義</p>\n<pre><code class=\"language-javascript\">//這是對的\n/students\n</code></pre>\n<p>不使用單數定義</p>\n<pre><code class=\"language-javascript\">//這是錯的\n/student\n</code></pre>\n<h2 id=\"\">使用子資源表達資源間的關係</h2>\n<p>以取得所有資源與特定資源為例</p>\n<pre><code class=\"language-javascript\">//這是對的\n/students //取得所有學生\n/students/1 //取得特定學生\n</code></pre>\n<p>呼應到使用複數名詞定義API，取得特定資源時不使用單數表達，而是使用子資源方式定義</p>\n<pre><code class=\"language-javascript\">//這是錯的\n/students //取得所有學生\n/student/1 //取得特定學生\n</code></pre>\n<h2 id=\"get\">使用GET以外的方法改變資源狀態</h2>\n<p>要改變資源狀態應使用GET以外的方法，例如POST、PUT或DELETE等</p>\n<pre><code class=\"language-javascript\">//這是對的\nPOST /students/1/activate\n</code></pre>\n<p>不使用GET進行修改</p>\n<pre><code class=\"language-javascript\">//這是錯的\nGET /students/1/activate\n</code></pre>\n<h2 id=\"httpheader\">使用HTTP header定義格式</h2>\n<ul>\n<li>Content-Type定義請求格式</li>\n<li>Accept定義接收對應的格式列表</li>\n</ul>\n<h2 id=\"hateoas\">使用HATEOAS約束</h2>\n<p>用戶端可以在伺服器返回的內容中動態的取得URI的資訊，再使用取得的URI資訊送出請求</p>\n<h2 id=\"\">提供過濾、排序、欄位選擇、分頁</h2>\n<h3 id=\"\">過濾</h3>\n<pre><code class=\"language-javascript\">GET /students?gender=male\nGET /students?age&lt;=18\n</code></pre>\n<h3 id=\"\">排序</h3>\n<pre><code class=\"language-javascript\">GET /students?sort=-age,+id\n</code></pre>\n<h3 id=\"\">欄位選擇</h3>\n<pre><code class=\"language-javascript\">GET /students?fields=id,name,age,gender\n</code></pre>\n<h3 id=\"\">分頁</h3>\n<pre><code class=\"language-javascript\">GET /students?offset=10&amp;limit=5 //取得學生第20個之後的5個學生\n</code></pre>\n<h2 id=\"\">使用版本</h2>\n<p>使用版本編號將API版本化，提供彈性</p>\n<pre><code class=\"language-javascript\">/yourService/api/v1\n</code></pre>\n<h2 id=\"httpstatuscode\">使用HTTP Status Code進行錯誤處理</h2>\n<p>每個錯誤都須返回一個payload，不可僅返回錯誤狀態碼(500 Internal Server Error)</p>\n<pre><code class=\"language-json\">{\n    &quot;errors&quot;:[\n        {\n            &quot;userMessage&quot;:&quot;Sorry, the requested resource dose not exists.&quot;,\n            &quot;internalMessage&quot;:&quot;Student not found&quot;,\n            &quot;code&quot;:&quot;34&quot;\n        }\n    ]\n}\n</code></pre>\n<h2 id=\"\">參考資料</h2>\n<ul>\n<li>巨型公司的網路架構：分散是系統內部解密/柳偉衛</li>\n</ul>\n<!--kg-card-end: markdown-->","comment_id":"60c7188467f493abc689cd41","plaintext":"REST是一種架構風格，類似設計模式，使用一些原則規範應用程式的設計，以下為REST風格的一些特徵\n\n\n\n使用名詞而非動詞\n\n\n當我們想要設計一個學生的API時，應使用名詞進行定義\n\n\n//這是對的\n/students/1\n\n\n\n而非使用動詞定義\n\n\n//這是錯的\n/getStudent/1\n\n\n\n\n使用複數名詞\n\n\n不區分單複數，全部使用複數定義\n\n\n//這是對的\n/students\n\n\n\n不使用單數定義\n\n\n//這是錯的\n/student\n\n\n\n\n使用子資源表達資源間的關係\n\n\n以取得所有資源與特定資源為例\n\n\n//這是對的\n/students //取得所有學生\n/students/1 //取得特定學生\n\n\n\n呼應到使用複數名詞定義API，取得特定資源時不使用單數表達，而是使用子資源方式定義\n\n\n//這是錯的\n/students //取得所有學生\n/student/1 //取得特定學生\n\n\n\n\n使用GET以外的方法改變資源狀態\n\n\n要改變資源狀態應使用GET以外的方法，例如POST、PUT或DELETE等\n\n\n//這是對的\nPOST /students/1/activate\n\n\n\n不使用GET進行修改\n\n\n//這是錯的\nGET /students/1/activate\n\n\n\n\n使用HTTP header定義格式\n\n\n * Content-Type定義請求格式\n * Accept定義接收對應的格式列表\n\n\n\n使用HATEOAS約束\n\n\n用戶端可以在伺服器返回的內容中動態的取得URI的資訊，再使用取得的URI資訊送出請求\n\n\n\n提供過濾、排序、欄位選擇、分頁\n\n\n\n過濾\n\n\nGET /students?gender=male\nGET /students?age<=18\n\n\n\n\n排序\n\n\nGET /students?sort=-age,+id\n\n\n\n\n欄位選擇\n\n\nGET /students?fields=id,name,age,gender\n\n\n\n\n分頁\n\n\nGET /students?offset=10&limit=5 //取得學生第20個之後的5個學生\n\n\n\n\n使用版本\n\n\n使用版本編號將API版本化，提供彈性\n\n\n/yourService/api/v1\n\n\n\n\n使用HTTP Status Code進行錯誤處理\n\n\n每個錯誤都須返回一個payload，不可僅返回錯誤狀態碼(500 Internal Server Error)\n\n\n{\n    \"errors\":[\n        {\n            \"userMessage\":\"Sorry, the requested resource dose not exists.\",\n            \"internalMessage\":\"Student not found\",\n            \"code\":\"34\"\n        }\n    ]\n}\n\n\n\n\n參考資料\n\n\n * 巨型公司的網路架構：分散是系統內部解密/柳偉衛\n","feature_image":"__GHOST_URL__/content/images/2021/06/Vector-Computer-Pattern-Computer-Seamless-Background-Stock.jpg","featured":0,"type":"post","status":"published","locale":null,"visibility":"public","email_recipient_filter":"none","created_at":"2021-06-14 08:51:16","created_by":"1","updated_at":"2021-06-14 09:20:00","updated_by":null,"published_at":"2021-06-14 09:20:00","published_by":"1","custom_excerpt":"REST是一種架構風格，類似設計模式，使用一些原則規範應用程式的設計","codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null,"newsletter_id":null},{"id":"635a812457207246b927a821","uuid":"bd934ada-b08a-4a91-91f3-71018df9343f","title":"[Network]TCP 三方交握","slug":"tcp-three-way-handshake","mobiledoc":"{\"version\":\"0.3.1\",\"atoms\":[],\"cards\":[[\"markdown\",{\"markdown\":\"三方交握(Three-Way Handshake)是TCP(Transmission Control Protocol)在傳送資料前的一個儀式，用來確認雙方都有收到訊息並建立連線\\n\\n而在解釋三方交握之前，先來看看三方交握會用到的三個概念：請求、確認和同步\\n\\n## 請求/確認\\n假設有A和B兩台電腦，A電腦要傳送封包給B電腦，為了確認B電腦是否收到封包，B電腦在收到A傳過來的封包之後會返回一個確認(Acknowledgment,ACK)封包，以告知A電腦已經有收到封包了，步驟如下：\\n1. A電腦傳送封包給B電腦\\n2. B電腦回傳一個帶有ACK欄位資訊的封包給A電腦\\n\\n這可以使TCP變成可靠的傳輸，但是另外一個問題出現了，若A電腦向B電腦發送多個封包，B電腦照樣送回多個ACK封包給A電腦，A電腦將會無法得知這些ACK是對應到哪個已發送的封包，就會不知道哪個對方已經收到，而哪個對方沒收到，這時我們可以用序列號(sequence number,SEQ)來解決這個問題。\\n\\n## 序列號\\n但是這邊又遇到一個問題了，因為A電腦和B電腦的起始序列號不一定會一樣，所以A電腦發送出去的封包的序列號不等於B電腦發送出去的封包的ACK的序號，例如A電腦初始序列號為7，B電腦初始序列號為1000。所以在開始傳送封包前AB雙方會進行同步(synchronization)來確認彼此的初始序列號(Initial Sequence Number,ISN)是多少，以作為後續在收到請求後要發送確認封包時，可以確認對方的序號是否正確。\\n\\n## 同步\\n同步為同步序列號(Synchronize sequence numbers,SYN)，用意就是在於確認彼此的初始序列號，假設A電腦的初始序列號是7，B電腦的初始序列號是1000，同步的步驟如下：\\n1. A電腦傳送SYN為7的封包給B\\n2. B電腦收到A電腦傳送SYN為7的封包，回傳ACK為8(7+1=8)的封包給A電腦\\n3. B電腦傳送SYN為1000的封包給A\\n4. A電腦收到B電腦傳送SYN為1000的封包，A電腦回傳ACK為1001(1000+1)的封包給B電腦\\n\\n## 三方交握\\n如此一來雙方便知道彼此的初始序列號了，而將四個步驟中的2和3合併成一個封包便是我們俗稱的三方交握\\n\\n1. A電腦傳送SYN給B電腦\\n2. B電腦收到A電腦傳送的SYN，傳回SYN+ACK給A電腦\\n3. A電腦送回ACK給B電腦\\n\"}]],\"markups\":[],\"sections\":[[10,0],[1,\"p\",[]]],\"ghostVersion\":\"3.0\"}","lexical":null,"html":"<!--kg-card-begin: markdown--><p>三方交握(Three-Way Handshake)是TCP(Transmission Control Protocol)在傳送資料前的一個儀式，用來確認雙方都有收到訊息並建立連線</p>\n<p>而在解釋三方交握之前，先來看看三方交握會用到的三個概念：請求、確認和同步</p>\n<h2 id=\"\">請求/確認</h2>\n<p>假設有A和B兩台電腦，A電腦要傳送封包給B電腦，為了確認B電腦是否收到封包，B電腦在收到A傳過來的封包之後會返回一個確認(Acknowledgment,ACK)封包，以告知A電腦已經有收到封包了，步驟如下：</p>\n<ol>\n<li>A電腦傳送封包給B電腦</li>\n<li>B電腦回傳一個帶有ACK欄位資訊的封包給A電腦</li>\n</ol>\n<p>這可以使TCP變成可靠的傳輸，但是另外一個問題出現了，若A電腦向B電腦發送多個封包，B電腦照樣送回多個ACK封包給A電腦，A電腦將會無法得知這些ACK是對應到哪個已發送的封包，就會不知道哪個對方已經收到，而哪個對方沒收到，這時我們可以用序列號(sequence number,SEQ)來解決這個問題。</p>\n<h2 id=\"\">序列號</h2>\n<p>但是這邊又遇到一個問題了，因為A電腦和B電腦的起始序列號不一定會一樣，所以A電腦發送出去的封包的序列號不等於B電腦發送出去的封包的ACK的序號，例如A電腦初始序列號為7，B電腦初始序列號為1000。所以在開始傳送封包前AB雙方會進行同步(synchronization)來確認彼此的初始序列號(Initial Sequence Number,ISN)是多少，以作為後續在收到請求後要發送確認封包時，可以確認對方的序號是否正確。</p>\n<h2 id=\"\">同步</h2>\n<p>同步為同步序列號(Synchronize sequence numbers,SYN)，用意就是在於確認彼此的初始序列號，假設A電腦的初始序列號是7，B電腦的初始序列號是1000，同步的步驟如下：</p>\n<ol>\n<li>A電腦傳送SYN為7的封包給B</li>\n<li>B電腦收到A電腦傳送SYN為7的封包，回傳ACK為8(7+1=8)的封包給A電腦</li>\n<li>B電腦傳送SYN為1000的封包給A</li>\n<li>A電腦收到B電腦傳送SYN為1000的封包，A電腦回傳ACK為1001(1000+1)的封包給B電腦</li>\n</ol>\n<h2 id=\"\">三方交握</h2>\n<p>如此一來雙方便知道彼此的初始序列號了，而將四個步驟中的2和3合併成一個封包便是我們俗稱的三方交握</p>\n<ol>\n<li>A電腦傳送SYN給B電腦</li>\n<li>B電腦收到A電腦傳送的SYN，傳回SYN+ACK給A電腦</li>\n<li>A電腦送回ACK給B電腦</li>\n</ol>\n<!--kg-card-end: markdown-->","comment_id":"60f98e1812844678e7108e33","plaintext":"三方交握(Three-Way Handshake)是TCP(Transmission Control Protocol)在傳送資料前的一個儀式，用來確認雙方都有收到訊息並建立連線\n\n\n而在解釋三方交握之前，先來看看三方交握會用到的三個概念：請求、確認和同步\n\n\n\n請求/確認\n\n\n假設有A和B兩台電腦，A電腦要傳送封包給B電腦，為了確認B電腦是否收到封包，B電腦在收到A傳過來的封包之後會返回一個確認(Acknowledgment,ACK)封包，以告知A電腦已經有收到封包了，步驟如下：\n\n\n 1. A電腦傳送封包給B電腦\n 2. B電腦回傳一個帶有ACK欄位資訊的封包給A電腦\n\n\n這可以使TCP變成可靠的傳輸，但是另外一個問題出現了，若A電腦向B電腦發送多個封包，B電腦照樣送回多個ACK封包給A電腦，A電腦將會無法得知這些ACK是對應到哪個已發送的封包，就會不知道哪個對方已經收到，而哪個對方沒收到，這時我們可以用序列號(sequence number,SEQ)來解決這個問題。\n\n\n\n序列號\n\n\n但是這邊又遇到一個問題了，因為A電腦和B電腦的起始序列號不一定會一樣，所以A電腦發送出去的封包的序列號不等於B電腦發送出去的封包的ACK的序號，例如A電腦初始序列號為7，B電腦初始序列號為1000。所以在開始傳送封包前AB雙方會進行同步(synchronization)來確認彼此的初始序列號(Initial Sequence Number,ISN)是多少，以作為後續在收到請求後要發送確認封包時，可以確認對方的序號是否正確。\n\n\n\n同步\n\n\n同步為同步序列號(Synchronize sequence numbers,SYN)，用意就是在於確認彼此的初始序列號，假設A電腦的初始序列號是7，B電腦的初始序列號是1000，同步的步驟如下：\n\n\n 1. A電腦傳送SYN為7的封包給B\n 2. B電腦收到A電腦傳送SYN為7的封包，回傳ACK為8(7+1=8)的封包給A電腦\n 3. B電腦傳送SYN為1000的封包給A\n 4. A電腦收到B電腦傳送SYN為1000的封包，A電腦回傳ACK為1001(1000+1)的封包給B電腦\n\n\n\n三方交握\n\n\n如此一來雙方便知道彼此的初始序列號了，而將四個步驟中的2和3合併成一個封包便是我們俗稱的三方交握\n\n\n 1. A電腦傳送SYN給B電腦\n 2. B電腦收到A電腦傳送的SYN，傳回SYN+ACK給A電腦\n 3. A電腦送回ACK給B電腦\n","feature_image":"__GHOST_URL__/content/images/2021/07/communication-4871245.jpg","featured":0,"type":"post","status":"published","locale":null,"visibility":"public","email_recipient_filter":"none","created_at":"2021-07-22 15:26:16","created_by":"1","updated_at":"2021-07-22 15:29:27","updated_by":null,"published_at":"2021-07-22 15:29:27","published_by":"1","custom_excerpt":"三方交握(Three-Way Handshake)是TCP(Transmission Control Protocol)在傳送資料前的一個儀式，用來確認雙方都有收到訊息並建立連線","codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null,"newsletter_id":null},{"id":"635a812457207246b927a822","uuid":"ae12c21b-3c06-4b70-86bc-0d17d6693f2b","title":"[Python]使用Pyinstaller打包Django專案發生\"RuntimeError: Script runserver does not exist.\"錯誤","slug":"python-pyinstaller-django-runserver-does-not-exist-error","mobiledoc":"{\"version\":\"0.3.1\",\"atoms\":[],\"cards\":[[\"markdown\",{\"markdown\":\"![0.0](__GHOST_URL__/content/images/2021/11/0.0.png)\\n使用pyinstaller將manage.py打包後會產生manage.exe可執行檔，在執行`manage.exe runserver`指令時發生*RuntimeError: Script runserver does not exist.* 錯誤\\n\\n\\n## 環境\\n- Windows10 x64 20H2\\n- Python 3.9.7\\n- Django 3.2.7\\n- pyinstaller 4.7\\n\\n## 解決方法\\n將指令加上 `--noreload` 參數，使用指令`manage.exe runserver --noreload`即可解決這個錯誤\\n\\n![0.1](__GHOST_URL__/content/images/2021/11/0.1.png)\"}]],\"markups\":[],\"sections\":[[10,0],[1,\"p\",[]]],\"ghostVersion\":\"3.0\"}","lexical":null,"html":"<!--kg-card-begin: markdown--><p><img src=\"__GHOST_URL__/content/images/2021/11/0.0.png\" alt=\"0.0\" loading=\"lazy\"><br>\n使用pyinstaller將manage.py打包後會產生manage.exe可執行檔，在執行<code>manage.exe runserver</code>指令時發生<em>RuntimeError: Script runserver does not exist.</em> 錯誤</p>\n<h2 id=\"\">環境</h2>\n<ul>\n<li>Windows10 x64 20H2</li>\n<li>Python 3.9.7</li>\n<li>Django 3.2.7</li>\n<li>pyinstaller 4.7</li>\n</ul>\n<h2 id=\"\">解決方法</h2>\n<p>將指令加上 <code>--noreload</code> 參數，使用指令<code>manage.exe runserver --noreload</code>即可解決這個錯誤</p>\n<p><img src=\"__GHOST_URL__/content/images/2021/11/0.1.png\" alt=\"0.1\" loading=\"lazy\"></p>\n<!--kg-card-end: markdown-->","comment_id":"619e5aedbfa2143800faf491","plaintext":"\n\n使用pyinstaller將manage.py打包後會產生manage.exe可執行檔，在執行manage.exe runserver指令時發生RuntimeError: Script runserver does not exist. 錯誤\n\n\n\n環境\n\n\n * Windows10 x64 20H2\n * Python 3.9.7\n * Django 3.2.7\n * pyinstaller 4.7\n\n\n\n解決方法\n\n\n將指令加上 --noreload 參數，使用指令manage.exe runserver --noreload即可解決這個錯誤\n\n\n\n","feature_image":"__GHOST_URL__/content/images/2021/11/python-logo.jpg","featured":0,"type":"post","status":"published","locale":null,"visibility":"public","email_recipient_filter":"none","created_at":"2021-11-24 15:31:57","created_by":"1","updated_at":"2021-11-24 15:35:58","updated_by":null,"published_at":"2021-11-24 15:35:58","published_by":"1","custom_excerpt":"使用pyinstaller將manage.py打包後會產生manage.exe可執行檔，在執行`manage.exe runserver`指令時發生*RuntimeError: Script runserver does not exist.* 錯誤","codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null,"newsletter_id":null},{"id":"635a812457207246b927a823","uuid":"518c7d4e-dab3-498f-a224-2a3d780c878f","title":"[Python]使用Pyinstaller打包Django專案發生ModuleNotFoundError: No module named 'XXX'.錯誤","slug":"python-shi-yong-pyinstallerda-bao-djangozhuan-an-fa-sheng-modulenotfounderror-no-module-named-xxx-cuo-wu","mobiledoc":"{\"version\":\"0.3.1\",\"atoms\":[],\"cards\":[[\"markdown\",{\"markdown\":\"\\n![0.0-1](__GHOST_URL__/content/images/2021/11/0.0-1.png)\\n\\n使用pyinstaller將manage.py打包後會產生manage.exe可執行檔，在執行`manage.exe runserver --noreload`指令時發生*ModuleNotFoundError: No module named 'XXX'.* 錯誤\\n\\n\\n## 環境\\n- Windows10 x64 20H2\\n- Python 3.9.7\\n- Django 3.2.7\\n- pyinstaller 4.7\\n\\n## 解決方法\\n先前使用`pyinstaller -F .\\\\manage.py`直接打包產生exe檔案，但是因為錯誤訊息提示缺少模組，其中一個解決方法是將錯誤訊息顯示的模組手動加入到hiddenimports中\\n\\n首先使用`pyi-makespec -F .\\\\manage.py`指令產生spec檔，在檔案裡的hiddenimports中加入錯誤訊息所提示的模組名稱\\n![0.1-1](__GHOST_URL__/content/images/2021/11/0.1-1.png)\\n\\n![0.2](__GHOST_URL__/content/images/2021/11/0.2.png)\\n\\n接著使用`pyinstaller -F .\\\\manage.spec`指令將spec檔案打包成exe檔，再次使用`manage.exe runserver --noreload`指令執行顯示已可正常運作\\n\\n![0.3](__GHOST_URL__/content/images/2021/11/0.3.png)\\n\\n\"}]],\"markups\":[],\"sections\":[[10,0],[1,\"p\",[]]],\"ghostVersion\":\"3.0\"}","lexical":null,"html":"<!--kg-card-begin: markdown--><p><img src=\"__GHOST_URL__/content/images/2021/11/0.0-1.png\" alt=\"0.0-1\" loading=\"lazy\"></p>\n<p>使用pyinstaller將manage.py打包後會產生manage.exe可執行檔，在執行<code>manage.exe runserver --noreload</code>指令時發生<em>ModuleNotFoundError: No module named 'XXX'.</em> 錯誤</p>\n<h2 id=\"\">環境</h2>\n<ul>\n<li>Windows10 x64 20H2</li>\n<li>Python 3.9.7</li>\n<li>Django 3.2.7</li>\n<li>pyinstaller 4.7</li>\n</ul>\n<h2 id=\"\">解決方法</h2>\n<p>先前使用<code>pyinstaller -F .\\manage.py</code>直接打包產生exe檔案，但是因為錯誤訊息提示缺少模組，其中一個解決方法是將錯誤訊息顯示的模組手動加入到hiddenimports中</p>\n<p>首先使用<code>pyi-makespec -F .\\manage.py</code>指令產生spec檔，在檔案裡的hiddenimports中加入錯誤訊息所提示的模組名稱<br>\n<img src=\"__GHOST_URL__/content/images/2021/11/0.1-1.png\" alt=\"0.1-1\" loading=\"lazy\"></p>\n<p><img src=\"__GHOST_URL__/content/images/2021/11/0.2.png\" alt=\"0.2\" loading=\"lazy\"></p>\n<p>接著使用<code>pyinstaller -F .\\manage.spec</code>指令將spec檔案打包成exe檔，再次使用<code>manage.exe runserver --noreload</code>指令執行顯示已可正常運作</p>\n<p><img src=\"__GHOST_URL__/content/images/2021/11/0.3.png\" alt=\"0.3\" loading=\"lazy\"></p>\n<!--kg-card-end: markdown-->","comment_id":"619e5c60bfa2143800faf4a8","plaintext":"\n\n\n使用pyinstaller將manage.py打包後會產生manage.exe可執行檔，在執行manage.exe runserver --noreload指令時發生ModuleNotFoundError: No module named 'XXX'. 錯誤\n\n\n\n環境\n\n\n * Windows10 x64 20H2\n * Python 3.9.7\n * Django 3.2.7\n * pyinstaller 4.7\n\n\n\n解決方法\n\n\n先前使用pyinstaller -F .\\manage.py直接打包產生exe檔案，但是因為錯誤訊息提示缺少模組，其中一個解決方法是將錯誤訊息顯示的模組手動加入到hiddenimports中\n\n\n首先使用pyi-makespec -F .\\manage.py指令產生spec檔，在檔案裡的hiddenimports中加入錯誤訊息所提示的模組名稱\n\n\n\n\n\n\n\n接著使用pyinstaller -F .\\manage.spec指令將spec檔案打包成exe檔，再次使用manage.exe runserver --noreload指令執行顯示已可正常運作\n\n\n\n","feature_image":"__GHOST_URL__/content/images/2021/11/python-logo-1.jpg","featured":0,"type":"post","status":"published","locale":null,"visibility":"public","email_recipient_filter":"none","created_at":"2021-11-24 15:38:08","created_by":"1","updated_at":"2021-11-24 15:39:29","updated_by":null,"published_at":"2021-11-24 15:39:29","published_by":"1","custom_excerpt":"使用pyinstaller將manage.py打包後會產生manage.exe可執行檔，在執行`manage.exe runserver --noreload`指令時發生*ModuleNotFoundError: No module named 'XXX'.* 錯誤","codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null,"newsletter_id":null}],"posts_meta":[{"id":"635a812457207246b927a825","post_id":"635a812457207246b927a807","og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"meta_title":"[Ghost]使用Ghost和GitHub Pages建立網頁","meta_description":"一直以來都有個困擾，就是查個程式寫法或是軟體操作方法每次都很快就忘記，所以想寫個Blog紀錄自己的手順，先前曾想過直接寫個網頁PUSH到GitHub上，但實在有點累( ˘･з･)，偶然又看到有個很喜歡的排版是用Ghost建立的，因此使用Ghost+GitHub的形式建立部落格","email_subject":null,"frontmatter":null,"feature_image_alt":null,"feature_image_caption":null,"email_only":0},{"id":"635a812457207246b927a827","post_id":"635a812457207246b927a808","og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"meta_title":"計算Wildcard Mask","meta_description":"在設置ACL(Access Control List)時，會用到Wildcard Mask標示在範圍內的IP位址，這篇筆記記錄如何使用wildcard mask計算IP範圍的起點及終點","email_subject":null,"frontmatter":null,"feature_image_alt":null,"feature_image_caption":null,"email_only":0},{"id":"635a812457207246b927a82a","post_id":"635a812457207246b927a809","og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"meta_title":"[Golang]Golang函式","meta_description":"Golang基礎 - 函式","email_subject":null,"frontmatter":null,"feature_image_alt":null,"feature_image_caption":null,"email_only":0},{"id":"635a812457207246b927a82d","post_id":"635a812457207246b927a80a","og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"meta_title":"[Golang]從外部中斷Goroutine","meta_description":"想要從外部終止一個正在執行中或無限迴圈的goroutine，必須使用channel將中斷訊息傳入使之中斷","email_subject":null,"frontmatter":null,"feature_image_alt":null,"feature_image_caption":null,"email_only":0},{"id":"635a812457207246b927a831","post_id":"635a812457207246b927a80b","og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"meta_title":"[Python]使用Python爬蟲抓取網站資料","meta_description":"使用python抓取網站或網頁資料是再方便不過的了，常見的抓取方法包含抓取網站回應的JSON檔，或是直接抓取網頁內容並進行分析，以下紀錄兩種方法該如何實作。","email_subject":null,"frontmatter":null,"feature_image_alt":null,"feature_image_caption":null,"email_only":0},{"id":"635a812457207246b927a833","post_id":"635a812457207246b927a80c","og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"meta_title":"記憶體的時脈與頻寬","meta_description":"記憶體的時脈與頻寬","email_subject":null,"frontmatter":null,"feature_image_alt":null,"feature_image_caption":null,"email_only":0},{"id":"635a812457207246b927a837","post_id":"635a812457207246b927a80d","og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"meta_title":"[GolangPackage]Excel的讀寫與操作","meta_description":"excelize是一個能夠讀寫excel的package，可讀入或寫入指定位置的資料及更改樣式，適用於批量產生excel檔案及資料處理","email_subject":null,"frontmatter":null,"feature_image_alt":null,"feature_image_caption":null,"email_only":0},{"id":"635a812457207246b927a83a","post_id":"635a812457207246b927a80e","og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"meta_title":"[Golang]channel簡介","meta_description":"在golang裡可使用channel在多個執行緒與主程式之間傳送資料，channel可設定不同型態的buffer，並指定緩衝區大小","email_subject":null,"frontmatter":null,"feature_image_alt":null,"feature_image_caption":null,"email_only":0},{"id":"635a812457207246b927a83e","post_id":"635a812457207246b927a80f","og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"meta_title":"[Clover]Cannot install without ensuring the file system is read-write","meta_description":"在開啟Clover時會跳出\"Cannot install without ensuring the file system is read-write\"錯誤訊息","email_subject":null,"frontmatter":null,"feature_image_alt":null,"feature_image_caption":null,"email_only":0},{"id":"635a812457207246b927a841","post_id":"635a812457207246b927a810","og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"meta_title":"[C++]陣列與指標的位址","meta_description":"C++陣列與指標的位址","email_subject":null,"frontmatter":null,"feature_image_alt":null,"feature_image_caption":null,"email_only":0},{"id":"635a812457207246b927a845","post_id":"635a812457207246b927a811","og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"meta_title":"[GolangPackage]指定golang執行檔檔案屬性","meta_description":"GoVersionInfo package可在生成執行檔時指定執行檔縮圖及檔案屬性，檔案描述、檔案類型、版本等參數皆可指定","email_subject":null,"frontmatter":null,"feature_image_alt":null,"feature_image_caption":null,"email_only":0},{"id":"635a812457207246b927a849","post_id":"635a812457207246b927a813","og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"meta_title":"[Qt]Qt的鍵盤與滑鼠點擊事件","meta_description":"Qt的鍵盤與滑鼠點擊事件","email_subject":null,"frontmatter":null,"feature_image_alt":null,"feature_image_caption":null,"email_only":0},{"id":"635a812557207246b927a84d","post_id":"635a812457207246b927a814","og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"meta_title":"[GolangPackage] 使用lnx/walk建立圖形化介面","meta_description":"golang 普遍使用CLI作為使用者介面，但因為需要做一個程式給不常使用指令的人使用，所以使用lxn/walk建立圖形化使用者介面，lxn/walk可以滿足視窗的大部分需求，適用於建立一些基本的圖形化介面","email_subject":null,"frontmatter":null,"feature_image_alt":null,"feature_image_caption":null,"email_only":0},{"id":"635a812557207246b927a850","post_id":"635a812457207246b927a815","og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"meta_title":"[Golang]使用筆畫排序中文字","meta_description":"有次嘗試要使用筆劃排序中文姓名時，直接使用sort包進行排序，但發現結果並不是照著筆劃排序，查了點資料發現原來和UTF-8、Big5兩種編碼有極大的關係","email_subject":null,"frontmatter":null,"feature_image_alt":null,"feature_image_caption":null,"email_only":0},{"id":"635a812557207246b927a855","post_id":"635a812457207246b927a816","og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"meta_title":"[C#]使用Npgsql連接到PostgreSQL server","meta_description":null,"email_subject":null,"frontmatter":null,"feature_image_alt":null,"feature_image_caption":null,"email_only":0},{"id":"635a812557207246b927a858","post_id":"635a812457207246b927a817","og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"meta_title":"[Vue]使用Vue CLI建立專案","meta_description":"在之前的課堂裡，我們都是直接開一個html檔案然後把vue寫在裡頭，這次助教介紹了Vue CLI，Vue CLI是一個官方出的工具，可以直接開一個測試用的伺服器，讓開發更方便，並且可以將程式碼打包，方便某些情況下的部屬","email_subject":null,"frontmatter":null,"feature_image_alt":null,"feature_image_caption":null,"email_only":0},{"id":"635a812557207246b927a85b","post_id":"635a812457207246b927a818","og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"meta_title":"[Vue]Vuetify安裝與使用","meta_description":"Vuetify是一個Vue的UI框架，有許多精美和現成的組件可讓我們快速進行網頁排版及呈現，由於這篇文章撰寫時vuetify尚未支援Vue3，所以本篇文章以Vue2為例，示範如何將vuetify加入到Vue2專案中","email_subject":null,"frontmatter":null,"feature_image_alt":null,"feature_image_caption":null,"email_only":0},{"id":"635a812557207246b927a85e","post_id":"635a812457207246b927a819","og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"meta_title":"[Vue]將Vue-Router加入到專案中","meta_description":"在使用vue時，有時會需要在畫面中切換component，這時vue-router就派上用場啦，vue-router常常被用在single-page application中，這次的期中專題因為要將舊網頁變成single-page app，所以必須先了解如何將vue-router加入到專案中，方便後續使用","email_subject":null,"frontmatter":null,"feature_image_alt":null,"feature_image_caption":null,"email_only":0},{"id":"635a812557207246b927a862","post_id":"635a812457207246b927a81b","og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"meta_title":"[MQTT]Mosquitto Server 安裝與啟動","meta_description":"在使用MQTT進行資料傳遞時，會需要一個代理人，也就是MQTT Broker，作為訂閱/發布的橋樑，Mosquitto Server是一個開源的MQTT的Server，本篇筆記紀錄在Windows下如何安裝並開啟MQTT Server","email_subject":null,"frontmatter":null,"feature_image_alt":null,"feature_image_caption":null,"email_only":0},{"id":"635a812557207246b927a865","post_id":"635a812457207246b927a81c","og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"meta_title":"[IDE] 在Visual Studio Code中使用MSYS作為終端機","meta_description":"因為需要用到Makefile的緣故，而windows沒有提供相關的功能，所以希望能夠把Visual studio code預設的powershell改為MSYS作為終端機，便於make指令的操作","email_subject":null,"frontmatter":null,"feature_image_alt":null,"feature_image_caption":null,"email_only":0},{"id":"635a812557207246b927a868","post_id":"635a812457207246b927a81d","og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"meta_title":"[ESP8266]ESP-01韌體燒錄","meta_description":"在使用ESP8266有時會遇到兩種情況，原廠出貨的韌體怪怪的導致無法使用AT指令跟ESP8266溝通，或是已經把自己的程式燒進去之後又想重新使用AT指令的功能，這時候就需要重新燒錄韌體，這篇筆記紀錄使用ESP-01作為範例的韌體燒錄及AT指令驗證步驟","email_subject":null,"frontmatter":null,"feature_image_alt":null,"feature_image_caption":null,"email_only":0},{"id":"635a812557207246b927a86c","post_id":"635a812457207246b927a81e","og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"meta_title":"[Zsh]更改Ubuntu終端機樣式","meta_description":"近期無意間在網路上發現Bullet Train這個theme，一下子就被燒到了，覺得非常好看，於是決定來將自己的terminal也改成那樣子，提昇~~爽度~~工作效率","email_subject":null,"frontmatter":null,"feature_image_alt":null,"feature_image_caption":null,"email_only":0},{"id":"635a812557207246b927a86f","post_id":"635a812457207246b927a81f","og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"meta_title":"[Golang]MySQL Error 1040: Too Many Connections 錯誤處理","meta_description":"前陣子寫了一個golang程式用來上傳資料到MySQL，起初程式運作都非常良好，過了一陣子開始出現代號為1040的Too Many Connections錯誤，我們一起來看看發生了甚麼事。","email_subject":null,"frontmatter":null,"feature_image_alt":null,"feature_image_caption":null,"email_only":0},{"id":"635a812557207246b927a872","post_id":"635a812457207246b927a820","og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"meta_title":"[Pattern]REST API 設計規範","meta_description":"REST是一種架構風格，類似設計模式，使用一些原則規範應用程式的設計","email_subject":null,"frontmatter":null,"feature_image_alt":null,"feature_image_caption":null,"email_only":0},{"id":"635a812557207246b927a876","post_id":"635a812457207246b927a821","og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"meta_title":"[Network]TCP 三方交握","meta_description":"三方交握(Three-Way Handshake)是TCP(Transmission Control Protocol)在傳送資料前的一個儀式，用來確認雙方都有收到訊息並建立連線","email_subject":null,"frontmatter":null,"feature_image_alt":null,"feature_image_caption":null,"email_only":0},{"id":"635a812557207246b927a879","post_id":"635a812457207246b927a822","og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"meta_title":"[Python]使用Pyinstaller打包Django專案發生\"RuntimeError: Script runserver does not exist.\"錯誤","meta_description":"使用pyinstaller將manage.py打包後會產生manage.exe可執行檔，在執行`manage.exe runserver`指令時發生*RuntimeError: Script runserver does not exist.* 錯誤","email_subject":null,"frontmatter":null,"feature_image_alt":null,"feature_image_caption":null,"email_only":0},{"id":"635a812557207246b927a87c","post_id":"635a812457207246b927a823","og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"meta_title":"[Python]使用Pyinstaller打包Django專案發生ModuleNotFoundError: No module named 'XXX'.錯誤","meta_description":"使用pyinstaller將manage.py打包後會產生manage.exe可執行檔，在執行`manage.exe runserver --noreload`指令時發生*ModuleNotFoundError: No module named 'XXX'.* 錯誤","email_subject":null,"frontmatter":null,"feature_image_alt":null,"feature_image_caption":null,"email_only":0}],"users":[{"id":"1","name":"Katsuobushi","slug":"katsuobushi","password":"$2a$10$DE70l0IKtvyDBnaMY8w19OKfw9Dp2DhlKKL96cuhxaLEY1sqtt4Eu","email":"vincent87720@yahoo.com.tw","profile_image":null,"cover_image":null,"bio":null,"website":null,"location":null,"facebook":null,"twitter":null,"accessibility":null,"status":"active","locale":null,"visibility":"public","meta_title":null,"meta_description":null,"tour":null,"last_seen":"2022-10-27 13:00:58","comment_notifications":1,"free_member_signup_notification":1,"paid_subscription_started_notification":1,"paid_subscription_canceled_notification":0,"created_at":"2022-10-27 12:58:28","created_by":"1","updated_at":"2022-10-27 13:00:58","updated_by":"1"}],"posts_authors":[{"id":"635a807557207246b927a656","post_id":"635a807457207246b927a655","author_id":"1","sort_order":0},{"id":"635a807557207246b927a658","post_id":"635a807557207246b927a657","author_id":"1","sort_order":0},{"id":"635a812457207246b927a824","post_id":"635a812457207246b927a807","author_id":"1","sort_order":0},{"id":"635a812457207246b927a826","post_id":"635a812457207246b927a808","author_id":"1","sort_order":0},{"id":"635a812457207246b927a829","post_id":"635a812457207246b927a809","author_id":"1","sort_order":0},{"id":"635a812457207246b927a82c","post_id":"635a812457207246b927a80a","author_id":"1","sort_order":0},{"id":"635a812457207246b927a830","post_id":"635a812457207246b927a80b","author_id":"1","sort_order":0},{"id":"635a812457207246b927a832","post_id":"635a812457207246b927a80c","author_id":"1","sort_order":0},{"id":"635a812457207246b927a836","post_id":"635a812457207246b927a80d","author_id":"1","sort_order":0},{"id":"635a812457207246b927a839","post_id":"635a812457207246b927a80e","author_id":"1","sort_order":0},{"id":"635a812457207246b927a83d","post_id":"635a812457207246b927a80f","author_id":"1","sort_order":0},{"id":"635a812457207246b927a840","post_id":"635a812457207246b927a810","author_id":"1","sort_order":0},{"id":"635a812457207246b927a844","post_id":"635a812457207246b927a811","author_id":"1","sort_order":0},{"id":"635a812457207246b927a846","post_id":"635a812457207246b927a812","author_id":"1","sort_order":0},{"id":"635a812457207246b927a848","post_id":"635a812457207246b927a813","author_id":"1","sort_order":0},{"id":"635a812557207246b927a84c","post_id":"635a812457207246b927a814","author_id":"1","sort_order":0},{"id":"635a812557207246b927a84f","post_id":"635a812457207246b927a815","author_id":"1","sort_order":0},{"id":"635a812557207246b927a854","post_id":"635a812457207246b927a816","author_id":"1","sort_order":0},{"id":"635a812557207246b927a857","post_id":"635a812457207246b927a817","author_id":"1","sort_order":0},{"id":"635a812557207246b927a85a","post_id":"635a812457207246b927a818","author_id":"1","sort_order":0},{"id":"635a812557207246b927a85d","post_id":"635a812457207246b927a819","author_id":"1","sort_order":0},{"id":"635a812557207246b927a85f","post_id":"635a812457207246b927a81a","author_id":"1","sort_order":0},{"id":"635a812557207246b927a861","post_id":"635a812457207246b927a81b","author_id":"1","sort_order":0},{"id":"635a812557207246b927a864","post_id":"635a812457207246b927a81c","author_id":"1","sort_order":0},{"id":"635a812557207246b927a867","post_id":"635a812457207246b927a81d","author_id":"1","sort_order":0},{"id":"635a812557207246b927a86b","post_id":"635a812457207246b927a81e","author_id":"1","sort_order":0},{"id":"635a812557207246b927a86e","post_id":"635a812457207246b927a81f","author_id":"1","sort_order":0},{"id":"635a812557207246b927a871","post_id":"635a812457207246b927a820","author_id":"1","sort_order":0},{"id":"635a812557207246b927a875","post_id":"635a812457207246b927a821","author_id":"1","sort_order":0},{"id":"635a812557207246b927a878","post_id":"635a812457207246b927a822","author_id":"1","sort_order":0},{"id":"635a812557207246b927a87b","post_id":"635a812457207246b927a823","author_id":"1","sort_order":0}],"roles":[{"id":"635a807457207246b927a5db","name":"Administrator","description":"Administrators","created_at":"2022-10-27 12:58:28","created_by":"1","updated_at":"2022-10-27 12:58:28","updated_by":"1"},{"id":"635a807457207246b927a5dc","name":"Editor","description":"Editors","created_at":"2022-10-27 12:58:28","created_by":"1","updated_at":"2022-10-27 12:58:28","updated_by":"1"},{"id":"635a807457207246b927a5dd","name":"Author","description":"Authors","created_at":"2022-10-27 12:58:28","created_by":"1","updated_at":"2022-10-27 12:58:28","updated_by":"1"},{"id":"635a807457207246b927a5de","name":"Contributor","description":"Contributors","created_at":"2022-10-27 12:58:28","created_by":"1","updated_at":"2022-10-27 12:58:28","updated_by":"1"},{"id":"635a807457207246b927a5df","name":"Owner","description":"Blog Owner","created_at":"2022-10-27 12:58:28","created_by":"1","updated_at":"2022-10-27 12:58:28","updated_by":"1"},{"id":"635a807457207246b927a5e0","name":"Admin Integration","description":"External Apps","created_at":"2022-10-27 12:58:28","created_by":"1","updated_at":"2022-10-27 12:58:28","updated_by":"1"},{"id":"635a807457207246b927a5e1","name":"Ghost Explore Integration","description":"Internal Integration for the Ghost Explore directory","created_at":"2022-10-27 12:58:28","created_by":"1","updated_at":"2022-10-27 12:58:28","updated_by":"1"},{"id":"635a807457207246b927a5e2","name":"DB Backup Integration","description":"Internal DB Backup Client","created_at":"2022-10-27 12:58:28","created_by":"1","updated_at":"2022-10-27 12:58:28","updated_by":"1"},{"id":"635a807457207246b927a5e3","name":"Scheduler Integration","description":"Internal Scheduler Client","created_at":"2022-10-27 12:58:28","created_by":"1","updated_at":"2022-10-27 12:58:28","updated_by":"1"}],"roles_users":[{"id":"635a807457207246b927a5e4","role_id":"635a807457207246b927a5df","user_id":"1"}],"settings":[{"id":"635a807757207246b927a781","group":"core","key":"db_hash","value":"e2fb433c-9491-4c3b-aaa4-9b621674a0f3","type":"string","flags":null,"created_at":"2022-10-27 12:58:31","created_by":"1","updated_at":"2022-10-27 12:58:31","updated_by":"1"},{"id":"635a807757207246b927a782","group":"core","key":"routes_hash","value":"3d180d52c663d173a6be791ef411ed01","type":"string","flags":null,"created_at":"2022-10-27 12:58:31","created_by":"1","updated_at":"2022-10-27 12:58:33","updated_by":"1"},{"id":"635a807757207246b927a783","group":"core","key":"next_update_check","value":"1666961926","type":"number","flags":null,"created_at":"2022-10-27 12:58:31","created_by":"1","updated_at":"2022-10-27 12:58:46","updated_by":"1"},{"id":"635a807757207246b927a784","group":"core","key":"notifications","value":"[{\"dismissible\":true,\"location\":\"bottom\",\"status\":\"alert\",\"id\":\"635a810c57207246b927a7e7\",\"createdAtVersion\":\"5.20.0\",\"type\":\"warn\",\"message\":\"Ghost is currently unable to send email. See https://ghost.org/docs/concepts/config/#mail for instructions.\",\"seen\":false,\"addedAt\":\"2022-10-27T13:01:00.044Z\"}]","type":"array","flags":null,"created_at":"2022-10-27 12:58:31","created_by":"1","updated_at":"2022-10-27 13:01:00","updated_by":"1"},{"id":"635a807757207246b927a785","group":"core","key":"version_notifications","value":"[]","type":"array","flags":null,"created_at":"2022-10-27 12:58:31","created_by":"1","updated_at":"2022-10-27 12:58:31","updated_by":"1"},{"id":"635a807757207246b927a786","group":"core","key":"admin_session_secret","value":"6d8c10d7785fce8e9dba69bc0d28ec98f8ba692c24889126fb0097f08b96c7bf","type":"string","flags":null,"created_at":"2022-10-27 12:58:31","created_by":"1","updated_at":"2022-10-27 12:58:31","updated_by":"1"},{"id":"635a807757207246b927a787","group":"core","key":"theme_session_secret","value":"00555f843d4b945f07482bbcefcc265bc5dc5124df91f76972cc713445acb4e7","type":"string","flags":null,"created_at":"2022-10-27 12:58:31","created_by":"1","updated_at":"2022-10-27 12:58:31","updated_by":"1"},{"id":"635a807757207246b927a788","group":"core","key":"ghost_public_key","value":"-----BEGIN RSA PUBLIC KEY-----\nMIGJAoGBAIpQJ48bF8xF8gp1+ggHTLHbpGZxt0cFOevuKGUFpk5cnUHGOwPaecERhTN7L3aL\nHE+2bh1MePibzXhD94QyiYIqIm5Y6CP535NBoSB1OoSbWw/pPCCabty5qSaPSxtwEi6hofV0\nXePZXayrEOM0aurx6JAPQ+0xmKZ2lU6AOhi9AgMBAAE=\n-----END RSA PUBLIC KEY-----\n","type":"string","flags":null,"created_at":"2022-10-27 12:58:31","created_by":"1","updated_at":"2022-10-27 12:58:31","updated_by":"1"},{"id":"635a807757207246b927a789","group":"core","key":"ghost_private_key","value":"-----BEGIN RSA PRIVATE KEY-----\nMIICXAIBAAKBgQCKUCePGxfMRfIKdfoIB0yx26RmcbdHBTnr7ihlBaZOXJ1BxjsD2nnBEYUz\ney92ixxPtm4dTHj4m814Q/eEMomCKiJuWOgj+d+TQaEgdTqEm1sP6Twgmm7cuakmj0sbcBIu\noaH1dF3j2V2sqxDjNGrq8eiQD0PtMZimdpVOgDoYvQIDAQABAoGAf2xS1ZNXPFkgIKUJ4UWg\nUacRcVPITsSw1PvG+TLYQQ8vzX3rtqQbUVRry77sPiDwxztBfPqL5DXdeLPdH0xTw11oF101\nRbuWKTGblcdQ4/vtx9PKr+mb5zb9YfJNNFiRzU8S/nur96U+9d3h2R0RALfxCVNeA82AWgIg\nhGUPaIECQQDBWScKG50VlDCO72hI4iliY7MTzdynJr51uODY3ewRYXccM571ex73ILcPOwij\n13iott/C//jUfCgMqoQlhJZdAkEAtyGpsBZ9e9eHHMJm/FLy890DDHskxawrvISio2nhGq3+\ny+uOYW7E5UNPfDbnWmAO6I+Lc0w0dT6v/G/+LGil4QJAGq6G6Kou30939AGtzoEHXQCNMepy\nzM5X8j71KHhXn35nxYiKIy4+c7QcDwoCgzm0+PNjpbFVUV1g2X6ehd7qMQJBAK7z1/rD4am4\nY/oTtvOEA1r6X/lChATc0QPO6tmXQ1iLtYn3RhTLEAu+3GbcxPVQI64FxMGnoc4Iz3QpQfgH\nGcECQHkGapH1xgsFy4DuUaMfE1hhmw3YU+R0PpvJT6JUIwzrnqwAyqlY9Y4EMotOlrBsX56I\nwvMlPd+L77KgNvYqT34=\n-----END RSA PRIVATE KEY-----\n","type":"string","flags":null,"created_at":"2022-10-27 12:58:31","created_by":"1","updated_at":"2022-10-27 12:58:31","updated_by":"1"},{"id":"635a807757207246b927a78a","group":"core","key":"members_public_key","value":"-----BEGIN RSA PUBLIC KEY-----\nMIGJAoGBAJbEShg3nL6gJmdOX+z9qHrpU4k9dCQF7P+w6yuvc2ga2BiUvK4erA+FXkJQzckS\nLTkLwLAIxIg7AJz6Ix16IWkHvJC574cucVtVrHAxKv6UgfglW727iWuvqsetRXbJQuljzOyC\nlwZ4p1FSjPuH41JPEYA9pSd6AyOmKDECqvsdAgMBAAE=\n-----END RSA PUBLIC KEY-----\n","type":"string","flags":null,"created_at":"2022-10-27 12:58:31","created_by":"1","updated_at":"2022-10-27 12:58:31","updated_by":"1"},{"id":"635a807757207246b927a78b","group":"core","key":"members_private_key","value":"-----BEGIN RSA PRIVATE KEY-----\nMIICXQIBAAKBgQCWxEoYN5y+oCZnTl/s/ah66VOJPXQkBez/sOsrr3NoGtgYlLyuHqwPhV5C\nUM3JEi05C8CwCMSIOwCc+iMdeiFpB7yQue+HLnFbVaxwMSr+lIH4JVu9u4lrr6rHrUV2yULp\nY8zsgpcGeKdRUoz7h+NSTxGAPaUnegMjpigxAqr7HQIDAQABAoGBAIJN0EQx/HT88XQj1uB7\nM1xXwO1CgdiIjpdHD1pIX5RAbzh/hLtwowEfIaJrOBBqd09wiu8aBNJBPHxv7F2Tqr9KTfWl\nW1lfqvLQUN9XFgbqJ9UL1mmbtjSqTIEm1owpxPdGTRuzd2NsnqmUUGLMVhC72LlcRC1FlGyn\nUxeEusV5AkEAyYagHQnrnnk3MpSVV/6LqmhY5xTUPBmF+0r0SJ5MnmpXw1va3tIa0tJqIf+O\nQyWgHfhaJBlkOjQSm6gbz3OHowJBAL+FL+GsAaNGkDajLZWnSHAz5MZGTxkhx0/6tyYH02Fb\nQNiw6bhK2clGKemvX4aPjhSZmY/64k8kCMVxF4rCnj8CQQCHRBKyixcYzrnq/Gplnth2MAYE\nTSnLkUIqEvx2xbId3rk7yqrVRud0PIG6gkMl9NpNY4Z1lol8u7kFu8e27g/LAkABzZYy0LS/\nPcXTzdt7AjUrYUGxIC5UdT30Ic8hm4dA7mQA5kF9C69bNr7kRVNn5+gVh5Cri1ggGJ3Ahh0L\noGNvAkBtGsqOp0S6nEKfQG01AiQAiPsX6H+UVwaDo48P1KPbGfdxskfP45CrQZV1lm818md+\n0Y0EbgMDEdfJtfyEcByA\n-----END RSA PRIVATE KEY-----\n","type":"string","flags":null,"created_at":"2022-10-27 12:58:31","created_by":"1","updated_at":"2022-10-27 12:58:31","updated_by":"1"},{"id":"635a807757207246b927a78c","group":"core","key":"members_email_auth_secret","value":"53366d3a00ba9f6fcd97ba006d24a9d4f9e3811ec4b0f045e89ae0c6dd6eb34ec9aaba8b209235b488928227adf5fffee00a89fa2a1863c3a0e935f3822add91","type":"string","flags":null,"created_at":"2022-10-27 12:58:31","created_by":"1","updated_at":"2022-10-27 12:58:31","updated_by":"1"},{"id":"635a807757207246b927a78f","group":"site","key":"title","value":"柴魚筆記本","type":"string","flags":"PUBLIC","created_at":"2019-11-30 13:51:20","created_by":"1","updated_at":"2019-11-30 14:09:33","updated_by":"1"},{"id":"635a807757207246b927a790","group":"site","key":"description","value":"程式 • 軟體 • 攝影","type":"string","flags":"PUBLIC","created_at":"2019-11-30 13:51:20","created_by":"1","updated_at":"2019-11-30 15:56:33","updated_by":"1"},{"id":"635a807757207246b927a791","group":"site","key":"logo","value":null,"type":"string","flags":"PUBLIC","created_at":"2019-11-30 13:51:20","created_by":"1","updated_at":"2021-06-09 16:21:31","updated_by":"1"},{"id":"635a807757207246b927a792","group":"site","key":"cover_image","value":"__GHOST_URL__/content/images/2019/12/IMG_2313.jpg","type":"string","flags":null,"created_at":"2019-11-30 13:51:20","created_by":"1","updated_at":"2019-12-01 06:39:05","updated_by":"1"},{"id":"635a807757207246b927a793","group":"site","key":"icon","value":"__GHOST_URL__/content/images/2019/12/dog-breeder-small.ico","type":"string","flags":null,"created_at":"2019-11-30 13:51:20","created_by":"1","updated_at":"2019-12-15 08:32:00","updated_by":"1"},{"id":"635a807757207246b927a794","group":"site","key":"accent_color","value":"#15171A","type":"string","flags":"PUBLIC","created_at":"2021-05-31 19:35:35","created_by":"1","updated_at":"2021-05-31 19:35:35","updated_by":"1"},{"id":"635a807757207246b927a795","group":"site","key":"locale","value":"zh-Hant","type":"string","flags":null,"created_at":"2021-05-31 19:35:35","created_by":"1","updated_at":"2021-06-09 16:19:20","updated_by":"1"},{"id":"635a807757207246b927a796","group":"site","key":"timezone","value":"Asia/Singapore","type":"string","flags":null,"created_at":"2021-05-31 19:35:35","created_by":"1","updated_at":"2021-06-09 16:19:20","updated_by":"1"},{"id":"635a807757207246b927a797","group":"site","key":"codeinjection_head","value":null,"type":"string","flags":null,"created_at":"2021-05-31 19:35:35","created_by":"1","updated_at":"2021-05-31 19:35:35","updated_by":"1"},{"id":"635a807757207246b927a798","group":"site","key":"codeinjection_foot","value":null,"type":"string","flags":null,"created_at":"2021-05-31 19:35:35","created_by":"1","updated_at":"2021-05-31 19:35:35","updated_by":"1"},{"id":"635a807757207246b927a799","group":"site","key":"facebook","value":null,"type":"string","flags":null,"created_at":"2019-11-30 13:51:20","created_by":"1","updated_at":"2019-12-02 15:10:10","updated_by":"1"},{"id":"635a807757207246b927a79a","group":"site","key":"twitter","value":null,"type":"string","flags":null,"created_at":"2019-11-30 13:51:20","created_by":"1","updated_at":"2019-12-02 15:10:10","updated_by":"1"},{"id":"635a807757207246b927a79b","group":"site","key":"navigation","value":"[{\"label\":\"Home\",\"url\":\"/\"},{\"label\":\"Author\",\"url\":\"/author/katsuobushi/\"},{\"label\":\"Tags\",\"url\":\"/tags/\"},{\"label\":\"Golang\",\"url\":\"/tag/golang/\"}]","type":"array","flags":null,"created_at":"2019-11-30 13:51:20","created_by":"1","updated_at":"2021-06-14 22:07:12","updated_by":"1"},{"id":"635a807757207246b927a79c","group":"site","key":"secondary_navigation","value":"[{\"label\":\"Github\",\"url\":\"https://github.com/vincent87720\"},{\"label\":\"勞健保計算程式\",\"url\":\"https://vincent87720.github.io/lhipcp/\"}]","type":"array","flags":null,"created_at":"2021-05-31 19:35:35","created_by":"1","updated_at":"2021-06-14 22:06:45","updated_by":"1"},{"id":"635a807757207246b927a79d","group":"site","key":"meta_title","value":null,"type":"string","flags":null,"created_at":"2019-11-30 13:51:20","created_by":"1","updated_at":"2019-11-30 13:51:20","updated_by":"1"},{"id":"635a807757207246b927a79e","group":"site","key":"meta_description","value":null,"type":"string","flags":null,"created_at":"2019-11-30 13:51:20","created_by":"1","updated_at":"2019-11-30 13:51:20","updated_by":"1"},{"id":"635a807757207246b927a79f","group":"site","key":"og_image","value":"__GHOST_URL__/content/images/2021/06/IMG_2313-1.jpg","type":"string","flags":null,"created_at":"2019-11-30 13:51:20","created_by":"1","updated_at":"2021-06-09 16:22:30","updated_by":"1"},{"id":"635a807757207246b927a7a0","group":"site","key":"og_title","value":null,"type":"string","flags":null,"created_at":"2019-11-30 13:51:20","created_by":"1","updated_at":"2019-11-30 13:51:20","updated_by":"1"},{"id":"635a807757207246b927a7a1","group":"site","key":"og_description","value":null,"type":"string","flags":null,"created_at":"2019-11-30 13:51:20","created_by":"1","updated_at":"2019-11-30 13:51:20","updated_by":"1"},{"id":"635a807757207246b927a7a2","group":"site","key":"twitter_image","value":"__GHOST_URL__/content/images/2021/06/IMG_2313.jpg","type":"string","flags":null,"created_at":"2019-11-30 13:51:20","created_by":"1","updated_at":"2021-06-09 16:22:30","updated_by":"1"},{"id":"635a807757207246b927a7a3","group":"site","key":"twitter_title","value":null,"type":"string","flags":null,"created_at":"2019-11-30 13:51:20","created_by":"1","updated_at":"2019-11-30 13:51:20","updated_by":"1"},{"id":"635a807757207246b927a7a4","group":"site","key":"twitter_description","value":null,"type":"string","flags":null,"created_at":"2019-11-30 13:51:20","created_by":"1","updated_at":"2019-11-30 13:51:20","updated_by":"1"},{"id":"635a807757207246b927a7a5","group":"theme","key":"active_theme","value":"casper","type":"string","flags":"RO","created_at":"2022-10-27 12:58:31","created_by":"1","updated_at":"2022-10-27 12:58:31","updated_by":"1"},{"id":"635a807757207246b927a7a6","group":"private","key":"is_private","value":"false","type":"boolean","flags":null,"created_at":"2022-10-27 12:58:31","created_by":"1","updated_at":"2022-10-27 12:58:31","updated_by":"1"},{"id":"635a807757207246b927a7a7","group":"private","key":"password","value":"","type":"string","flags":null,"created_at":"2022-10-27 12:58:31","created_by":"1","updated_at":"2022-10-27 12:58:31","updated_by":"1"},{"id":"635a807757207246b927a7a8","group":"private","key":"public_hash","value":"bc797acf0f62437496e737c288e90b","type":"string","flags":null,"created_at":"2019-11-30 13:51:20","created_by":"1","updated_at":"2019-11-30 13:51:20","updated_by":"1"},{"id":"635a807757207246b927a7a9","group":"members","key":"default_content_visibility","value":"public","type":"string","flags":null,"created_at":"2019-11-30 13:51:20","created_by":"1","updated_at":"2019-11-30 13:51:20","updated_by":"1"},{"id":"635a807757207246b927a7aa","group":"members","key":"default_content_visibility_tiers","value":"[]","type":"array","flags":null,"created_at":"2022-10-27 12:58:31","created_by":"1","updated_at":"2022-10-27 12:58:31","updated_by":"1"},{"id":"635a807757207246b927a7ab","group":"members","key":"members_signup_access","value":"all","type":"string","flags":null,"created_at":"2021-05-31 19:35:35","created_by":"1","updated_at":"2021-05-31 19:35:35","updated_by":"1"},{"id":"635a807757207246b927a7ac","group":"members","key":"members_support_address","value":"noreply","type":"string","flags":"PUBLIC,RO","created_at":"2022-10-27 12:58:31","created_by":"1","updated_at":"2022-10-27 12:58:31","updated_by":"1"},{"id":"635a807757207246b927a7af","group":"members","key":"stripe_plans","value":"[{\"name\":\"Monthly\",\"currency\":\"usd\",\"interval\":\"month\",\"amount\":0},{\"name\":\"Yearly\",\"currency\":\"usd\",\"interval\":\"year\",\"amount\":0}]","type":"array","flags":null,"created_at":"2021-05-31 19:35:35","created_by":"1","updated_at":"2021-05-31 19:35:35","updated_by":"1"},{"id":"635a807757207246b927a7b2","group":"members","key":"stripe_connect_livemode","value":null,"type":"boolean","flags":null,"created_at":"2021-05-31 19:35:35","created_by":"1","updated_at":"2021-05-31 19:35:35","updated_by":"1"},{"id":"635a807757207246b927a7b3","group":"members","key":"stripe_connect_display_name","value":null,"type":"string","flags":null,"created_at":"2021-05-31 19:35:35","created_by":"1","updated_at":"2021-05-31 19:35:35","updated_by":"1"},{"id":"635a807757207246b927a7b5","group":"members","key":"members_monthly_price_id","value":null,"type":"string","flags":null,"created_at":"2022-10-27 12:58:31","created_by":"1","updated_at":"2022-10-27 12:58:31","updated_by":"1"},{"id":"635a807757207246b927a7b6","group":"members","key":"members_yearly_price_id","value":null,"type":"string","flags":null,"created_at":"2022-10-27 12:58:31","created_by":"1","updated_at":"2022-10-27 12:58:31","updated_by":"1"},{"id":"635a807757207246b927a7b7","group":"portal","key":"portal_name","value":"true","type":"boolean","flags":null,"created_at":"2021-05-31 19:35:35","created_by":"1","updated_at":"2021-05-31 19:35:35","updated_by":"1"},{"id":"635a807757207246b927a7b8","group":"portal","key":"portal_button","value":"false","type":"boolean","flags":null,"created_at":"2021-05-31 19:35:35","created_by":"1","updated_at":"2021-05-31 19:35:35","updated_by":"1"},{"id":"635a807757207246b927a7b9","group":"portal","key":"portal_plans","value":"[\"free\",\"monthly\",\"yearly\"]","type":"array","flags":null,"created_at":"2021-05-31 19:35:35","created_by":"1","updated_at":"2021-06-09 16:05:23","updated_by":"1"},{"id":"635a807757207246b927a7ba","group":"portal","key":"portal_products","value":"[]","type":"array","flags":null,"created_at":"2022-10-27 12:58:31","created_by":"1","updated_at":"2022-10-27 12:58:31","updated_by":"1"},{"id":"635a807757207246b927a7bb","group":"portal","key":"portal_button_style","value":"icon-and-text","type":"string","flags":null,"created_at":"2021-05-31 19:35:35","created_by":"1","updated_at":"2021-05-31 19:35:35","updated_by":"1"},{"id":"635a807757207246b927a7bc","group":"portal","key":"portal_button_icon","value":null,"type":"string","flags":null,"created_at":"2021-05-31 19:35:35","created_by":"1","updated_at":"2021-05-31 19:35:35","updated_by":"1"},{"id":"635a807757207246b927a7bd","group":"portal","key":"portal_button_signup_text","value":"Subscribe","type":"string","flags":null,"created_at":"2021-05-31 19:35:35","created_by":"1","updated_at":"2021-05-31 19:35:35","updated_by":"1"},{"id":"635a807757207246b927a7be","group":"email","key":"mailgun_domain","value":null,"type":"string","flags":null,"created_at":"2021-05-31 19:35:35","created_by":"1","updated_at":"2021-05-31 19:35:35","updated_by":"1"},{"id":"635a807757207246b927a7bf","group":"email","key":"mailgun_api_key","value":null,"type":"string","flags":null,"created_at":"2021-05-31 19:35:35","created_by":"1","updated_at":"2021-05-31 19:35:35","updated_by":"1"},{"id":"635a807757207246b927a7c0","group":"email","key":"mailgun_base_url","value":null,"type":"string","flags":null,"created_at":"2021-05-31 19:35:35","created_by":"1","updated_at":"2021-05-31 19:35:35","updated_by":"1"},{"id":"635a807757207246b927a7c1","group":"email","key":"email_track_opens","value":"true","type":"boolean","flags":null,"created_at":"2021-05-31 19:35:35","created_by":"1","updated_at":"2021-05-31 19:35:35","updated_by":"1"},{"id":"635a807757207246b927a7c2","group":"email","key":"email_track_clicks","value":"true","type":"boolean","flags":null,"created_at":"2022-10-27 12:58:31","created_by":"1","updated_at":"2022-10-27 12:58:31","updated_by":"1"},{"id":"635a807757207246b927a7c4","group":"amp","key":"amp","value":"true","type":"boolean","flags":null,"created_at":"2019-11-30 13:51:20","created_by":"1","updated_at":"2019-11-30 13:51:20","updated_by":"1"},{"id":"635a807757207246b927a7c5","group":"amp","key":"amp_gtag_id","value":null,"type":"string","flags":null,"created_at":"2021-05-31 19:35:35","created_by":"1","updated_at":"2021-05-31 19:35:35","updated_by":"1"},{"id":"635a807757207246b927a7c6","group":"firstpromoter","key":"firstpromoter","value":"false","type":"boolean","flags":null,"created_at":"2021-05-31 19:35:35","created_by":"1","updated_at":"2021-05-31 19:35:35","updated_by":"1"},{"id":"635a807757207246b927a7c7","group":"firstpromoter","key":"firstpromoter_id","value":null,"type":"string","flags":null,"created_at":"2021-05-31 19:35:35","created_by":"1","updated_at":"2021-05-31 19:35:35","updated_by":"1"},{"id":"635a807757207246b927a7c8","group":"labs","key":"labs","value":"{}","type":"object","flags":null,"created_at":"2019-11-30 13:51:20","created_by":"1","updated_at":"2019-12-06 15:02:54","updated_by":"1"},{"id":"635a807757207246b927a7c9","group":"slack","key":"slack_url","value":"","type":"string","flags":null,"created_at":"2022-10-27 12:58:31","created_by":"1","updated_at":"2022-10-27 12:58:31","updated_by":"1"},{"id":"635a807757207246b927a7ca","group":"slack","key":"slack_username","value":"Ghost","type":"string","flags":null,"created_at":"2019-11-30 13:51:20","created_by":"1","updated_at":"2019-11-30 15:56:33","updated_by":"1"},{"id":"635a807757207246b927a7cb","group":"unsplash","key":"unsplash","value":"true","type":"boolean","flags":null,"created_at":"2019-11-30 13:51:20","created_by":"1","updated_at":"2019-11-30 15:56:33","updated_by":"1"},{"id":"635a807757207246b927a7cc","group":"views","key":"shared_views","value":"[]","type":"array","flags":null,"created_at":"2021-05-31 19:35:35","created_by":"1","updated_at":"2021-05-31 19:35:35","updated_by":"1"},{"id":"635a807757207246b927a7cd","group":"editor","key":"editor_default_email_recipients","value":"visibility","type":"string","flags":null,"created_at":"2022-10-27 12:58:31","created_by":"1","updated_at":"2022-10-27 12:58:31","updated_by":"1"},{"id":"635a807757207246b927a7ce","group":"editor","key":"editor_default_email_recipients_filter","value":"all","type":"string","flags":null,"created_at":"2022-10-27 12:58:31","created_by":"1","updated_at":"2022-10-27 12:58:31","updated_by":"1"},{"id":"635a807757207246b927a7cf","group":"comments","key":"comments_enabled","value":"off","type":"string","flags":null,"created_at":"2022-10-27 12:58:31","created_by":"1","updated_at":"2022-10-27 12:58:31","updated_by":"1"}],"tags":[{"id":"635a807457207246b927a5e8","name":"News","slug":"news","description":null,"feature_image":null,"parent_id":null,"visibility":"public","og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"meta_title":null,"meta_description":null,"codeinjection_head":null,"codeinjection_foot":null,"canonical_url":null,"accent_color":null,"created_at":"2022-10-27 12:58:28","created_by":"1","updated_at":"2022-10-27 12:58:28","updated_by":"1"},{"id":"635a812457207246b927a7f1","name":"golang","slug":"golang","description":null,"feature_image":"__GHOST_URL__/content/images/2020/09/golang-long-1.jpeg","parent_id":null,"visibility":"public","og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"meta_title":null,"meta_description":null,"codeinjection_head":null,"codeinjection_foot":null,"canonical_url":null,"accent_color":null,"created_at":"2019-12-21 12:47:00","created_by":"1","updated_at":"2020-10-27 18:26:43","updated_by":null},{"id":"635a812457207246b927a7f4","name":"golangPackage","slug":"golangpackage","description":null,"feature_image":"__GHOST_URL__/content/images/2020/09/golang-long-3.jpeg","parent_id":null,"visibility":"public","og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"meta_title":null,"meta_description":null,"codeinjection_head":null,"codeinjection_foot":null,"canonical_url":null,"accent_color":null,"created_at":"2020-01-26 15:49:33","created_by":"1","updated_at":"2020-10-27 18:26:43","updated_by":null},{"id":"635a812457207246b927a7f5","name":"clover","slug":"clover","description":null,"feature_image":"__GHOST_URL__/content/images/2021/06/clover.png","parent_id":null,"visibility":"public","og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"meta_title":null,"meta_description":null,"codeinjection_head":null,"codeinjection_foot":null,"canonical_url":null,"accent_color":null,"created_at":"2020-02-22 14:16:00","created_by":"1","updated_at":"2021-06-09 16:10:48","updated_by":null},{"id":"635a812457207246b927a7f6","name":"hackintosh","slug":"hackintosh","description":null,"feature_image":null,"parent_id":null,"visibility":"public","og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"meta_title":null,"meta_description":null,"codeinjection_head":null,"codeinjection_foot":null,"canonical_url":null,"accent_color":null,"created_at":"2020-02-22 14:16:00","created_by":"1","updated_at":"2020-02-22 14:16:00","updated_by":null},{"id":"635a812457207246b927a7f3","name":"crawler","slug":"crawler","description":null,"feature_image":null,"parent_id":null,"visibility":"public","og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"meta_title":null,"meta_description":null,"codeinjection_head":null,"codeinjection_foot":null,"canonical_url":null,"accent_color":null,"created_at":"2020-01-03 17:27:00","created_by":"1","updated_at":"2020-01-03 17:27:00","updated_by":null},{"id":"635a812457207246b927a7f8","name":"Qt","slug":"qt","description":null,"feature_image":null,"parent_id":null,"visibility":"public","og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"meta_title":null,"meta_description":null,"codeinjection_head":null,"codeinjection_foot":null,"canonical_url":null,"accent_color":null,"created_at":"2020-06-12 09:09:08","created_by":"1","updated_at":"2020-06-12 09:09:08","updated_by":null},{"id":"635a812457207246b927a7fd","name":"mqtt","slug":"mqtt","description":null,"feature_image":"__GHOST_URL__/content/images/2021/06/MQTT.png","parent_id":null,"visibility":"public","og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"meta_title":null,"meta_description":null,"codeinjection_head":null,"codeinjection_foot":null,"canonical_url":null,"accent_color":null,"created_at":"2020-11-24 18:01:05","created_by":"1","updated_at":"2021-06-09 16:12:46","updated_by":null},{"id":"635a812457207246b927a7fa","name":"NuGet","slug":"nuget","description":null,"feature_image":"__GHOST_URL__/content/images/2021/06/dotNET.png","parent_id":null,"visibility":"public","og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"meta_title":null,"meta_description":null,"codeinjection_head":null,"codeinjection_foot":null,"canonical_url":null,"accent_color":null,"created_at":"2020-09-02 20:15:16","created_by":"1","updated_at":"2021-06-09 16:12:59","updated_by":null},{"id":"635a812457207246b927a7ff","name":"ESP8266","slug":"esp8266","description":null,"feature_image":"__GHOST_URL__/content/images/2021/06/pexels-skitterphoto-1448561.jpg","parent_id":null,"visibility":"public","og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"meta_title":null,"meta_description":null,"codeinjection_head":null,"codeinjection_foot":null,"canonical_url":null,"accent_color":null,"created_at":"2021-02-22 13:17:13","created_by":"1","updated_at":"2021-06-09 16:11:37","updated_by":null},{"id":"635a812457207246b927a800","name":"zsh","slug":"zsh","description":null,"feature_image":"__GHOST_URL__/content/images/2021/06/zsh.png","parent_id":null,"visibility":"public","og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"meta_title":null,"meta_description":null,"codeinjection_head":null,"codeinjection_foot":null,"canonical_url":null,"accent_color":null,"created_at":"2021-06-04 16:31:32","created_by":"1","updated_at":"2021-06-09 16:14:35","updated_by":null},{"id":"635a812457207246b927a7f9","name":"C#","slug":"csharp","description":null,"feature_image":"__GHOST_URL__/content/images/2020/09/dotNET-1.png","parent_id":null,"visibility":"public","og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"meta_title":null,"meta_description":null,"codeinjection_head":null,"codeinjection_foot":null,"canonical_url":null,"accent_color":null,"created_at":"2020-09-02 20:15:16","created_by":"1","updated_at":"2020-09-02 21:06:24","updated_by":null},{"id":"635a812457207246b927a802","name":"Pattern","slug":"pattern","description":null,"feature_image":null,"parent_id":null,"visibility":"public","og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"meta_title":null,"meta_description":null,"codeinjection_head":null,"codeinjection_foot":null,"canonical_url":null,"accent_color":null,"created_at":"2021-06-14 09:19:50","created_by":"1","updated_at":"2021-06-14 09:19:50","updated_by":null},{"id":"635a812457207246b927a7f7","name":"C++","slug":"cpp","description":null,"feature_image":"__GHOST_URL__/content/images/2021/06/C--.jpg","parent_id":null,"visibility":"public","og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"meta_title":null,"meta_description":null,"codeinjection_head":null,"codeinjection_foot":null,"canonical_url":null,"accent_color":null,"created_at":"2020-03-18 07:42:51","created_by":"1","updated_at":"2021-06-09 16:10:06","updated_by":null},{"id":"635a812457207246b927a7f2","name":"python","slug":"python","description":null,"feature_image":"__GHOST_URL__/content/images/2021/06/python-logo.jpg","parent_id":null,"visibility":"public","og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"meta_title":null,"meta_description":null,"codeinjection_head":null,"codeinjection_foot":null,"canonical_url":null,"accent_color":null,"created_at":"2020-01-03 17:27:00","created_by":"1","updated_at":"2021-11-24 15:35:25","updated_by":null},{"id":"635a812457207246b927a803","name":"network","slug":"network","description":null,"feature_image":"__GHOST_URL__/content/images/2021/07/communication-4871245-1.jpg","parent_id":null,"visibility":"public","og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"meta_title":null,"meta_description":null,"codeinjection_head":null,"codeinjection_foot":null,"canonical_url":null,"accent_color":null,"created_at":"2021-07-22 15:28:46","created_by":"1","updated_at":"2021-07-22 15:30:55","updated_by":null},{"id":"635a812457207246b927a7fe","name":"VisualStudioCode","slug":"visualstudiocode","description":null,"feature_image":"__GHOST_URL__/content/images/2021/06/visualStudioCode.png","parent_id":null,"visibility":"public","og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"meta_title":null,"meta_description":null,"codeinjection_head":null,"codeinjection_foot":null,"canonical_url":null,"accent_color":null,"created_at":"2021-01-21 10:57:39","created_by":"1","updated_at":"2021-06-09 16:14:18","updated_by":null},{"id":"635a812457207246b927a7fc","name":"Vue","slug":"vue","description":null,"feature_image":"__GHOST_URL__/content/images/2021/06/vue.jpg","parent_id":null,"visibility":"public","og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"meta_title":null,"meta_description":null,"codeinjection_head":null,"codeinjection_foot":null,"canonical_url":null,"accent_color":null,"created_at":"2020-10-27 18:12:29","created_by":"1","updated_at":"2021-06-09 16:14:27","updated_by":null},{"id":"635a812457207246b927a7fb","name":"PostgreSQL","slug":"postgresql","description":null,"feature_image":null,"parent_id":null,"visibility":"public","og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"meta_title":null,"meta_description":null,"codeinjection_head":null,"codeinjection_foot":null,"canonical_url":null,"accent_color":null,"created_at":"2020-09-02 20:15:16","created_by":"1","updated_at":"2020-09-02 20:15:16","updated_by":null},{"id":"635a812457207246b927a801","name":"Ubuntu","slug":"ubuntu","description":null,"feature_image":null,"parent_id":null,"visibility":"public","og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"meta_title":null,"meta_description":null,"codeinjection_head":null,"codeinjection_foot":null,"canonical_url":null,"accent_color":null,"created_at":"2021-06-04 16:31:32","created_by":"1","updated_at":"2021-06-04 16:31:32","updated_by":null},{"id":"635a812457207246b927a804","name":"TCP","slug":"tcp","description":null,"feature_image":"__GHOST_URL__/content/images/2021/07/communication-4871245-2.jpg","parent_id":null,"visibility":"public","og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"meta_title":null,"meta_description":null,"codeinjection_head":null,"codeinjection_foot":null,"canonical_url":null,"accent_color":null,"created_at":"2021-07-22 15:28:46","created_by":"1","updated_at":"2021-07-22 15:31:15","updated_by":null}],"posts_tags":[{"id":"635a807557207246b927a780","post_id":"635a807457207246b927a655","tag_id":"635a807457207246b927a5e8","sort_order":0},{"id":"635a812457207246b927a828","post_id":"635a812457207246b927a809","tag_id":"635a812457207246b927a7f1","sort_order":0},{"id":"635a812457207246b927a82b","post_id":"635a812457207246b927a80a","tag_id":"635a812457207246b927a7f1","sort_order":0},{"id":"635a812457207246b927a82e","post_id":"635a812457207246b927a80b","tag_id":"635a812457207246b927a7f2","sort_order":0},{"id":"635a812457207246b927a82f","post_id":"635a812457207246b927a80b","tag_id":"635a812457207246b927a7f3","sort_order":1},{"id":"635a812457207246b927a834","post_id":"635a812457207246b927a80d","tag_id":"635a812457207246b927a7f1","sort_order":0},{"id":"635a812457207246b927a835","post_id":"635a812457207246b927a80d","tag_id":"635a812457207246b927a7f4","sort_order":1},{"id":"635a812457207246b927a838","post_id":"635a812457207246b927a80e","tag_id":"635a812457207246b927a7f1","sort_order":0},{"id":"635a812457207246b927a83b","post_id":"635a812457207246b927a80f","tag_id":"635a812457207246b927a7f5","sort_order":0},{"id":"635a812457207246b927a83c","post_id":"635a812457207246b927a80f","tag_id":"635a812457207246b927a7f6","sort_order":1},{"id":"635a812457207246b927a83f","post_id":"635a812457207246b927a810","tag_id":"635a812457207246b927a7f7","sort_order":0},{"id":"635a812457207246b927a842","post_id":"635a812457207246b927a811","tag_id":"635a812457207246b927a7f4","sort_order":0},{"id":"635a812457207246b927a843","post_id":"635a812457207246b927a811","tag_id":"635a812457207246b927a7f1","sort_order":1},{"id":"635a812457207246b927a847","post_id":"635a812457207246b927a813","tag_id":"635a812457207246b927a7f8","sort_order":0},{"id":"635a812557207246b927a84a","post_id":"635a812457207246b927a814","tag_id":"635a812457207246b927a7f1","sort_order":0},{"id":"635a812557207246b927a84b","post_id":"635a812457207246b927a814","tag_id":"635a812457207246b927a7f4","sort_order":1},{"id":"635a812557207246b927a84e","post_id":"635a812457207246b927a815","tag_id":"635a812457207246b927a7f1","sort_order":0},{"id":"635a812557207246b927a851","post_id":"635a812457207246b927a816","tag_id":"635a812457207246b927a7f9","sort_order":0},{"id":"635a812557207246b927a852","post_id":"635a812457207246b927a816","tag_id":"635a812457207246b927a7fa","sort_order":1},{"id":"635a812557207246b927a853","post_id":"635a812457207246b927a816","tag_id":"635a812457207246b927a7fb","sort_order":2},{"id":"635a812557207246b927a856","post_id":"635a812457207246b927a817","tag_id":"635a812457207246b927a7fc","sort_order":0},{"id":"635a812557207246b927a859","post_id":"635a812457207246b927a818","tag_id":"635a812457207246b927a7fc","sort_order":0},{"id":"635a812557207246b927a85c","post_id":"635a812457207246b927a819","tag_id":"635a812457207246b927a7fc","sort_order":0},{"id":"635a812557207246b927a860","post_id":"635a812457207246b927a81b","tag_id":"635a812457207246b927a7fd","sort_order":0},{"id":"635a812557207246b927a863","post_id":"635a812457207246b927a81c","tag_id":"635a812457207246b927a7fe","sort_order":0},{"id":"635a812557207246b927a866","post_id":"635a812457207246b927a81d","tag_id":"635a812457207246b927a7ff","sort_order":0},{"id":"635a812557207246b927a869","post_id":"635a812457207246b927a81e","tag_id":"635a812457207246b927a800","sort_order":0},{"id":"635a812557207246b927a86a","post_id":"635a812457207246b927a81e","tag_id":"635a812457207246b927a801","sort_order":1},{"id":"635a812557207246b927a86d","post_id":"635a812457207246b927a81f","tag_id":"635a812457207246b927a7f1","sort_order":0},{"id":"635a812557207246b927a870","post_id":"635a812457207246b927a820","tag_id":"635a812457207246b927a802","sort_order":0},{"id":"635a812557207246b927a873","post_id":"635a812457207246b927a821","tag_id":"635a812457207246b927a803","sort_order":0},{"id":"635a812557207246b927a874","post_id":"635a812457207246b927a821","tag_id":"635a812457207246b927a804","sort_order":1},{"id":"635a812557207246b927a877","post_id":"635a812457207246b927a822","tag_id":"635a812457207246b927a7f2","sort_order":0},{"id":"635a812557207246b927a87a","post_id":"635a812457207246b927a823","tag_id":"635a812457207246b927a7f2","sort_order":0}],"products":[{"id":"635a807457207246b927a5e5","name":"Free","slug":"free","active":1,"welcome_page_url":null,"visibility":"public","trial_days":0,"description":null,"type":"free","currency":null,"monthly_price":null,"yearly_price":null,"created_at":"2022-10-27 12:58:28","updated_at":"2022-10-27 12:58:28","monthly_price_id":null,"yearly_price_id":null},{"id":"635a807457207246b927a5e6","name":"柴魚筆記本","slug":"default-product","active":1,"welcome_page_url":null,"visibility":"public","trial_days":0,"description":null,"type":"paid","currency":"usd","monthly_price":500,"yearly_price":5000,"created_at":"2022-10-27 12:58:28","updated_at":"2022-10-27 13:00:58","monthly_price_id":null,"yearly_price_id":null}],"offers":[],"benefits":[],"products_benefits":[],"posts_products":[],"offer_redemptions":[],"stripe_products":[],"stripe_prices":[],"snippets":[],"custom_theme_settings":[{"id":"635a807857207246b927a7d4","theme":"casper","key":"title_font","type":"select","value":"Modern sans-serif"},{"id":"635a807857207246b927a7d5","theme":"casper","key":"body_font","type":"select","value":"Elegant serif"},{"id":"635a807857207246b927a7d6","theme":"casper","key":"show_publication_cover","type":"boolean","value":"true"},{"id":"635a807857207246b927a7d7","theme":"casper","key":"header_style","type":"select","value":"Center aligned"},{"id":"635a807857207246b927a7d8","theme":"casper","key":"show_logo_in_navigation","type":"boolean","value":"false"},{"id":"635a807857207246b927a7d9","theme":"casper","key":"feed_layout","type":"select","value":"Classic"},{"id":"635a807857207246b927a7da","theme":"casper","key":"color_scheme","type":"select","value":"Light"},{"id":"635a807857207246b927a7db","theme":"casper","key":"post_image_style","type":"select","value":"Wide"},{"id":"635a807857207246b927a7dc","theme":"casper","key":"email_signup_text","type":"text","value":"Sign up for more like this."},{"id":"635a807857207246b927a7dd","theme":"casper","key":"show_recent_posts_footer","type":"boolean","value":"true"}]}}