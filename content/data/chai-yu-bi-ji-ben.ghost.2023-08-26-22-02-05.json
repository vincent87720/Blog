{"meta":{"exported_on":1693087325254,"version":"5.60.0"},"data":{"newsletters":[{"id":"635a807457207246b927a5e7","uuid":"60c527ca-8f05-439f-badf-73e2bd8517a0","name":"柴魚筆記本","description":null,"feedback_enabled":0,"slug":"default-newsletter","sender_name":null,"sender_email":null,"sender_reply_to":"newsletter","status":"active","visibility":"members","subscribe_on_signup":1,"sort_order":0,"header_image":null,"show_header_icon":1,"show_header_title":1,"title_font_category":"sans_serif","title_alignment":"center","show_feature_image":1,"body_font_category":"sans_serif","footer_content":null,"show_badge":1,"show_header_name":0,"created_at":"2022-10-27 12:58:28","updated_at":"2022-10-27 13:00:58"}],"posts":[{"id":"635a816a57207246b927a8a1","uuid":"9b4ecfc1-a7ae-4010-92c0-ff33c39cc24e","title":"[Ghost]使用Ghost和GitHub Pages建立網頁","slug":"ghost-github-webpage","mobiledoc":"{\"version\":\"0.3.1\",\"atoms\":[[\"soft-return\",\"\",{}],[\"soft-return\",\"\",{}],[\"soft-return\",\"\",{}],[\"soft-return\",\"\",{}],[\"soft-return\",\"\",{}],[\"soft-return\",\"\",{}],[\"soft-return\",\"\",{}],[\"soft-return\",\"\",{}],[\"soft-return\",\"\",{}],[\"soft-return\",\"\",{}]],\"cards\":[[\"hr\",{\"_config\":{\"url\":\"http://localhost:2368/\",\"adminUrl\":null,\"apiVersions\":{\"all\":[\"v2\",\"v3\",\"canary\"],\"canary\":{\"admin\":\"canary/admin\",\"content\":\"canary/content\",\"members\":\"canary/members\"},\"v3\":{\"admin\":\"v3/admin\",\"content\":\"v3/content\",\"members\":\"v3/members\"},\"v2\":{\"admin\":\"v2/admin\",\"content\":\"v2/content\"}},\"slugs\":[\"ghost\",\"rss\",\"amp\"],\"redirectCacheMaxAge\":31536000,\"baseApiPath\":\"/ghost/api\",\"defaultApiVersion\":\"v3\",\"defaultApiType\":\"content\",\"staticImageUrlPrefix\":\"content/images\",\"cardTransformers\":[{\"name\":\"card-markdown\",\"type\":\"dom\"},{\"name\":\"code\",\"type\":\"dom\"},{\"name\":\"embed\",\"type\":\"dom\"},{\"name\":\"bookmark\",\"type\":\"dom\"},{\"name\":\"hr\",\"type\":\"dom\"},{\"name\":\"html\",\"type\":\"dom\"},{\"name\":\"image\",\"type\":\"dom\"},{\"name\":\"markdown\",\"type\":\"dom\"},{\"name\":\"gallery\",\"type\":\"dom\"}]},\"_defaultApiPathOptions\":{\"baseApiPath\":\"/ghost/api\",\"version\":\"v3\",\"type\":\"content\",\"apiVersions\":{\"all\":[\"v2\",\"v3\",\"canary\"],\"canary\":{\"admin\":\"canary/admin\",\"content\":\"canary/content\",\"members\":\"canary/members\"},\"v3\":{\"admin\":\"v3/admin\",\"content\":\"v3/content\",\"members\":\"v3/members\"},\"v2\":{\"admin\":\"v2/admin\",\"content\":\"v2/content\"}}}}],[\"markdown\",{\"markdown\":\"    npm install ghost-cli@latest -g\"}],[\"markdown\",{\"markdown\":\"    ghost install local\"}],[\"image\",{\"src\":\"__GHOST_URL__/content/images/2019/11/bandicam-2019-12-01-00-43-12-343-2.jpg\"}],[\"markdown\",{\"markdown\":\"    git init git add -A git commit -m \\\"Initial repository\\\"\"}],[\"markdown\",{\"markdown\":\"    npm install \\n    git add -A \\n    git commit -m 'Installed Node dependencies'\"}],[\"markdown\",{\"markdown\":\"    npm install -g knex-migrator\"}],[\"markdown\",{\"markdown\":\"    knex-migrator\"}],[\"hr\",{\"_config\":{\"url\":\"http://localhost:2368/\",\"adminUrl\":null,\"apiVersions\":{\"all\":[\"v2\",\"v3\",\"canary\"],\"canary\":{\"admin\":\"canary/admin\",\"content\":\"canary/content\",\"members\":\"canary/members\"},\"v3\":{\"admin\":\"v3/admin\",\"content\":\"v3/content\",\"members\":\"v3/members\"},\"v2\":{\"admin\":\"v2/admin\",\"content\":\"v2/content\"}},\"slugs\":[\"ghost\",\"rss\",\"amp\"],\"redirectCacheMaxAge\":31536000,\"baseApiPath\":\"/ghost/api\",\"defaultApiVersion\":\"v3\",\"defaultApiType\":\"content\",\"staticImageUrlPrefix\":\"content/images\",\"cardTransformers\":[{\"name\":\"card-markdown\",\"type\":\"dom\"},{\"name\":\"code\",\"type\":\"dom\"},{\"name\":\"embed\",\"type\":\"dom\"},{\"name\":\"bookmark\",\"type\":\"dom\"},{\"name\":\"hr\",\"type\":\"dom\"},{\"name\":\"html\",\"type\":\"dom\"},{\"name\":\"image\",\"type\":\"dom\"},{\"name\":\"markdown\",\"type\":\"dom\"},{\"name\":\"gallery\",\"type\":\"dom\"}]},\"_defaultApiPathOptions\":{\"baseApiPath\":\"/ghost/api\",\"version\":\"v3\",\"type\":\"content\",\"apiVersions\":{\"all\":[\"v2\",\"v3\",\"canary\"],\"canary\":{\"admin\":\"canary/admin\",\"content\":\"canary/content\",\"members\":\"canary/members\"},\"v3\":{\"admin\":\"v3/admin\",\"content\":\"v3/content\",\"members\":\"v3/members\"},\"v2\":{\"admin\":\"v2/admin\",\"content\":\"v2/content\"}}}}],[\"markdown\",{\"markdown\":\"    ghost start\"}],[\"image\",{\"src\":\"__GHOST_URL__/content/images/2019/11/bandicam-2019-12-01-00-50-41-339-1.jpg\"}],[\"image\",{\"src\":\"__GHOST_URL__/content/images/2019/11/bandicam-2019-12-01-00-54-54-621-1.jpg\"}],[\"image\",{\"src\":\"__GHOST_URL__/content/images/2019/11/bandicam-2019-12-01-00-54-57-345-1.jpg\"}],[\"image\",{\"src\":\"__GHOST_URL__/content/images/2019/11/bandicam-2019-12-01-00-55-57-353-1.jpg\"}],[\"markdown\",{\"markdown\":\"    git add -A \\n    git commit -m 'Finished local Ghost setup'\"}],[\"hr\",{\"_config\":{\"url\":\"http://localhost:2368/\",\"adminUrl\":null,\"apiVersions\":{\"all\":[\"v2\",\"v3\",\"canary\"],\"canary\":{\"admin\":\"canary/admin\",\"content\":\"canary/content\",\"members\":\"canary/members\"},\"v3\":{\"admin\":\"v3/admin\",\"content\":\"v3/content\",\"members\":\"v3/members\"},\"v2\":{\"admin\":\"v2/admin\",\"content\":\"v2/content\"}},\"slugs\":[\"ghost\",\"rss\",\"amp\"],\"redirectCacheMaxAge\":31536000,\"baseApiPath\":\"/ghost/api\",\"defaultApiVersion\":\"v3\",\"defaultApiType\":\"content\",\"staticImageUrlPrefix\":\"content/images\",\"cardTransformers\":[{\"name\":\"card-markdown\",\"type\":\"dom\"},{\"name\":\"code\",\"type\":\"dom\"},{\"name\":\"embed\",\"type\":\"dom\"},{\"name\":\"bookmark\",\"type\":\"dom\"},{\"name\":\"hr\",\"type\":\"dom\"},{\"name\":\"html\",\"type\":\"dom\"},{\"name\":\"image\",\"type\":\"dom\"},{\"name\":\"markdown\",\"type\":\"dom\"},{\"name\":\"gallery\",\"type\":\"dom\"}]},\"_defaultApiPathOptions\":{\"baseApiPath\":\"/ghost/api\",\"version\":\"v3\",\"type\":\"content\",\"apiVersions\":{\"all\":[\"v2\",\"v3\",\"canary\"],\"canary\":{\"admin\":\"canary/admin\",\"content\":\"canary/content\",\"members\":\"canary/members\"},\"v3\":{\"admin\":\"v3/admin\",\"content\":\"v3/content\",\"members\":\"v3/members\"},\"v2\":{\"admin\":\"v2/admin\",\"content\":\"v2/content\"}}}}],[\"markdown\",{\"markdown\":\"    wget --mirror --convert-links --page-requisites -nH --no-parent -P docs http://localhost:2368/\"}],[\"image\",{\"src\":\"__GHOST_URL__/content/images/2019/11/bandicam-2019-12-01-01-13-41-348-1.jpg\"}],[\"image\",{\"src\":\"__GHOST_URL__/content/images/2019/11/bandicam-2019-12-01-01-19-16-765-1.jpg\"}],[\"image\",{\"src\":\"__GHOST_URL__/content/images/2019/11/bandicam-2019-12-01-01-23-25-708-1.jpg\"}],[\"image\",{\"src\":\"__GHOST_URL__/content/images/2019/11/bandicam-2019-12-01-01-27-47-025-1.jpg\"}],[\"markdown\",{\"markdown\":\"    git add -A \\n    git commit -m \\\"Export website to docs file;\\\"\"}],[\"hr\",{\"_config\":{\"url\":\"http://localhost:2368/\",\"adminUrl\":null,\"apiVersions\":{\"all\":[\"v2\",\"v3\",\"canary\"],\"canary\":{\"admin\":\"canary/admin\",\"content\":\"canary/content\",\"members\":\"canary/members\"},\"v3\":{\"admin\":\"v3/admin\",\"content\":\"v3/content\",\"members\":\"v3/members\"},\"v2\":{\"admin\":\"v2/admin\",\"content\":\"v2/content\"}},\"slugs\":[\"ghost\",\"rss\",\"amp\"],\"redirectCacheMaxAge\":31536000,\"baseApiPath\":\"/ghost/api\",\"defaultApiVersion\":\"v3\",\"defaultApiType\":\"content\",\"staticImageUrlPrefix\":\"content/images\",\"cardTransformers\":[{\"name\":\"card-markdown\",\"type\":\"dom\"},{\"name\":\"code\",\"type\":\"dom\"},{\"name\":\"embed\",\"type\":\"dom\"},{\"name\":\"bookmark\",\"type\":\"dom\"},{\"name\":\"hr\",\"type\":\"dom\"},{\"name\":\"html\",\"type\":\"dom\"},{\"name\":\"image\",\"type\":\"dom\"},{\"name\":\"markdown\",\"type\":\"dom\"},{\"name\":\"gallery\",\"type\":\"dom\"}]},\"_defaultApiPathOptions\":{\"baseApiPath\":\"/ghost/api\",\"version\":\"v3\",\"type\":\"content\",\"apiVersions\":{\"all\":[\"v2\",\"v3\",\"canary\"],\"canary\":{\"admin\":\"canary/admin\",\"content\":\"canary/content\",\"members\":\"canary/members\"},\"v3\":{\"admin\":\"v3/admin\",\"content\":\"v3/content\",\"members\":\"v3/members\"},\"v2\":{\"admin\":\"v2/admin\",\"content\":\"v2/content\"}}}}],[\"markdown\",{\"markdown\":\"    git remote add origin <webURL|SSH Key>\"}],[\"markdown\",{\"markdown\":\"    git push -u origin master\"}],[\"hr\",{\"_config\":{\"url\":\"http://localhost:2368/\",\"adminUrl\":null,\"apiVersions\":{\"all\":[\"v2\",\"v3\",\"canary\"],\"canary\":{\"admin\":\"canary/admin\",\"content\":\"canary/content\",\"members\":\"canary/members\"},\"v3\":{\"admin\":\"v3/admin\",\"content\":\"v3/content\",\"members\":\"v3/members\"},\"v2\":{\"admin\":\"v2/admin\",\"content\":\"v2/content\"}},\"slugs\":[\"ghost\",\"rss\",\"amp\"],\"redirectCacheMaxAge\":31536000,\"baseApiPath\":\"/ghost/api\",\"defaultApiVersion\":\"v3\",\"defaultApiType\":\"content\",\"staticImageUrlPrefix\":\"content/images\",\"cardTransformers\":[{\"name\":\"card-markdown\",\"type\":\"dom\"},{\"name\":\"code\",\"type\":\"dom\"},{\"name\":\"embed\",\"type\":\"dom\"},{\"name\":\"bookmark\",\"type\":\"dom\"},{\"name\":\"hr\",\"type\":\"dom\"},{\"name\":\"html\",\"type\":\"dom\"},{\"name\":\"image\",\"type\":\"dom\"},{\"name\":\"markdown\",\"type\":\"dom\"},{\"name\":\"gallery\",\"type\":\"dom\"}]},\"_defaultApiPathOptions\":{\"baseApiPath\":\"/ghost/api\",\"version\":\"v3\",\"type\":\"content\",\"apiVersions\":{\"all\":[\"v2\",\"v3\",\"canary\"],\"canary\":{\"admin\":\"canary/admin\",\"content\":\"canary/content\",\"members\":\"canary/members\"},\"v3\":{\"admin\":\"v3/admin\",\"content\":\"v3/content\",\"members\":\"v3/members\"},\"v2\":{\"admin\":\"v2/admin\",\"content\":\"v2/content\"}}}}],[\"image\",{\"src\":\"__GHOST_URL__/content/images/2019/11/bandicam-2019-12-01-01-39-39-594-1.jpg\"}],[\"image\",{\"src\":\"__GHOST_URL__/content/images/2019/11/bandicam-2019-12-01-01-42-52-205-1.jpg\"}],[\"hr\",{\"_config\":{\"url\":\"http://localhost:2368/\",\"adminUrl\":null,\"apiVersions\":{\"all\":[\"v2\",\"v3\",\"canary\"],\"canary\":{\"admin\":\"canary/admin\",\"content\":\"canary/content\",\"members\":\"canary/members\"},\"v3\":{\"admin\":\"v3/admin\",\"content\":\"v3/content\",\"members\":\"v3/members\"},\"v2\":{\"admin\":\"v2/admin\",\"content\":\"v2/content\"}},\"slugs\":[\"ghost\",\"rss\",\"amp\"],\"redirectCacheMaxAge\":31536000,\"baseApiPath\":\"/ghost/api\",\"defaultApiVersion\":\"v3\",\"defaultApiType\":\"content\",\"staticImageUrlPrefix\":\"content/images\",\"cardTransformers\":[{\"name\":\"card-markdown\",\"type\":\"dom\"},{\"name\":\"code\",\"type\":\"dom\"},{\"name\":\"embed\",\"type\":\"dom\"},{\"name\":\"bookmark\",\"type\":\"dom\"},{\"name\":\"hr\",\"type\":\"dom\"},{\"name\":\"html\",\"type\":\"dom\"},{\"name\":\"image\",\"type\":\"dom\"},{\"name\":\"markdown\",\"type\":\"dom\"},{\"name\":\"gallery\",\"type\":\"dom\"}]},\"_defaultApiPathOptions\":{\"baseApiPath\":\"/ghost/api\",\"version\":\"v3\",\"type\":\"content\",\"apiVersions\":{\"all\":[\"v2\",\"v3\",\"canary\"],\"canary\":{\"admin\":\"canary/admin\",\"content\":\"canary/content\",\"members\":\"canary/members\"},\"v3\":{\"admin\":\"v3/admin\",\"content\":\"v3/content\",\"members\":\"v3/members\"},\"v2\":{\"admin\":\"v2/admin\",\"content\":\"v2/content\"}}}}]],\"markups\":[[\"a\",[\"href\",\"__GHOST_URL__/ghost\"]],[\"a\",[\"href\",\"http://localhost:2369/ghost/\"]],[\"strong\"]],\"sections\":[[1,\"p\",[]],[1,\"p\",[[0,[],0,\"一直以來都有個困擾，就是查個程式寫法或是軟體操作方法每次都很快就忘記，所以想寫個Blog紀錄自己的手順，先前曾想過直接寫個網頁PUSH到GitHub上，但實在有點累( ˘･з･)，偶然又看到有個很喜歡的排版是用Ghost建立的，因此使用Ghost+GitHub的形式建立部落格\"]]],[10,0],[1,\"h2\",[[0,[],0,\"安裝Ghost\"]]],[1,\"p\",[[0,[],0,\"1.安裝Ghost-CLI‌‌   使用npm或yarn指令安裝Ghost-CLI\"]]],[10,1],[1,\"p\",[[0,[],0,\"2.安裝Ghost‌‌   開啟終端機，移動到要建立Ghost的目錄並使用指令安裝Ghost\"]]],[10,2],[10,3],[1,\"p\",[[0,[],0,\"3.安裝完成後開啟git bash切換到同一目錄並初始化目錄\"]]],[10,4],[1,\"p\",[[0,[],0,\"4.安裝npm並更新repository\"]]],[10,5],[1,\"p\",[[0,[],0,\"5.安裝knex-migrator並更新repository\"]]],[10,6],[1,\"p\",[[0,[],0,\"6.初始化資料庫\"]]],[10,7],[10,8],[1,\"h2\",[[0,[],0,\"設定Ghost\"]]],[1,\"p\",[[0,[],0,\"1.移動到已安裝Ghost的目錄並輸入指令開啟Ghost\"]]],[10,9],[1,\"p\",[[0,[],0,\"2.一般使用\"],[0,[0],1,\"http://localhost:2368/ghost\"],[0,[],0,\"開啟Ghost的管理介面，但因為先前已經在另一個地方裝過一個Ghost，所以畫面顯示以\"],[0,[1],1,\"http://localhost:2369/ghost\"],[0,[],0,\"/開啟管理介面\"]]],[10,10],[10,11],[1,\"p\",[[0,[],0,\"3.填寫網站名稱及作者基本資料\"]]],[10,12],[1,\"p\",[[0,[],0,\"4.可輸入email邀請其他作者一起協作，只有自己使用的話則按下方直接進入管理介面\"]]],[10,13],[1,\"p\",[[0,[],0,\"5.更新repository\"]]],[10,14],[10,15],[1,\"h2\",[[0,[],0,\"將網頁輸出為檔案\"]]],[1,\"p\",[[0,[],0,\"1.使用wget輸出網頁到docs資料夾內\"],[1,[],0,0],[0,[],0,\"   --mirror : 鏡像下載所有檔案相當於-N -r -l inf --no-remove-listing選項\"],[1,[],0,1],[0,[],0,\"        -N : 若遠端檔案較新則下載檔案\"],[1,[],0,2],[0,[],0,\"        -r : 遞迴下載\"],[1,[],0,3],[0,[],0,\"        -l : 最大搜尋深度(0或inf表示無限)\"],[1,[],0,4],[0,[],0,\"        --no-remove-listing : 不刪除\"],[0,[2],1,\".listing\"],[0,[],0,\"檔案\"],[1,[],0,5],[0,[],0,\"   --convert-links : 轉換檔案內路徑為符合本地目錄的路徑   \"],[1,[],0,6],[0,[],0,\"   --page-requisites : 下載所有顯示網頁所需的檔案，例如圖片等\"],[1,[],0,7],[0,[],0,\"   -nH : 不建立名稱為網站名稱的目錄，直接在當前目錄建立檔案\"],[1,[],0,8],[0,[],0,\"   --no-parent : 不進入上層目錄\"],[1,[],0,9],[0,[],0,\"   -P : 指定下載目錄\"]]],[10,16],[1,\"p\",[[0,[],0,\"2.由於從Ghost抓下來的css、js的檔名和html內的相關路徑都會被加上類似下圖.css後方的字串，若直接傳到GitHub Pages上的話會讀不到，我們可使用Notepad++將目錄中所有檔案中有包括此字串的替換為空字串\"]]],[10,17],[1,\"p\",[[0,[],0,\"3.開啟Notepad++，點選\"],[0,[2],1,\"在檔案中尋找\"]]],[10,18],[1,\"p\",[[0,[],0,\"4.輸入要刪除的字串並按下\"],[0,[2],1,\"在多個檔案中取代\"]]],[10,19],[1,\"p\",[[0,[],0,\"5.更改docs/assets內built、css和js資料夾內所有包含該字串的檔名\"]]],[10,20],[1,\"p\",[[0,[],0,\"6.更新repository\"]]],[10,21],[10,22],[1,\"h2\",[[0,[],0,\"PUSH檔案到GitHub\"]]],[1,\"p\",[[0,[],0,\"1.設定遠端倉庫\"]]],[10,23],[1,\"p\",[[0,[],0,\"2.將master分支推送到origin倉庫\"]]],[10,24],[10,25],[1,\"h2\",[[0,[],0,\"設定GitHub Pages\"]]],[1,\"p\",[[0,[],0,\"1.進入剛剛上傳的GitHub的Repository，點選settings標籤\"]]],[10,26],[1,\"p\",[[0,[],0,\"2.尋找GitHub Pages區塊，選擇master branch /docs folder作為網頁來源\"]]],[10,27],[10,28],[1,\"h2\",[[0,[],0,\"已可瀏覽網頁\"]]],[1,\"p\",[[0,[],0,\"在網址列輸入http://帳號.github.io/RepositoryName即可瀏覽網頁\"]]]],\"ghostVersion\":\"3.0\"}","lexical":null,"html":"<p></p><p>一直以來都有個困擾，就是查個程式寫法或是軟體操作方法每次都很快就忘記，所以想寫個Blog紀錄自己的手順，先前曾想過直接寫個網頁PUSH到GitHub上，但實在有點累( ˘･з･)，偶然又看到有個很喜歡的排版是用Ghost建立的，因此使用Ghost+GitHub的形式建立部落格</p><hr><h2 id=\"-ghost\">安裝Ghost</h2><p>1.安裝Ghost-CLI‌‌   使用npm或yarn指令安裝Ghost-CLI</p><!--kg-card-begin: markdown--><pre><code>npm install ghost-cli@latest -g\n</code></pre>\n<!--kg-card-end: markdown--><p>2.安裝Ghost‌‌   開啟終端機，移動到要建立Ghost的目錄並使用指令安裝Ghost</p><!--kg-card-begin: markdown--><pre><code>ghost install local\n</code></pre>\n<!--kg-card-end: markdown--><figure class=\"kg-card kg-image-card\"><img src=\"__GHOST_URL__/content/images/2019/11/bandicam-2019-12-01-00-43-12-343-2.jpg\" class=\"kg-image\" alt loading=\"lazy\"></figure><p>3.安裝完成後開啟git bash切換到同一目錄並初始化目錄</p><!--kg-card-begin: markdown--><pre><code>git init git add -A git commit -m &quot;Initial repository&quot;\n</code></pre>\n<!--kg-card-end: markdown--><p>4.安裝npm並更新repository</p><!--kg-card-begin: markdown--><pre><code>npm install \ngit add -A \ngit commit -m 'Installed Node dependencies'\n</code></pre>\n<!--kg-card-end: markdown--><p>5.安裝knex-migrator並更新repository</p><!--kg-card-begin: markdown--><pre><code>npm install -g knex-migrator\n</code></pre>\n<!--kg-card-end: markdown--><p>6.初始化資料庫</p><!--kg-card-begin: markdown--><pre><code>knex-migrator\n</code></pre>\n<!--kg-card-end: markdown--><hr><h2 id=\"-ghost-1\">設定Ghost</h2><p>1.移動到已安裝Ghost的目錄並輸入指令開啟Ghost</p><!--kg-card-begin: markdown--><pre><code>ghost start\n</code></pre>\n<!--kg-card-end: markdown--><p>2.一般使用<a href=\"__GHOST_URL__/ghost\">http://localhost:2368/ghost</a>開啟Ghost的管理介面，但因為先前已經在另一個地方裝過一個Ghost，所以畫面顯示以<a href=\"http://localhost:2369/ghost/\">http://localhost:2369/ghost</a>/開啟管理介面</p><figure class=\"kg-card kg-image-card\"><img src=\"__GHOST_URL__/content/images/2019/11/bandicam-2019-12-01-00-50-41-339-1.jpg\" class=\"kg-image\" alt loading=\"lazy\"></figure><figure class=\"kg-card kg-image-card\"><img src=\"__GHOST_URL__/content/images/2019/11/bandicam-2019-12-01-00-54-54-621-1.jpg\" class=\"kg-image\" alt loading=\"lazy\"></figure><p>3.填寫網站名稱及作者基本資料</p><figure class=\"kg-card kg-image-card\"><img src=\"__GHOST_URL__/content/images/2019/11/bandicam-2019-12-01-00-54-57-345-1.jpg\" class=\"kg-image\" alt loading=\"lazy\"></figure><p>4.可輸入email邀請其他作者一起協作，只有自己使用的話則按下方直接進入管理介面</p><figure class=\"kg-card kg-image-card\"><img src=\"__GHOST_URL__/content/images/2019/11/bandicam-2019-12-01-00-55-57-353-1.jpg\" class=\"kg-image\" alt loading=\"lazy\"></figure><p>5.更新repository</p><!--kg-card-begin: markdown--><pre><code>git add -A \ngit commit -m 'Finished local Ghost setup'\n</code></pre>\n<!--kg-card-end: markdown--><hr><h2 id=\"-\">將網頁輸出為檔案</h2><p>1.使用wget輸出網頁到docs資料夾內<br>   --mirror : 鏡像下載所有檔案相當於-N -r -l inf --no-remove-listing選項<br>        -N : 若遠端檔案較新則下載檔案<br>        -r : 遞迴下載<br>        -l : 最大搜尋深度(0或inf表示無限)<br>        --no-remove-listing : 不刪除<strong>.listing</strong>檔案<br>   --convert-links : 轉換檔案內路徑為符合本地目錄的路徑   <br>   --page-requisites : 下載所有顯示網頁所需的檔案，例如圖片等<br>   -nH : 不建立名稱為網站名稱的目錄，直接在當前目錄建立檔案<br>   --no-parent : 不進入上層目錄<br>   -P : 指定下載目錄</p><!--kg-card-begin: markdown--><pre><code>wget --mirror --convert-links --page-requisites -nH --no-parent -P docs http://localhost:2368/\n</code></pre>\n<!--kg-card-end: markdown--><p>2.由於從Ghost抓下來的css、js的檔名和html內的相關路徑都會被加上類似下圖.css後方的字串，若直接傳到GitHub Pages上的話會讀不到，我們可使用Notepad++將目錄中所有檔案中有包括此字串的替換為空字串</p><figure class=\"kg-card kg-image-card\"><img src=\"__GHOST_URL__/content/images/2019/11/bandicam-2019-12-01-01-13-41-348-1.jpg\" class=\"kg-image\" alt loading=\"lazy\"></figure><p>3.開啟Notepad++，點選<strong>在檔案中尋找</strong></p><figure class=\"kg-card kg-image-card\"><img src=\"__GHOST_URL__/content/images/2019/11/bandicam-2019-12-01-01-19-16-765-1.jpg\" class=\"kg-image\" alt loading=\"lazy\"></figure><p>4.輸入要刪除的字串並按下<strong>在多個檔案中取代</strong></p><figure class=\"kg-card kg-image-card\"><img src=\"__GHOST_URL__/content/images/2019/11/bandicam-2019-12-01-01-23-25-708-1.jpg\" class=\"kg-image\" alt loading=\"lazy\"></figure><p>5.更改docs/assets內built、css和js資料夾內所有包含該字串的檔名</p><figure class=\"kg-card kg-image-card\"><img src=\"__GHOST_URL__/content/images/2019/11/bandicam-2019-12-01-01-27-47-025-1.jpg\" class=\"kg-image\" alt loading=\"lazy\"></figure><p>6.更新repository</p><!--kg-card-begin: markdown--><pre><code>git add -A \ngit commit -m &quot;Export website to docs file;&quot;\n</code></pre>\n<!--kg-card-end: markdown--><hr><h2 id=\"push-github\">PUSH檔案到GitHub</h2><p>1.設定遠端倉庫</p><!--kg-card-begin: markdown--><pre><code>git remote add origin &lt;webURL|SSH Key&gt;\n</code></pre>\n<!--kg-card-end: markdown--><p>2.將master分支推送到origin倉庫</p><!--kg-card-begin: markdown--><pre><code>git push -u origin master\n</code></pre>\n<!--kg-card-end: markdown--><hr><h2 id=\"-github-pages\">設定GitHub Pages</h2><p>1.進入剛剛上傳的GitHub的Repository，點選settings標籤</p><figure class=\"kg-card kg-image-card\"><img src=\"__GHOST_URL__/content/images/2019/11/bandicam-2019-12-01-01-39-39-594-1.jpg\" class=\"kg-image\" alt loading=\"lazy\"></figure><p>2.尋找GitHub Pages區塊，選擇master branch /docs folder作為網頁來源</p><figure class=\"kg-card kg-image-card\"><img src=\"__GHOST_URL__/content/images/2019/11/bandicam-2019-12-01-01-42-52-205-1.jpg\" class=\"kg-image\" alt loading=\"lazy\"></figure><hr><h2 id=\"--1\">已可瀏覽網頁</h2><p>在網址列輸入http://帳號.github.io/RepositoryName即可瀏覽網頁</p>","comment_id":"5de291f8c31a24007887a233","plaintext":"一直以來都有個困擾，就是查個程式寫法或是軟體操作方法每次都很快就忘記，所以想寫個Blog紀錄自己的手順，先前曾想過直接寫個網頁PUSH到GitHub上，但實在有點累( ˘･з･)，偶然又看到有個很喜歡的排版是用Ghost建立的，因此使用Ghost+GitHub的形式建立部落格\n\n\n安裝Ghost\n\n1.安裝Ghost-CLI‌‌   使用npm或yarn指令安裝Ghost-CLI\n\nnpm install ghost-cli@latest -g\n\n\n\n2.安裝Ghost‌‌   開啟終端機，移動到要建立Ghost的目錄並使用指令安裝Ghost\n\nghost install local\n\n\n\n3.安裝完成後開啟git bash切換到同一目錄並初始化目錄\n\ngit init git add -A git commit -m \"Initial repository\"\n\n\n\n4.安裝npm並更新repository\n\nnpm install \ngit add -A \ngit commit -m 'Installed Node dependencies'\n\n\n\n5.安裝knex-migrator並更新repository\n\nnpm install -g knex-migrator\n\n\n\n6.初始化資料庫\n\nknex-migrator\n\n\n\n\n設定Ghost\n\n1.移動到已安裝Ghost的目錄並輸入指令開啟Ghost\n\nghost start\n\n\n\n2.一般使用http://localhost:2368/ghost開啟Ghost的管理介面，但因為先前已經在另一個地方裝過一個Ghost，所以畫面顯示以http://localhost:2369/ghost/開啟管理介面\n\n3.填寫網站名稱及作者基本資料\n\n4.可輸入email邀請其他作者一起協作，只有自己使用的話則按下方直接進入管理介面\n\n5.更新repository\n\ngit add -A \ngit commit -m 'Finished local Ghost setup'\n\n\n\n\n將網頁輸出為檔案\n\n1.使用wget輸出網頁到docs資料夾內\n  --mirror : 鏡像下載所有檔案相當於-N -r -l inf --no-remove-listing選項\n       -N : 若遠端檔案較新則下載檔案\n       -r : 遞迴下載\n       -l : 最大搜尋深度(0或inf表示無限)\n       --no-remove-listing : 不刪除.listing檔案\n  --convert-links : 轉換檔案內路徑為符合本地目錄的路徑  \n  --page-requisites : 下載所有顯示網頁所需的檔案，例如圖片等\n  -nH : 不建立名稱為網站名稱的目錄，直接在當前目錄建立檔案\n  --no-parent : 不進入上層目錄\n  -P : 指定下載目錄\n\nwget --mirror --convert-links --page-requisites -nH --no-parent -P docs http://localhost:2368/\n\n\n\n2.由於從Ghost抓下來的css、js的檔名和html內的相關路徑都會被加上類似下圖.css後方的字串，若直接傳到GitHub Pages上的話會讀不到，我們可使用Notepad++將目錄中所有檔案中有包括此字串的替換為空字串\n\n3.開啟Notepad++，點選在檔案中尋找\n\n4.輸入要刪除的字串並按下在多個檔案中取代\n\n5.更改docs/assets內built、css和js資料夾內所有包含該字串的檔名\n\n6.更新repository\n\ngit add -A \ngit commit -m \"Export website to docs file;\"\n\n\n\n\nPUSH檔案到GitHub\n\n1.設定遠端倉庫\n\ngit remote add origin <webURL|SSH Key>\n\n\n\n2.將master分支推送到origin倉庫\n\ngit push -u origin master\n\n\n\n\n設定GitHub Pages\n\n1.進入剛剛上傳的GitHub的Repository，點選settings標籤\n\n2.尋找GitHub Pages區塊，選擇master branch /docs folder作為網頁來源\n\n\n已可瀏覽網頁\n\n在網址列輸入http://帳號.github.io/RepositoryName即可瀏覽網頁","feature_image":"__GHOST_URL__/content/images/2019/11/Ghost-Logo.svg","featured":0,"type":"post","status":"published","locale":null,"visibility":"public","email_recipient_filter":"none","created_at":"2019-11-30 15:59:52","created_by":"1","updated_at":"2020-10-27 18:35:57","updated_by":null,"published_at":"2019-11-30 17:57:56","published_by":"1","custom_excerpt":"一直以來都有個困擾，就是查個程式寫法或是軟體操作方法每次都很快就忘記，所以想寫個Blog紀錄自己的手順，先前曾想過直接寫個網頁PUSH到GitHub上，但實在有點累( ˘･з･)，偶然又看到有個很喜歡的排版是用Ghost建立的，因此使用Ghost+GitHub的形式建立部落格","codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null,"newsletter_id":null},{"id":"635a816a57207246b927a8a2","uuid":"cf923849-85e0-49fb-b6ac-f38d2dff4770","title":"計算Wildcard Mask","slug":"wildcard-mask","mobiledoc":"{\"version\":\"0.3.1\",\"atoms\":[[\"soft-return\",\"\",{}],[\"soft-return\",\"\",{}],[\"soft-return\",\"\",{}],[\"soft-return\",\"\",{}],[\"soft-return\",\"\",{}],[\"soft-return\",\"\",{}],[\"soft-return\",\"\",{}],[\"soft-return\",\"\",{}],[\"soft-return\",\"\",{}],[\"soft-return\",\"\",{}],[\"soft-return\",\"\",{}],[\"soft-return\",\"\",{}],[\"soft-return\",\"\",{}]],\"cards\":[[\"hr\",{\"_config\":{\"url\":\"http://localhost:2368/\",\"adminUrl\":null,\"apiVersions\":{\"all\":[\"v2\",\"v3\",\"canary\"],\"canary\":{\"admin\":\"canary/admin\",\"content\":\"canary/content\",\"members\":\"canary/members\"},\"v3\":{\"admin\":\"v3/admin\",\"content\":\"v3/content\",\"members\":\"v3/members\"},\"v2\":{\"admin\":\"v2/admin\",\"content\":\"v2/content\"}},\"slugs\":[\"ghost\",\"rss\",\"amp\"],\"redirectCacheMaxAge\":31536000,\"baseApiPath\":\"/ghost/api\",\"defaultApiVersion\":\"v3\",\"defaultApiType\":\"content\",\"staticImageUrlPrefix\":\"content/images\",\"cardTransformers\":[{\"name\":\"card-markdown\",\"type\":\"dom\"},{\"name\":\"code\",\"type\":\"dom\"},{\"name\":\"embed\",\"type\":\"dom\"},{\"name\":\"bookmark\",\"type\":\"dom\"},{\"name\":\"hr\",\"type\":\"dom\"},{\"name\":\"html\",\"type\":\"dom\"},{\"name\":\"image\",\"type\":\"dom\"},{\"name\":\"markdown\",\"type\":\"dom\"},{\"name\":\"gallery\",\"type\":\"dom\"}]},\"_defaultApiPathOptions\":{\"baseApiPath\":\"/ghost/api\",\"version\":\"v3\",\"type\":\"content\",\"apiVersions\":{\"all\":[\"v2\",\"v3\",\"canary\"],\"canary\":{\"admin\":\"canary/admin\",\"content\":\"canary/content\",\"members\":\"canary/members\"},\"v3\":{\"admin\":\"v3/admin\",\"content\":\"v3/content\",\"members\":\"v3/members\"},\"v2\":{\"admin\":\"v2/admin\",\"content\":\"v2/content\"}}}}],[\"markdown\",{\"markdown\":\"| 128 | 64 | 32 | 16 | 8 | 4 | 2 | 1 |                |\\n|-----|----|----|----|---|---|---|---|----------------|\\n| 0   | 0  | 0  | 0  | 0 | 0 | 0 | 0 | 匹配所有位元   |\\n| 0   | 0  | 1  | 1  | 1 | 1 | 1 | 1 | 忽略後六個位元 |\\n| 0   | 0  | 0  | 0  | 1 | 1 | 1 | 1 | 忽略後四個位元 |\\n| 1   | 1  | 1  | 1  | 1 | 1 | 0 | 0 | 忽略前六個位元 |\\n| 1   | 1  | 1  | 1  | 1 | 1 | 1 | 1 | 忽略所有位元   |\"}],[\"hr\",{\"_config\":{\"url\":\"http://localhost:2368/\",\"adminUrl\":null,\"apiVersions\":{\"all\":[\"v2\",\"v3\",\"canary\"],\"canary\":{\"admin\":\"canary/admin\",\"content\":\"canary/content\",\"members\":\"canary/members\"},\"v3\":{\"admin\":\"v3/admin\",\"content\":\"v3/content\",\"members\":\"v3/members\"},\"v2\":{\"admin\":\"v2/admin\",\"content\":\"v2/content\"}},\"slugs\":[\"ghost\",\"rss\",\"amp\"],\"redirectCacheMaxAge\":31536000,\"baseApiPath\":\"/ghost/api\",\"defaultApiVersion\":\"v3\",\"defaultApiType\":\"content\",\"staticImageUrlPrefix\":\"content/images\",\"cardTransformers\":[{\"name\":\"card-markdown\",\"type\":\"dom\"},{\"name\":\"code\",\"type\":\"dom\"},{\"name\":\"embed\",\"type\":\"dom\"},{\"name\":\"bookmark\",\"type\":\"dom\"},{\"name\":\"hr\",\"type\":\"dom\"},{\"name\":\"html\",\"type\":\"dom\"},{\"name\":\"image\",\"type\":\"dom\"},{\"name\":\"markdown\",\"type\":\"dom\"},{\"name\":\"gallery\",\"type\":\"dom\"}]},\"_defaultApiPathOptions\":{\"baseApiPath\":\"/ghost/api\",\"version\":\"v3\",\"type\":\"content\",\"apiVersions\":{\"all\":[\"v2\",\"v3\",\"canary\"],\"canary\":{\"admin\":\"canary/admin\",\"content\":\"canary/content\",\"members\":\"canary/members\"},\"v3\":{\"admin\":\"v3/admin\",\"content\":\"v3/content\",\"members\":\"v3/members\"},\"v2\":{\"admin\":\"v2/admin\",\"content\":\"v2/content\"}}}}],[\"markdown\",{\"markdown\":\"|                |       DEC       |                 BIN                 |\\n|:--------------:|:---------------:|:-----------------------------------:|\\n| IP Address     | 192.168.122.128 | 11000000.10101000.01111010.10000000 |\\n| Wildcard Mask  | 0.0.0.63        | 00000000.00000000.00000000.00111111 |\\n| IP位址範圍起點 | 192.168.122.128 | 11000000.10101000.01111010.10000000 |\\n| IP位址範圍終點 | 192.168.122.191 | 11000000.10101000.01111010.10111111 |\"}],[\"markdown\",{\"markdown\":\"|                |      DEC      |                 BIN                 |\\n|:--------------:|:-------------:|:-----------------------------------:|\\n| IP Address     | 192.51.100.58 | 11000000.00110011.01100100.00111010 |\\n| Wildcard Mask  | 0.0.0.63      | 00000000.00000000.00000000.00111111 |\\n| IP位址範圍起點 | 192.51.100.0  | 11000000.00110011.01100100.00000000 |\\n| IP位址範圍終點 | 192.51.100.63 | 11000000.00110011.01100100.00111111 |\"}]],\"markups\":[[\"strong\"]],\"sections\":[[1,\"p\",[]],[1,\"p\",[[0,[],0,\"在設置ACL(Access Control List)時，會用到Wildcard Mask標示在範圍內的IP位址，這篇筆記記錄如何使用wildcard mask計算IP範圍的起點及終點\"]]],[10,0],[1,\"h2\",[[0,[],0,\"簡介\"],[1,[],0,0]]],[1,\"p\",[[0,[],0,\"wildcard mask使用0和1表示\"],[1,[],0,1],[0,[],0,\"0代表匹配，1代表忽略\"],[1,[],0,2],[0,[],0,\"以下使用8bit作為示範\"]]],[10,1],[10,2],[1,\"h2\",[[0,[],0,\"計算\"],[1,[],0,3]]],[1,\"p\",[[0,[],0,\"以指令 \"],[0,[0],1,\"access list 50 permit 192.168.122.128 0.0.0.63\"],[0,[],0,\" 為例\"]]],[10,3],[1,\"p\",[[0,[],0,\"1.計算IP位址的二進位值\"],[1,[],0,4],[0,[],0,\"    192.168.122.128 -> 11000000.10101000.01111010.10000000\"],[1,[],0,5],[0,[],0,\"2.計算Mask的二進位值\"],[1,[],0,6],[0,[],0,\"    0.0.0.63 -> 00000000.00000000.00000000.00111111\"],[1,[],0,7],[0,[],0,\"3.觀察Mask的值為最後6個bit，故範圍為10000000~10111111\"]]],[1,\"p\",[]],[1,\"p\",[[0,[],0,\"以指令 \"],[0,[0],1,\"access list 50 permit 192.51.100.58 0.0.0.63\"],[0,[],0,\" 為例\"]]],[10,4],[1,\"p\",[[0,[],0,\"1.計算IP位址的二進位值\"],[1,[],0,8],[0,[],0,\"    192.51.100.58 -> 11000000.00110011.01100100.00111010\"],[1,[],0,9],[0,[],0,\"2.計算Mask的二進位值\"],[1,[],0,10],[0,[],0,\"    0.0.0.63 -> 00000000.00000000.00000000.00111111\"],[1,[],0,11],[0,[],0,\"3.觀察Mask的值為最後6個bit，故範圍為00000000~00111111\"]]],[1,\"p\",[[1,[],0,12],[0,[],0,\"        \"]]]],\"ghostVersion\":\"3.0\"}","lexical":null,"html":"<p></p><p>在設置ACL(Access Control List)時，會用到Wildcard Mask標示在範圍內的IP位址，這篇筆記記錄如何使用wildcard mask計算IP範圍的起點及終點</p><hr><h2 id=\"-\">簡介<br></h2><p>wildcard mask使用0和1表示<br>0代表匹配，1代表忽略<br>以下使用8bit作為示範</p><!--kg-card-begin: markdown--><table>\n<thead>\n<tr>\n<th>128</th>\n<th>64</th>\n<th>32</th>\n<th>16</th>\n<th>8</th>\n<th>4</th>\n<th>2</th>\n<th>1</th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n<td>匹配所有位元</td>\n</tr>\n<tr>\n<td>0</td>\n<td>0</td>\n<td>1</td>\n<td>1</td>\n<td>1</td>\n<td>1</td>\n<td>1</td>\n<td>1</td>\n<td>忽略後六個位元</td>\n</tr>\n<tr>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n<td>1</td>\n<td>1</td>\n<td>1</td>\n<td>1</td>\n<td>忽略後四個位元</td>\n</tr>\n<tr>\n<td>1</td>\n<td>1</td>\n<td>1</td>\n<td>1</td>\n<td>1</td>\n<td>1</td>\n<td>0</td>\n<td>0</td>\n<td>忽略前六個位元</td>\n</tr>\n<tr>\n<td>1</td>\n<td>1</td>\n<td>1</td>\n<td>1</td>\n<td>1</td>\n<td>1</td>\n<td>1</td>\n<td>1</td>\n<td>忽略所有位元</td>\n</tr>\n</tbody>\n</table>\n<!--kg-card-end: markdown--><hr><h2 id=\"--1\">計算<br></h2><p>以指令 <strong>access list 50 permit 192.168.122.128 0.0.0.63</strong> 為例</p><!--kg-card-begin: markdown--><table>\n<thead>\n<tr>\n<th style=\"text-align:center\"></th>\n<th style=\"text-align:center\">DEC</th>\n<th style=\"text-align:center\">BIN</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">IP Address</td>\n<td style=\"text-align:center\">192.168.122.128</td>\n<td style=\"text-align:center\">11000000.10101000.01111010.10000000</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Wildcard Mask</td>\n<td style=\"text-align:center\">0.0.0.63</td>\n<td style=\"text-align:center\">00000000.00000000.00000000.00111111</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">IP位址範圍起點</td>\n<td style=\"text-align:center\">192.168.122.128</td>\n<td style=\"text-align:center\">11000000.10101000.01111010.10000000</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">IP位址範圍終點</td>\n<td style=\"text-align:center\">192.168.122.191</td>\n<td style=\"text-align:center\">11000000.10101000.01111010.10111111</td>\n</tr>\n</tbody>\n</table>\n<!--kg-card-end: markdown--><p>1.計算IP位址的二進位值<br>    192.168.122.128 -&gt; 11000000.10101000.01111010.10000000<br>2.計算Mask的二進位值<br>    0.0.0.63 -&gt; 00000000.00000000.00000000.00111111<br>3.觀察Mask的值為最後6個bit，故範圍為10000000~10111111</p><p></p><p>以指令 <strong>access list 50 permit 192.51.100.58 0.0.0.63</strong> 為例</p><!--kg-card-begin: markdown--><table>\n<thead>\n<tr>\n<th style=\"text-align:center\"></th>\n<th style=\"text-align:center\">DEC</th>\n<th style=\"text-align:center\">BIN</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">IP Address</td>\n<td style=\"text-align:center\">192.51.100.58</td>\n<td style=\"text-align:center\">11000000.00110011.01100100.00111010</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Wildcard Mask</td>\n<td style=\"text-align:center\">0.0.0.63</td>\n<td style=\"text-align:center\">00000000.00000000.00000000.00111111</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">IP位址範圍起點</td>\n<td style=\"text-align:center\">192.51.100.0</td>\n<td style=\"text-align:center\">11000000.00110011.01100100.00000000</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">IP位址範圍終點</td>\n<td style=\"text-align:center\">192.51.100.63</td>\n<td style=\"text-align:center\">11000000.00110011.01100100.00111111</td>\n</tr>\n</tbody>\n</table>\n<!--kg-card-end: markdown--><p>1.計算IP位址的二進位值<br>    192.51.100.58 -&gt; 11000000.00110011.01100100.00111010<br>2.計算Mask的二進位值<br>    0.0.0.63 -&gt; 00000000.00000000.00000000.00111111<br>3.觀察Mask的值為最後6個bit，故範圍為00000000~00111111</p><p><br>        </p>","comment_id":"5df3b117bd62740960b57409","plaintext":"在設置ACL(Access Control List)時，會用到Wildcard Mask標示在範圍內的IP位址，這篇筆記記錄如何使用wildcard mask計算IP範圍的起點及終點\n\n\n簡介\n\n\nwildcard mask使用0和1表示\n0代表匹配，1代表忽略\n以下使用8bit作為示範\n\n\n\n\n128\n64\n32\n16\n8\n4\n2\n1\n\n\n\n\n\n0\n0\n0\n0\n0\n0\n0\n0\n匹配所有位元\n\n\n0\n0\n1\n1\n1\n1\n1\n1\n忽略後六個位元\n\n\n0\n0\n0\n0\n1\n1\n1\n1\n忽略後四個位元\n\n\n1\n1\n1\n1\n1\n1\n0\n0\n忽略前六個位元\n\n\n1\n1\n1\n1\n1\n1\n1\n1\n忽略所有位元\n\n\n\n\n\n\n計算\n\n\n以指令 access list 50 permit 192.168.122.128 0.0.0.63 為例\n\n\n\n\n\nDEC\nBIN\n\n\n\n\nIP Address\n192.168.122.128\n11000000.10101000.01111010.10000000\n\n\nWildcard Mask\n0.0.0.63\n00000000.00000000.00000000.00111111\n\n\nIP位址範圍起點\n192.168.122.128\n11000000.10101000.01111010.10000000\n\n\nIP位址範圍終點\n192.168.122.191\n11000000.10101000.01111010.10111111\n\n\n\n\n\n1.計算IP位址的二進位值\n   192.168.122.128 -> 11000000.10101000.01111010.10000000\n2.計算Mask的二進位值\n   0.0.0.63 -> 00000000.00000000.00000000.00111111\n3.觀察Mask的值為最後6個bit，故範圍為10000000~10111111\n\n\n\n以指令 access list 50 permit 192.51.100.58 0.0.0.63 為例\n\n\n\n\n\nDEC\nBIN\n\n\n\n\nIP Address\n192.51.100.58\n11000000.00110011.01100100.00111010\n\n\nWildcard Mask\n0.0.0.63\n00000000.00000000.00000000.00111111\n\n\nIP位址範圍起點\n192.51.100.0\n11000000.00110011.01100100.00000000\n\n\nIP位址範圍終點\n192.51.100.63\n11000000.00110011.01100100.00111111\n\n\n\n\n\n1.計算IP位址的二進位值\n   192.51.100.58 -> 11000000.00110011.01100100.00111010\n2.計算Mask的二進位值\n   0.0.0.63 -> 00000000.00000000.00000000.00111111\n3.觀察Mask的值為最後6個bit，故範圍為00000000~00111111\n\n\n       ","feature_image":"__GHOST_URL__/content/images/2019/12/binary-code-binary-binary-system-byte-bits-administrator-1458897-pxhere.com.jpg","featured":0,"type":"post","status":"published","locale":null,"visibility":"public","email_recipient_filter":"none","created_at":"2019-12-13 15:41:11","created_by":"1","updated_at":"2020-01-26 15:56:59","updated_by":null,"published_at":"2019-12-13 16:49:37","published_by":"1","custom_excerpt":"在設置ACL(Access Control List)時，會用到Wildcard Mask標示在範圍內的IP位址，這篇筆記記錄如何使用wildcard mask計算IP範圍的起點及終點","codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null,"newsletter_id":null},{"id":"635a816a57207246b927a8a3","uuid":"9f7c8e78-f58c-4f83-b958-a73d4270e93f","title":"[Golang]Golang函式","slug":"golang-function","mobiledoc":"{\"version\":\"0.3.1\",\"atoms\":[],\"cards\":[[\"markdown\",{\"markdown\":\"    func test() string{\\n        return \\\"Hello\\\" \\n    }\\n    \\n    func main(){\\n        fmt.Println(test())\\n    }\"}],[\"markdown\",{\"markdown\":\"    >Hello\"}],[\"markdown\",{\"markdown\":\"    func test() (string,string){\\n        return \\\"Hello\\\",\\\"katsuobushi\\\"\\n    }\\n    \\n    func main(){\\n        hlo,name := test()\\n        fmt.Println(hlo , name)\\n    }\"}],[\"markdown\",{\"markdown\":\"    >Hello katsuobushi\"}],[\"markdown\",{\"markdown\":\"    func foo(name string,age int){\\n        fmt.Println(name,age)\\n    }\\n    \\n    func main(){\\n        foo(\\\"katsuobushi\\\",100)\\n    }\"}],[\"markdown\",{\"markdown\":\"    >katsuobushi 100\\n  \"}],[\"markdown\",{\"markdown\":\"    func foo(str string) (returnStr string) {\\n        returnStr = str\\n        return\\n    }\\n    \\n    func main() {\\n        fmt.Println(foo(\\\"Hello\\\"))\\n    }\"}],[\"markdown\",{\"markdown\":\"    >Hello\"}],[\"markdown\",{\"markdown\":\"    type course struct {\\n        courseID      string\\n        courseTeacher string\\n    }\\n\\n    func (c *course) setCourse(id string, teacher string) {\\n        c.courseID = id\\n        c.courseTeacher = teacher\\n    }\\n\\n    func (c *course) print() {\\n        fmt.Println(c.courseID, c.courseTeacher)\\n    }\\n\\n    func main() {\\n        var co course\\n        co.setCourse(\\\"3452\\\", \\\"GolangProgramming\\\")\\n        co.print()\\n    }\\n\"}]],\"markups\":[[\"strong\"]],\"sections\":[[1,\"p\",[]],[1,\"h3\",[[0,[],0,\"基本用法\"]]],[1,\"p\",[[0,[],0,\"最基本的用法為使用func作為宣告函式的關鍵字，後面接上函式名稱(test)及回傳值(string)，這裡要注意的是必須指定回傳型態，否則會跳出錯誤訊息\\\"too many arguments to return\\\"\"]]],[10,0],[10,1],[1,\"h3\",[[0,[],0,\"多個回傳值\"]]],[1,\"p\",[[0,[],0,\"golang可以一次回傳多個值，在呼叫的地方必須使用多個變數接收傳回來的值\"]]],[10,2],[10,3],[1,\"h3\",[[0,[],0,\"傳入參數\"]]],[1,\"p\",[[0,[],0,\"在函式名稱後的括號內加入一個或多個\\\"\"],[0,[0],1,\"變數名稱 變數型態\\\"\"],[0,[],0,\"，以傳入參數\"]]],[10,4],[10,5],[1,\"h3\",[[0,[],0,\"為回傳值命名\"]]],[1,\"p\",[[0,[],0,\"可為回傳變數命名(宣告變數)，在回傳時可直接呼叫\"],[0,[0],1,\"return\"],[0,[],0,\"就可以了\"]]],[10,6],[10,7],[1,\"h3\",[[0,[],0,\"類別的方法\"]]],[1,\"p\",[[0,[],0,\"這個應該歸在類別裡介紹，但自己曾經搞混過所以在這裡註記下，這是類別裡宣告方法的方式，在函式的前面加上\"],[0,[0],1,\"\\\"(變數名稱 *類別)\\\"\"],[0,[],0,\"，即表示宣告該類別的一個方法\"]]],[1,\"p\",[[0,[],0,\"在方法中使用\"],[0,[0],1,\"變數名稱.方法\"],[0,[],0,\"或\"],[0,[0],1,\"變數名稱.屬性\"],[0,[],0,\"表示存取呼叫該方法的物件(本例為co物件)的方法或屬性\"]]],[1,\"p\",[[0,[],0,\"假設使用co物件呼叫setCourse方法，則在setCourse方法裡的c即代表co物件，而c.courseID就代表co物件裡的courseID屬性\"]]],[10,8],[1,\"p\",[]]],\"ghostVersion\":\"3.0\"}","lexical":null,"html":"<p></p><h3 id=\"-\">基本用法</h3><p>最基本的用法為使用func作為宣告函式的關鍵字，後面接上函式名稱(test)及回傳值(string)，這裡要注意的是必須指定回傳型態，否則會跳出錯誤訊息\"too many arguments to return\"</p><!--kg-card-begin: markdown--><pre><code>func test() string{\n    return &quot;Hello&quot; \n}\n\nfunc main(){\n    fmt.Println(test())\n}\n</code></pre>\n<!--kg-card-end: markdown--><!--kg-card-begin: markdown--><pre><code>&gt;Hello\n</code></pre>\n<!--kg-card-end: markdown--><h3 id=\"--1\">多個回傳值</h3><p>golang可以一次回傳多個值，在呼叫的地方必須使用多個變數接收傳回來的值</p><!--kg-card-begin: markdown--><pre><code>func test() (string,string){\n    return &quot;Hello&quot;,&quot;katsuobushi&quot;\n}\n\nfunc main(){\n    hlo,name := test()\n    fmt.Println(hlo , name)\n}\n</code></pre>\n<!--kg-card-end: markdown--><!--kg-card-begin: markdown--><pre><code>&gt;Hello katsuobushi\n</code></pre>\n<!--kg-card-end: markdown--><h3 id=\"--2\">傳入參數</h3><p>在函式名稱後的括號內加入一個或多個\"<strong>變數名稱 變數型態\"</strong>，以傳入參數</p><!--kg-card-begin: markdown--><pre><code>func foo(name string,age int){\n    fmt.Println(name,age)\n}\n\nfunc main(){\n    foo(&quot;katsuobushi&quot;,100)\n}\n</code></pre>\n<!--kg-card-end: markdown--><!--kg-card-begin: markdown--><pre><code>&gt;katsuobushi 100\n</code></pre>\n<!--kg-card-end: markdown--><h3 id=\"--3\">為回傳值命名</h3><p>可為回傳變數命名(宣告變數)，在回傳時可直接呼叫<strong>return</strong>就可以了</p><!--kg-card-begin: markdown--><pre><code>func foo(str string) (returnStr string) {\n    returnStr = str\n    return\n}\n\nfunc main() {\n    fmt.Println(foo(&quot;Hello&quot;))\n}\n</code></pre>\n<!--kg-card-end: markdown--><!--kg-card-begin: markdown--><pre><code>&gt;Hello\n</code></pre>\n<!--kg-card-end: markdown--><h3 id=\"--4\">類別的方法</h3><p>這個應該歸在類別裡介紹，但自己曾經搞混過所以在這裡註記下，這是類別裡宣告方法的方式，在函式的前面加上<strong>\"(變數名稱 *類別)\"</strong>，即表示宣告該類別的一個方法</p><p>在方法中使用<strong>變數名稱.方法</strong>或<strong>變數名稱.屬性</strong>表示存取呼叫該方法的物件(本例為co物件)的方法或屬性</p><p>假設使用co物件呼叫setCourse方法，則在setCourse方法裡的c即代表co物件，而c.courseID就代表co物件裡的courseID屬性</p><!--kg-card-begin: markdown--><pre><code>type course struct {\n    courseID      string\n    courseTeacher string\n}\n\nfunc (c *course) setCourse(id string, teacher string) {\n    c.courseID = id\n    c.courseTeacher = teacher\n}\n\nfunc (c *course) print() {\n    fmt.Println(c.courseID, c.courseTeacher)\n}\n\nfunc main() {\n    var co course\n    co.setCourse(&quot;3452&quot;, &quot;GolangProgramming&quot;)\n    co.print()\n}\n</code></pre>\n<!--kg-card-end: markdown-->","comment_id":"5dfde8756c21ff2c7860dae4","plaintext":"基本用法\n\n最基本的用法為使用func作為宣告函式的關鍵字，後面接上函式名稱(test)及回傳值(string)，這裡要注意的是必須指定回傳型態，否則會跳出錯誤訊息\"too many arguments to return\"\n\nfunc test() string{\n    return \"Hello\" \n}\n\nfunc main(){\n    fmt.Println(test())\n}\n\n\n\n>Hello\n\n\n\n\n多個回傳值\n\ngolang可以一次回傳多個值，在呼叫的地方必須使用多個變數接收傳回來的值\n\nfunc test() (string,string){\n    return \"Hello\",\"katsuobushi\"\n}\n\nfunc main(){\n    hlo,name := test()\n    fmt.Println(hlo , name)\n}\n\n\n\n>Hello katsuobushi\n\n\n\n\n傳入參數\n\n在函式名稱後的括號內加入一個或多個\"變數名稱 變數型態\"，以傳入參數\n\nfunc foo(name string,age int){\n    fmt.Println(name,age)\n}\n\nfunc main(){\n    foo(\"katsuobushi\",100)\n}\n\n\n\n>katsuobushi 100\n\n\n\n\n為回傳值命名\n\n可為回傳變數命名(宣告變數)，在回傳時可直接呼叫return就可以了\n\nfunc foo(str string) (returnStr string) {\n    returnStr = str\n    return\n}\n\nfunc main() {\n    fmt.Println(foo(\"Hello\"))\n}\n\n\n\n>Hello\n\n\n\n\n類別的方法\n\n這個應該歸在類別裡介紹，但自己曾經搞混過所以在這裡註記下，這是類別裡宣告方法的方式，在函式的前面加上\"(變數名稱 *類別)\"，即表示宣告該類別的一個方法\n\n在方法中使用變數名稱.方法或變數名稱.屬性表示存取呼叫該方法的物件(本例為co物件)的方法或屬性\n\n假設使用co物件呼叫setCourse方法，則在setCourse方法裡的c即代表co物件，而c.courseID就代表co物件裡的courseID屬性\n\ntype course struct {\n    courseID      string\n    courseTeacher string\n}\n\nfunc (c *course) setCourse(id string, teacher string) {\n    c.courseID = id\n    c.courseTeacher = teacher\n}\n\nfunc (c *course) print() {\n    fmt.Println(c.courseID, c.courseTeacher)\n}\n\nfunc main() {\n    var co course\n    co.setCourse(\"3452\", \"GolangProgramming\")\n    co.print()\n}\n\n","feature_image":"__GHOST_URL__/content/images/2019/12/golang-long.jpeg","featured":0,"type":"post","status":"published","locale":null,"visibility":"public","email_recipient_filter":"none","created_at":"2019-12-21 09:40:05","created_by":"1","updated_at":"2020-10-27 18:30:58","updated_by":null,"published_at":"2019-12-21 12:49:49","published_by":"1","custom_excerpt":"Golang基礎 - 函式","codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null,"newsletter_id":null},{"id":"635a816a57207246b927a8a4","uuid":"c72eebfe-96a4-4094-a2d7-2b71d6cee6f8","title":"[Golang]從外部中斷Goroutine","slug":"golang-kill-goroutine","mobiledoc":"{\"version\":\"0.3.1\",\"atoms\":[],\"cards\":[[\"hr\",{\"_config\":{\"url\":\"http://localhost:2368/\",\"adminUrl\":null,\"apiVersions\":{\"all\":[\"v2\",\"v3\",\"canary\"],\"canary\":{\"admin\":\"canary/admin\",\"content\":\"canary/content\",\"members\":\"canary/members\"},\"v3\":{\"admin\":\"v3/admin\",\"content\":\"v3/content\",\"members\":\"v3/members\"},\"v2\":{\"admin\":\"v2/admin\",\"content\":\"v2/content\"}},\"slugs\":[\"ghost\",\"rss\",\"amp\"],\"redirectCacheMaxAge\":31536000,\"baseApiPath\":\"/ghost/api\",\"defaultApiVersion\":\"v3\",\"defaultApiType\":\"content\",\"staticImageUrlPrefix\":\"content/images\",\"cardTransformers\":[{\"name\":\"card-markdown\",\"type\":\"dom\"},{\"name\":\"code\",\"type\":\"dom\"},{\"name\":\"embed\",\"type\":\"dom\"},{\"name\":\"bookmark\",\"type\":\"dom\"},{\"name\":\"hr\",\"type\":\"dom\"},{\"name\":\"html\",\"type\":\"dom\"},{\"name\":\"image\",\"type\":\"dom\"},{\"name\":\"markdown\",\"type\":\"dom\"},{\"name\":\"gallery\",\"type\":\"dom\"}]},\"_defaultApiPathOptions\":{\"baseApiPath\":\"/ghost/api\",\"version\":\"v3\",\"type\":\"content\",\"apiVersions\":{\"all\":[\"v2\",\"v3\",\"canary\"],\"canary\":{\"admin\":\"canary/admin\",\"content\":\"canary/content\",\"members\":\"canary/members\"},\"v3\":{\"admin\":\"v3/admin\",\"content\":\"v3/content\",\"members\":\"v3/members\"},\"v2\":{\"admin\":\"v2/admin\",\"content\":\"v2/content\"}}}}],[\"markdown\",{\"markdown\":\"    ch := make(chan struct{})\"}],[\"markdown\",{\"markdown\":\"    ch := make(chan struct{},10)//buffer大小為10\"}],[\"markdown\",{\"markdown\":\"    func main(){\\n        ch := make(chan struct{})\\n        go spinner(80*time.Millisecond, ch)\\n    }\\n    \\n    func spinner(delay time.Duration, ch chan struct{}) {\\n        \\n    }\"}],[\"markdown\",{\"markdown\":\"    func main(){\\n        ch := make(chan struct{})\\n        go spinner(80*time.Millisecond, ch)\\n    }\\n    \\n    func spinner(delay time.Duration, ch chan struct{}) {\\n        for {\\n            select {\\n            case <-ch:\\n                return\\n            default:\\n                for _, r := range `-\\\\|/` {\\n                    fmt.Printf(\\\"\\\\r%c\\\", r)\\n                    time.Sleep(delay)\\n                }\\n            }\\n        }\\n    }\"}],[\"markdown\",{\"markdown\":\"    func main(){\\n        ch := make(chan struct{})\\n        go spinner(80*time.Millisecond, ch)\\n        close(ch)\\n    }\\n    \\n    func spinner(delay time.Duration, ch chan struct{}) {\\n        for {\\n            select {\\n            case <-ch:\\n                return\\n            default:\\n                for _, r := range `-\\\\|/` {\\n                    fmt.Printf(\\\"\\\\r%c\\\", r)\\n                    time.Sleep(delay)\\n                }\\n            }\\n        }\\n    }\"}]],\"markups\":[[\"strong\"]],\"sections\":[[1,\"p\",[]],[1,\"p\",[[0,[],0,\"想要從外部終止一個正在執行中或無限迴圈的goroutine，必須使用channel將中斷訊息傳入使之中斷\"]]],[10,0],[1,\"h3\",[[0,[],0,\"建立Channel\"]]],[1,\"p\",[[0,[],0,\"使用\"],[0,[0],1,\"chan\"],[0,[],0,\"關鍵字宣告為channel，並指定通道類型\"]]],[10,1],[1,\"p\",[[0,[],0,\"若要傳入channel多個值，則必須指定buffer的大小，否則會造成deadlock\"]]],[10,2],[1,\"p\",[[0,[],0,\"設定目標函式的參數\"]]],[10,3],[1,\"h3\",[[0,[],0,\"使用select case控制流程\"]]],[1,\"p\",[[0,[],0,\"select case只能用在有關channel的操作上，若多個case都符合，則會隨機挑選一個執行，若都不符合則執行default\"]]],[10,4],[1,\"h3\",[[0,[],0,\"結束goroutine\"]]],[1,\"p\",[[0,[],0,\"在要中斷的地方插入close(ch)以關閉channel\"]]],[10,5],[1,\"p\",[]]],\"ghostVersion\":\"3.0\"}","lexical":null,"html":"<p></p><p>想要從外部終止一個正在執行中或無限迴圈的goroutine，必須使用channel將中斷訊息傳入使之中斷</p><hr><h3 id=\"-channel\">建立Channel</h3><p>使用<strong>chan</strong>關鍵字宣告為channel，並指定通道類型</p><!--kg-card-begin: markdown--><pre><code>ch := make(chan struct{})\n</code></pre>\n<!--kg-card-end: markdown--><p>若要傳入channel多個值，則必須指定buffer的大小，否則會造成deadlock</p><!--kg-card-begin: markdown--><pre><code>ch := make(chan struct{},10)//buffer大小為10\n</code></pre>\n<!--kg-card-end: markdown--><p>設定目標函式的參數</p><!--kg-card-begin: markdown--><pre><code>func main(){\n    ch := make(chan struct{})\n    go spinner(80*time.Millisecond, ch)\n}\n\nfunc spinner(delay time.Duration, ch chan struct{}) {\n    \n}\n</code></pre>\n<!--kg-card-end: markdown--><h3 id=\"-select-case-\">使用select case控制流程</h3><p>select case只能用在有關channel的操作上，若多個case都符合，則會隨機挑選一個執行，若都不符合則執行default</p><!--kg-card-begin: markdown--><pre><code>func main(){\n    ch := make(chan struct{})\n    go spinner(80*time.Millisecond, ch)\n}\n\nfunc spinner(delay time.Duration, ch chan struct{}) {\n    for {\n        select {\n        case &lt;-ch:\n            return\n        default:\n            for _, r := range `-\\|/` {\n                fmt.Printf(&quot;\\r%c&quot;, r)\n                time.Sleep(delay)\n            }\n        }\n    }\n}\n</code></pre>\n<!--kg-card-end: markdown--><h3 id=\"-goroutine\">結束goroutine</h3><p>在要中斷的地方插入close(ch)以關閉channel</p><!--kg-card-begin: markdown--><pre><code>func main(){\n    ch := make(chan struct{})\n    go spinner(80*time.Millisecond, ch)\n    close(ch)\n}\n\nfunc spinner(delay time.Duration, ch chan struct{}) {\n    for {\n        select {\n        case &lt;-ch:\n            return\n        default:\n            for _, r := range `-\\|/` {\n                fmt.Printf(&quot;\\r%c&quot;, r)\n                time.Sleep(delay)\n            }\n        }\n    }\n}\n</code></pre>\n<!--kg-card-end: markdown-->","comment_id":"5e019b6b9d3d371b842d0b37","plaintext":"想要從外部終止一個正在執行中或無限迴圈的goroutine，必須使用channel將中斷訊息傳入使之中斷\n\n\n建立Channel\n\n使用chan關鍵字宣告為channel，並指定通道類型\n\nch := make(chan struct{})\n\n\n\n若要傳入channel多個值，則必須指定buffer的大小，否則會造成deadlock\n\nch := make(chan struct{},10)//buffer大小為10\n\n\n\n設定目標函式的參數\n\nfunc main(){\n    ch := make(chan struct{})\n    go spinner(80*time.Millisecond, ch)\n}\n\nfunc spinner(delay time.Duration, ch chan struct{}) {\n    \n}\n\n\n\n\n使用select case控制流程\n\nselect case只能用在有關channel的操作上，若多個case都符合，則會隨機挑選一個執行，若都不符合則執行default\n\nfunc main(){\n    ch := make(chan struct{})\n    go spinner(80*time.Millisecond, ch)\n}\n\nfunc spinner(delay time.Duration, ch chan struct{}) {\n    for {\n        select {\n        case <-ch:\n            return\n        default:\n            for _, r := range `-\\|/` {\n                fmt.Printf(\"\\r%c\", r)\n                time.Sleep(delay)\n            }\n        }\n    }\n}\n\n\n\n\n結束goroutine\n\n在要中斷的地方插入close(ch)以關閉channel\n\nfunc main(){\n    ch := make(chan struct{})\n    go spinner(80*time.Millisecond, ch)\n    close(ch)\n}\n\nfunc spinner(delay time.Duration, ch chan struct{}) {\n    for {\n        select {\n        case <-ch:\n            return\n        default:\n            for _, r := range `-\\|/` {\n                fmt.Printf(\"\\r%c\", r)\n                time.Sleep(delay)\n            }\n        }\n    }\n}\n\n","feature_image":"__GHOST_URL__/content/images/2019/12/golang-long-1.jpeg","featured":0,"type":"post","status":"published","locale":null,"visibility":"public","email_recipient_filter":"none","created_at":"2019-12-24 05:00:27","created_by":"1","updated_at":"2020-10-27 18:29:48","updated_by":null,"published_at":"2019-12-24 06:29:39","published_by":"1","custom_excerpt":"想要從外部終止一個正在執行中或無限迴圈的goroutine，必須使用channel將中斷訊息傳入使之中斷","codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null,"newsletter_id":null},{"id":"635a816a57207246b927a8a5","uuid":"14406421-6690-45b7-a0be-acc7d2515171","title":"[Python]使用Python爬蟲抓取網站資料","slug":"python-web-crawler","mobiledoc":"{\"version\":\"0.3.1\",\"atoms\":[[\"soft-return\",\"\",{}],[\"soft-return\",\"\",{}],[\"soft-return\",\"\",{}],[\"soft-return\",\"\",{}],[\"soft-return\",\"\",{}],[\"soft-return\",\"\",{}],[\"soft-return\",\"\",{}],[\"soft-return\",\"\",{}],[\"soft-return\",\"\",{}],[\"soft-return\",\"\",{}],[\"soft-return\",\"\",{}],[\"soft-return\",\"\",{}],[\"soft-return\",\"\",{}],[\"soft-return\",\"\",{}],[\"soft-return\",\"\",{}],[\"soft-return\",\"\",{}]],\"cards\":[[\"hr\",{\"_config\":{\"url\":\"http://localhost:2368/\",\"adminUrl\":null,\"apiVersions\":{\"all\":[\"v2\",\"v3\",\"canary\"],\"canary\":{\"admin\":\"canary/admin\",\"content\":\"canary/content\",\"members\":\"canary/members\"},\"v3\":{\"admin\":\"v3/admin\",\"content\":\"v3/content\",\"members\":\"v3/members\"},\"v2\":{\"admin\":\"v2/admin\",\"content\":\"v2/content\"}},\"slugs\":[\"ghost\",\"rss\",\"amp\"],\"redirectCacheMaxAge\":31536000,\"baseApiPath\":\"/ghost/api\",\"defaultApiVersion\":\"v3\",\"defaultApiType\":\"content\",\"staticImageUrlPrefix\":\"content/images\",\"cardTransformers\":[{\"name\":\"card-markdown\",\"type\":\"dom\"},{\"name\":\"code\",\"type\":\"dom\"},{\"name\":\"embed\",\"type\":\"dom\"},{\"name\":\"bookmark\",\"type\":\"dom\"},{\"name\":\"hr\",\"type\":\"dom\"},{\"name\":\"html\",\"type\":\"dom\"},{\"name\":\"image\",\"type\":\"dom\"},{\"name\":\"markdown\",\"type\":\"dom\"},{\"name\":\"gallery\",\"type\":\"dom\"}]},\"_defaultApiPathOptions\":{\"baseApiPath\":\"/ghost/api\",\"version\":\"v3\",\"type\":\"content\",\"apiVersions\":{\"all\":[\"v2\",\"v3\",\"canary\"],\"canary\":{\"admin\":\"canary/admin\",\"content\":\"canary/content\",\"members\":\"canary/members\"},\"v3\":{\"admin\":\"v3/admin\",\"content\":\"v3/content\",\"members\":\"v3/members\"},\"v2\":{\"admin\":\"v2/admin\",\"content\":\"v2/content\"}}}}],[\"markdown\",{\"markdown\":\"    import requests\"}],[\"markdown\",{\"markdown\":\"    url = '' //填入目標網址以取得網頁內容\\n    resp = requests.get(url) //建立get請求\"}],[\"hr\",{\"_config\":{\"url\":\"http://localhost:2368/\",\"adminUrl\":null,\"apiVersions\":{\"all\":[\"v2\",\"v3\",\"canary\"],\"canary\":{\"admin\":\"canary/admin\",\"content\":\"canary/content\",\"members\":\"canary/members\"},\"v3\":{\"admin\":\"v3/admin\",\"content\":\"v3/content\",\"members\":\"v3/members\"},\"v2\":{\"admin\":\"v2/admin\",\"content\":\"v2/content\"}},\"slugs\":[\"ghost\",\"rss\",\"amp\"],\"redirectCacheMaxAge\":31536000,\"baseApiPath\":\"/ghost/api\",\"defaultApiVersion\":\"v3\",\"defaultApiType\":\"content\",\"staticImageUrlPrefix\":\"content/images\",\"cardTransformers\":[{\"name\":\"card-markdown\",\"type\":\"dom\"},{\"name\":\"code\",\"type\":\"dom\"},{\"name\":\"embed\",\"type\":\"dom\"},{\"name\":\"bookmark\",\"type\":\"dom\"},{\"name\":\"hr\",\"type\":\"dom\"},{\"name\":\"html\",\"type\":\"dom\"},{\"name\":\"image\",\"type\":\"dom\"},{\"name\":\"markdown\",\"type\":\"dom\"},{\"name\":\"gallery\",\"type\":\"dom\"}]},\"_defaultApiPathOptions\":{\"baseApiPath\":\"/ghost/api\",\"version\":\"v3\",\"type\":\"content\",\"apiVersions\":{\"all\":[\"v2\",\"v3\",\"canary\"],\"canary\":{\"admin\":\"canary/admin\",\"content\":\"canary/content\",\"members\":\"canary/members\"},\"v3\":{\"admin\":\"v3/admin\",\"content\":\"v3/content\",\"members\":\"v3/members\"},\"v2\":{\"admin\":\"v2/admin\",\"content\":\"v2/content\"}}}}],[\"markdown\",{\"markdown\":\"    data = resp.json()\"}],[\"markdown\",{\"markdown\":\"    from bs4 import BeautifulSoup\"}],[\"markdown\",{\"markdown\":\"    soup = BeautifulSoup(resp.text,'html5lib')\"}],[\"hr\",{\"_config\":{\"url\":\"http://localhost:2368/\",\"adminUrl\":null,\"apiVersions\":{\"all\":[\"v2\",\"v3\",\"canary\"],\"canary\":{\"admin\":\"canary/admin\",\"content\":\"canary/content\",\"members\":\"canary/members\"},\"v3\":{\"admin\":\"v3/admin\",\"content\":\"v3/content\",\"members\":\"v3/members\"},\"v2\":{\"admin\":\"v2/admin\",\"content\":\"v2/content\"}},\"slugs\":[\"ghost\",\"rss\",\"amp\"],\"redirectCacheMaxAge\":31536000,\"baseApiPath\":\"/ghost/api\",\"defaultApiVersion\":\"v3\",\"defaultApiType\":\"content\",\"staticImageUrlPrefix\":\"content/images\",\"cardTransformers\":[{\"name\":\"card-markdown\",\"type\":\"dom\"},{\"name\":\"code\",\"type\":\"dom\"},{\"name\":\"embed\",\"type\":\"dom\"},{\"name\":\"bookmark\",\"type\":\"dom\"},{\"name\":\"hr\",\"type\":\"dom\"},{\"name\":\"html\",\"type\":\"dom\"},{\"name\":\"image\",\"type\":\"dom\"},{\"name\":\"markdown\",\"type\":\"dom\"},{\"name\":\"gallery\",\"type\":\"dom\"}]},\"_defaultApiPathOptions\":{\"baseApiPath\":\"/ghost/api\",\"version\":\"v3\",\"type\":\"content\",\"apiVersions\":{\"all\":[\"v2\",\"v3\",\"canary\"],\"canary\":{\"admin\":\"canary/admin\",\"content\":\"canary/content\",\"members\":\"canary/members\"},\"v3\":{\"admin\":\"v3/admin\",\"content\":\"v3/content\",\"members\":\"v3/members\"},\"v2\":{\"admin\":\"v2/admin\",\"content\":\"v2/content\"}}}}],[\"image\",{\"src\":\"__GHOST_URL__/content/images/2020/01/bandicam-2020-01-03-22-28-14-255.jpg\"}],[\"markdown\",{\"markdown\":\"    import pandas as pd\\n    \"}],[\"markdown\",{\"markdown\":\"    //data[]為先前取得的資料，型態為字典\\n    df = pd.DataFrame(data['data'],columns = data['fields'])\"}],[\"markdown\",{\"markdown\":\"    for row in df:\\n        print(row)\\n        \"}],[\"markdown\",{\"markdown\":\"    >日期\\n    成交股數\\n    成交金額\\n    開盤價\\n    最高價\\n    最低價\\n    收盤價\\n    漲跌價差\\n    成交筆數\"}],[\"markdown\",{\"markdown\":\"    for row in df.values:\\n        print(row)\"}],[\"markdown\",{\"markdown\":\"    >['108/10/01' '8,895,183' '399,156,974' '44.85' '45.00' '44.75' '45.00' '+0.45' '3,310']\\n    ['108/10/02' '4,399,985' '196,735,002' '44.55' '44.85' '44.55' '44.75' '-0.25' '1,745']\\n    ...\\n    ['108/10/31' '17,527,040' '787,119,996' '45.40' '45.40' '44.55' '44.55' '-0.90' '5,017']\"}],[\"markdown\",{\"markdown\":\"    for content in soup.find_all('li'):\\n        print(content.string)\"}],[\"markdown\",{\"markdown\":\"    soup = BeautifulSoup('<h1 id=\\\"thisish1\\\">content</h1>', 'html5lib')\\n    print(soup.h1)\"}],[\"markdown\",{\"markdown\":\"    ><h1 id=\\\"thisish1\\\">content</h1>\"}],[\"markdown\",{\"markdown\":\"    soup = BeautifulSoup('<h1 id=\\\"thisish1\\\">content</h1>', 'html5lib')\\n    print(soup.h1.string)\"}],[\"markdown\",{\"markdown\":\"    >content\"}],[\"markdown\",{\"markdown\":\"    soup = BeautifulSoup('<h1 href=\\\"katsuobushi.com\\\">content</h1>', 'html5lib')\\n    print(soup.h1.get('href'))\"}],[\"markdown\",{\"markdown\":\"    >katsuobushi.com\"}],[\"hr\",{\"_config\":{\"url\":\"http://localhost:2368/\",\"adminUrl\":null,\"apiVersions\":{\"all\":[\"v2\",\"v3\",\"canary\"],\"canary\":{\"admin\":\"canary/admin\",\"content\":\"canary/content\",\"members\":\"canary/members\"},\"v3\":{\"admin\":\"v3/admin\",\"content\":\"v3/content\",\"members\":\"v3/members\"},\"v2\":{\"admin\":\"v2/admin\",\"content\":\"v2/content\"}},\"slugs\":[\"ghost\",\"rss\",\"amp\"],\"redirectCacheMaxAge\":31536000,\"baseApiPath\":\"/ghost/api\",\"defaultApiVersion\":\"v3\",\"defaultApiType\":\"content\",\"staticImageUrlPrefix\":\"content/images\",\"cardTransformers\":[{\"name\":\"card-markdown\",\"type\":\"dom\"},{\"name\":\"code\",\"type\":\"dom\"},{\"name\":\"embed\",\"type\":\"dom\"},{\"name\":\"bookmark\",\"type\":\"dom\"},{\"name\":\"hr\",\"type\":\"dom\"},{\"name\":\"html\",\"type\":\"dom\"},{\"name\":\"image\",\"type\":\"dom\"},{\"name\":\"markdown\",\"type\":\"dom\"},{\"name\":\"gallery\",\"type\":\"dom\"}]},\"_defaultApiPathOptions\":{\"baseApiPath\":\"/ghost/api\",\"version\":\"v3\",\"type\":\"content\",\"apiVersions\":{\"all\":[\"v2\",\"v3\",\"canary\"],\"canary\":{\"admin\":\"canary/admin\",\"content\":\"canary/content\",\"members\":\"canary/members\"},\"v3\":{\"admin\":\"v3/admin\",\"content\":\"v3/content\",\"members\":\"v3/members\"},\"v2\":{\"admin\":\"v2/admin\",\"content\":\"v2/content\"}}}}],[\"markdown\",{\"markdown\":\"    import os\\n    import csv\"}],[\"markdown\",{\"markdown\":\"    file = open(filepath,'w',newline='',encoding='utf-8-sig')\"}],[\"markdown\",{\"markdown\":\"    csvWriter = csv.writer(file)\"}],[\"markdown\",{\"markdown\":\"    csvWriter.writerow(row)\"}],[\"markdown\",{\"markdown\":\"    file.close()\"}]],\"markups\":[[\"strong\"],[\"a\",[\"href\",\"https://www.twse.com.tw/exchangeReport/STOCK_DAY?response=json&date=20190101&stockNo=2881\"]]],\"sections\":[[1,\"p\",[]],[1,\"p\",[[0,[],0,\"使用python抓取網站或網頁資料是再方便不過的了，常見的抓取方法包含抓取網站回應的JSON檔，或是直接抓取網頁內容並進行分析，以下紀錄兩種方法該如何實作。\"]]],[10,0],[1,\"h2\",[[0,[],0,\"建立請求\"],[1,[],0,0]]],[1,\"p\",[[0,[],0,\"載入requests模組以建立HTTP請求\"]]],[10,1],[1,\"p\",[[0,[],0,\"建立GET請求\"]]],[10,2],[10,3],[1,\"h2\",[[0,[],0,\"解析請求\"],[1,[],0,1]]],[1,\"h3\",[[0,[],0,\"目標為JSON\"]]],[1,\"p\",[[0,[],0,\"使用\"],[0,[0],1,\"json()\"],[0,[],0,\"方法解析內容，返回值(data)為字典\"]]],[10,4],[1,\"h3\",[[0,[],0,\"目標為HTML網頁內容\"]]],[1,\"p\",[[0,[],0,\"需使用BeautifulSoup模組裡的方法，使用以下指令載入該模組\"]]],[10,5],[1,\"p\",[[0,[],0,\"使用\"],[0,[0],1,\"BeautifulSoup(htmlMarkup,'html5lib')\"],[0,[],0,\"方法解析網頁內容，返回值(soup)為<class 'bs4.BeautifulSoup'>\"]]],[10,6],[10,7],[1,\"h2\",[[0,[],0,\"取得內容\"],[1,[],0,2]]],[1,\"h3\",[[0,[],0,\"目標為JSON\"]]],[1,\"p\",[[0,[],0,\"以台灣證券交易所-201901月個股日成交資訊為例，網址為'\"],[0,[1],1,\"https://www.twse.com.tw/exchangeReport/STOCK_DAY?response=json&date=20190101&stockNo=2881\"],[0,[],0,\"'，該請求返回的內容如下圖\"]]],[10,8],[1,\"p\",[[0,[],0,\"需使用Pandas模組裡的方法，使用以下指令載入該模組\"]]],[10,9],[1,\"p\",[[0,[],0,\"我們需要取得data裡的0~20所有資訊做為內容，將其放入pandas的dataframe裡，並使用fields作為其欄位的標籤\"]]],[10,10],[1,\"p\",[[0,[],0,\"若要使用foreach迴圈讀取或印出dataframe的內容時，需使用\"],[0,[0],1,\"df.values\"],[0,[],0,\"作為範圍，若只使用df作為範圍會得到錯誤的結果\"]]],[10,11],[10,12],[10,13],[10,14],[1,\"h3\",[[0,[],0,\"目標為HTML網頁內容\"]]],[1,\"p\",[[0,[],0,\"類別為'bs4.BeautifulSoup'的物件可使用以下方法\"],[1,[],0,3],[1,[],0,4],[0,[],0,\"find()\\t//查詢第一筆符合的資料\"],[1,[],0,5],[0,[],0,\"find(htmlTag)\\t//查詢標籤類型為htmlTag的第一筆元素\"],[1,[],0,6],[0,[],0,\"find(id='elementID')\\t//查詢id為elementID的元素\"],[1,[],0,7],[0,[],0,\"find(htmlTag,class_='className')\\t//查詢標籤為htmlTag且class為className的第一筆元素\"],[1,[],0,8],[0,[],0,\"find(htmlTag,className)\\t//查詢標籤為htmlTag且class為className的第一筆元素\"],[1,[],0,9],[1,[],0,10],[0,[],0,\"find_all()\\t//查詢所有符合的元素\"],[1,[],0,11],[0,[],0,\"find_all(htmlTag)\\t//查詢所有符合標籤類型為htmlTag的元素\"],[1,[],0,12],[0,[],0,\"find_all(id='elementID')\\t//查詢id為elementID的元素\"],[1,[],0,13],[0,[],0,\"find_all(htmlTag,class_='className')\\t//查詢標籤為htmlTag且class為className的所有元素\"],[1,[],0,14],[0,[],0,\"find_all(htmlTag,className)\\t//查詢標籤為htmlTag且class為className的所有元素\"]]],[1,\"p\",[[0,[],0,\"若使用find_all()查詢，可使用foreach迴圈歷遍所有查找到的元素\"]]],[10,15],[1,\"p\",[[0,[],0,\"使用\"],[0,[0],1,\".string\"],[0,[],0,\"方法取得元素的內容\"]]],[10,16],[10,17],[10,18],[10,19],[1,\"p\",[[0,[],0,\"使用get('href')方法取得元素的href屬性\"]]],[10,20],[10,21],[10,22],[1,\"h2\",[[0,[],0,\"輸出為檔案\"],[1,[],0,15]]],[1,\"h3\",[[0,[],0,\"輸出為csv檔案\"]]],[1,\"p\",[[0,[],0,\"需載入os及csv模組以使用open及writer方法\"]]],[10,23],[1,\"p\",[[0,[],0,\"使用w模式開啟檔案，w模式為打開一個文件只用於寫入，若文件已存在則打开文件，並從頭開始編輯，原有内容會被刪除。若文件不存在，則創建新文件。\"]]],[10,24],[1,\"p\",[[0,[],0,\"使用csv.writer()創建一個writer\"]]],[10,25],[1,\"p\",[[0,[],0,\"writerow()方法可將一列資料寫入到檔案中\"]]],[10,26],[1,\"p\",[[0,[],0,\"寫入完畢後須關閉檔案，釋放資源\"]]],[10,27],[1,\"p\",[]]],\"ghostVersion\":\"3.0\"}","lexical":null,"html":"<p></p><p>使用python抓取網站或網頁資料是再方便不過的了，常見的抓取方法包含抓取網站回應的JSON檔，或是直接抓取網頁內容並進行分析，以下紀錄兩種方法該如何實作。</p><hr><h2 id=\"-\">建立請求<br></h2><p>載入requests模組以建立HTTP請求</p><!--kg-card-begin: markdown--><pre><code>import requests\n</code></pre>\n<!--kg-card-end: markdown--><p>建立GET請求</p><!--kg-card-begin: markdown--><pre><code>url = '' //填入目標網址以取得網頁內容\nresp = requests.get(url) //建立get請求\n</code></pre>\n<!--kg-card-end: markdown--><hr><h2 id=\"--1\">解析請求<br></h2><h3 id=\"-json\">目標為JSON</h3><p>使用<strong>json()</strong>方法解析內容，返回值(data)為字典</p><!--kg-card-begin: markdown--><pre><code>data = resp.json()\n</code></pre>\n<!--kg-card-end: markdown--><h3 id=\"-html-\">目標為HTML網頁內容</h3><p>需使用BeautifulSoup模組裡的方法，使用以下指令載入該模組</p><!--kg-card-begin: markdown--><pre><code>from bs4 import BeautifulSoup\n</code></pre>\n<!--kg-card-end: markdown--><p>使用<strong>BeautifulSoup(htmlMarkup,'html5lib')</strong>方法解析網頁內容，返回值(soup)為&lt;class 'bs4.BeautifulSoup'&gt;</p><!--kg-card-begin: markdown--><pre><code>soup = BeautifulSoup(resp.text,'html5lib')\n</code></pre>\n<!--kg-card-end: markdown--><hr><h2 id=\"--2\">取得內容<br></h2><h3 id=\"-json-1\">目標為JSON</h3><p>以台灣證券交易所-201901月個股日成交資訊為例，網址為'<a href=\"https://www.twse.com.tw/exchangeReport/STOCK_DAY?response=json&amp;date=20190101&amp;stockNo=2881\">https://www.twse.com.tw/exchangeReport/STOCK_DAY?response=json&amp;date=20190101&amp;stockNo=2881</a>'，該請求返回的內容如下圖</p><figure class=\"kg-card kg-image-card\"><img src=\"__GHOST_URL__/content/images/2020/01/bandicam-2020-01-03-22-28-14-255.jpg\" class=\"kg-image\" alt loading=\"lazy\"></figure><p>需使用Pandas模組裡的方法，使用以下指令載入該模組</p><!--kg-card-begin: markdown--><pre><code>import pandas as pd\n</code></pre>\n<!--kg-card-end: markdown--><p>我們需要取得data裡的0~20所有資訊做為內容，將其放入pandas的dataframe裡，並使用fields作為其欄位的標籤</p><!--kg-card-begin: markdown--><pre><code>//data[]為先前取得的資料，型態為字典\ndf = pd.DataFrame(data['data'],columns = data['fields'])\n</code></pre>\n<!--kg-card-end: markdown--><p>若要使用foreach迴圈讀取或印出dataframe的內容時，需使用<strong>df.values</strong>作為範圍，若只使用df作為範圍會得到錯誤的結果</p><!--kg-card-begin: markdown--><pre><code>for row in df:\n    print(row)\n</code></pre>\n<!--kg-card-end: markdown--><!--kg-card-begin: markdown--><pre><code>&gt;日期\n成交股數\n成交金額\n開盤價\n最高價\n最低價\n收盤價\n漲跌價差\n成交筆數\n</code></pre>\n<!--kg-card-end: markdown--><!--kg-card-begin: markdown--><pre><code>for row in df.values:\n    print(row)\n</code></pre>\n<!--kg-card-end: markdown--><!--kg-card-begin: markdown--><pre><code>&gt;['108/10/01' '8,895,183' '399,156,974' '44.85' '45.00' '44.75' '45.00' '+0.45' '3,310']\n['108/10/02' '4,399,985' '196,735,002' '44.55' '44.85' '44.55' '44.75' '-0.25' '1,745']\n...\n['108/10/31' '17,527,040' '787,119,996' '45.40' '45.40' '44.55' '44.55' '-0.90' '5,017']\n</code></pre>\n<!--kg-card-end: markdown--><h3 id=\"-html--1\">目標為HTML網頁內容</h3><p>類別為'bs4.BeautifulSoup'的物件可使用以下方法<br><br>find() //查詢第一筆符合的資料<br>find(htmlTag) //查詢標籤類型為htmlTag的第一筆元素<br>find(id='elementID') //查詢id為elementID的元素<br>find(htmlTag,class_='className') //查詢標籤為htmlTag且class為className的第一筆元素<br>find(htmlTag,className) //查詢標籤為htmlTag且class為className的第一筆元素<br><br>find_all() //查詢所有符合的元素<br>find_all(htmlTag) //查詢所有符合標籤類型為htmlTag的元素<br>find_all(id='elementID') //查詢id為elementID的元素<br>find_all(htmlTag,class_='className') //查詢標籤為htmlTag且class為className的所有元素<br>find_all(htmlTag,className) //查詢標籤為htmlTag且class為className的所有元素</p><p>若使用find_all()查詢，可使用foreach迴圈歷遍所有查找到的元素</p><!--kg-card-begin: markdown--><pre><code>for content in soup.find_all('li'):\n    print(content.string)\n</code></pre>\n<!--kg-card-end: markdown--><p>使用<strong>.string</strong>方法取得元素的內容</p><!--kg-card-begin: markdown--><pre><code>soup = BeautifulSoup('&lt;h1 id=&quot;thisish1&quot;&gt;content&lt;/h1&gt;', 'html5lib')\nprint(soup.h1)\n</code></pre>\n<!--kg-card-end: markdown--><!--kg-card-begin: markdown--><pre><code>&gt;&lt;h1 id=&quot;thisish1&quot;&gt;content&lt;/h1&gt;\n</code></pre>\n<!--kg-card-end: markdown--><!--kg-card-begin: markdown--><pre><code>soup = BeautifulSoup('&lt;h1 id=&quot;thisish1&quot;&gt;content&lt;/h1&gt;', 'html5lib')\nprint(soup.h1.string)\n</code></pre>\n<!--kg-card-end: markdown--><!--kg-card-begin: markdown--><pre><code>&gt;content\n</code></pre>\n<!--kg-card-end: markdown--><p>使用get('href')方法取得元素的href屬性</p><!--kg-card-begin: markdown--><pre><code>soup = BeautifulSoup('&lt;h1 href=&quot;katsuobushi.com&quot;&gt;content&lt;/h1&gt;', 'html5lib')\nprint(soup.h1.get('href'))\n</code></pre>\n<!--kg-card-end: markdown--><!--kg-card-begin: markdown--><pre><code>&gt;katsuobushi.com\n</code></pre>\n<!--kg-card-end: markdown--><hr><h2 id=\"--3\">輸出為檔案<br></h2><h3 id=\"-csv-\">輸出為csv檔案</h3><p>需載入os及csv模組以使用open及writer方法</p><!--kg-card-begin: markdown--><pre><code>import os\nimport csv\n</code></pre>\n<!--kg-card-end: markdown--><p>使用w模式開啟檔案，w模式為打開一個文件只用於寫入，若文件已存在則打开文件，並從頭開始編輯，原有内容會被刪除。若文件不存在，則創建新文件。</p><!--kg-card-begin: markdown--><pre><code>file = open(filepath,'w',newline='',encoding='utf-8-sig')\n</code></pre>\n<!--kg-card-end: markdown--><p>使用csv.writer()創建一個writer</p><!--kg-card-begin: markdown--><pre><code>csvWriter = csv.writer(file)\n</code></pre>\n<!--kg-card-end: markdown--><p>writerow()方法可將一列資料寫入到檔案中</p><!--kg-card-begin: markdown--><pre><code>csvWriter.writerow(row)\n</code></pre>\n<!--kg-card-end: markdown--><p>寫入完畢後須關閉檔案，釋放資源</p><!--kg-card-begin: markdown--><pre><code>file.close()\n</code></pre>\n<!--kg-card-end: markdown-->","comment_id":"5e0e8ba22418ef16205128e7","plaintext":"使用python抓取網站或網頁資料是再方便不過的了，常見的抓取方法包含抓取網站回應的JSON檔，或是直接抓取網頁內容並進行分析，以下紀錄兩種方法該如何實作。\n\n\n建立請求\n\n\n載入requests模組以建立HTTP請求\n\nimport requests\n\n\n\n建立GET請求\n\nurl = '' //填入目標網址以取得網頁內容\nresp = requests.get(url) //建立get請求\n\n\n\n\n解析請求\n\n\n\n目標為JSON\n\n使用json()方法解析內容，返回值(data)為字典\n\ndata = resp.json()\n\n\n\n\n目標為HTML網頁內容\n\n需使用BeautifulSoup模組裡的方法，使用以下指令載入該模組\n\nfrom bs4 import BeautifulSoup\n\n\n\n使用BeautifulSoup(htmlMarkup,'html5lib')方法解析網頁內容，返回值(soup)為<class 'bs4.BeautifulSoup'>\n\nsoup = BeautifulSoup(resp.text,'html5lib')\n\n\n\n\n取得內容\n\n\n\n目標為JSON\n\n以台灣證券交易所-201901月個股日成交資訊為例，網址為'https://www.twse.com.tw/exchangeReport/STOCK_DAY?response=json&date=20190101&stockNo=2881'，該請求返回的內容如下圖\n\n需使用Pandas模組裡的方法，使用以下指令載入該模組\n\nimport pandas as pd\n\n\n\n我們需要取得data裡的0~20所有資訊做為內容，將其放入pandas的dataframe裡，並使用fields作為其欄位的標籤\n\n//data[]為先前取得的資料，型態為字典\ndf = pd.DataFrame(data['data'],columns = data['fields'])\n\n\n\n若要使用foreach迴圈讀取或印出dataframe的內容時，需使用df.values作為範圍，若只使用df作為範圍會得到錯誤的結果\n\nfor row in df:\n    print(row)\n\n\n\n>日期\n成交股數\n成交金額\n開盤價\n最高價\n最低價\n收盤價\n漲跌價差\n成交筆數\n\n\n\nfor row in df.values:\n    print(row)\n\n\n\n>['108/10/01' '8,895,183' '399,156,974' '44.85' '45.00' '44.75' '45.00' '+0.45' '3,310']\n['108/10/02' '4,399,985' '196,735,002' '44.55' '44.85' '44.55' '44.75' '-0.25' '1,745']\n...\n['108/10/31' '17,527,040' '787,119,996' '45.40' '45.40' '44.55' '44.55' '-0.90' '5,017']\n\n\n\n\n目標為HTML網頁內容\n\n類別為'bs4.BeautifulSoup'的物件可使用以下方法\n\nfind() //查詢第一筆符合的資料\nfind(htmlTag) //查詢標籤類型為htmlTag的第一筆元素\nfind(id='elementID') //查詢id為elementID的元素\nfind(htmlTag,class_='className') //查詢標籤為htmlTag且class為className的第一筆元素\nfind(htmlTag,className) //查詢標籤為htmlTag且class為className的第一筆元素\n\nfind_all() //查詢所有符合的元素\nfind_all(htmlTag) //查詢所有符合標籤類型為htmlTag的元素\nfind_all(id='elementID') //查詢id為elementID的元素\nfind_all(htmlTag,class_='className') //查詢標籤為htmlTag且class為className的所有元素\nfind_all(htmlTag,className) //查詢標籤為htmlTag且class為className的所有元素\n\n若使用find_all()查詢，可使用foreach迴圈歷遍所有查找到的元素\n\nfor content in soup.find_all('li'):\n    print(content.string)\n\n\n\n使用.string方法取得元素的內容\n\nsoup = BeautifulSoup('<h1 id=\"thisish1\">content</h1>', 'html5lib')\nprint(soup.h1)\n\n\n\n><h1 id=\"thisish1\">content</h1>\n\n\n\nsoup = BeautifulSoup('<h1 id=\"thisish1\">content</h1>', 'html5lib')\nprint(soup.h1.string)\n\n\n\n>content\n\n\n\n使用get('href')方法取得元素的href屬性\n\nsoup = BeautifulSoup('<h1 href=\"katsuobushi.com\">content</h1>', 'html5lib')\nprint(soup.h1.get('href'))\n\n\n\n>katsuobushi.com\n\n\n\n\n輸出為檔案\n\n\n\n輸出為csv檔案\n\n需載入os及csv模組以使用open及writer方法\n\nimport os\nimport csv\n\n\n\n使用w模式開啟檔案，w模式為打開一個文件只用於寫入，若文件已存在則打开文件，並從頭開始編輯，原有内容會被刪除。若文件不存在，則創建新文件。\n\nfile = open(filepath,'w',newline='',encoding='utf-8-sig')\n\n\n\n使用csv.writer()創建一個writer\n\ncsvWriter = csv.writer(file)\n\n\n\nwriterow()方法可將一列資料寫入到檔案中\n\ncsvWriter.writerow(row)\n\n\n\n寫入完畢後須關閉檔案，釋放資源\n\nfile.close()\n\n","feature_image":"__GHOST_URL__/content/images/2020/01/python-logo.jpg","featured":0,"type":"post","status":"published","locale":null,"visibility":"public","email_recipient_filter":"none","created_at":"2020-01-03 00:32:34","created_by":"1","updated_at":"2020-10-27 18:29:23","updated_by":null,"published_at":"2020-01-03 16:48:36","published_by":"1","custom_excerpt":"使用python抓取網站或網頁資料是再方便不過的了，常見的抓取方法包含抓取網站回應的JSON檔，或是直接抓取網頁內容並進行分析，以下紀錄兩種方法該如何實作。","codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null,"newsletter_id":null},{"id":"635a816a57207246b927a8a6","uuid":"25605055-50aa-4de0-b413-9e20651c0d29","title":"記憶體的時脈與頻寬","slug":"clock-and-bandwidth","mobiledoc":"{\"version\":\"0.3.1\",\"atoms\":[],\"cards\":[[\"hr\",{\"_config\":{\"url\":\"http://localhost:2368/\",\"adminUrl\":null,\"apiVersions\":{\"all\":[\"v2\",\"v3\",\"canary\"],\"canary\":{\"admin\":\"canary/admin\",\"content\":\"canary/content\",\"members\":\"canary/members\"},\"v3\":{\"admin\":\"v3/admin\",\"content\":\"v3/content\",\"members\":\"v3/members\"},\"v2\":{\"admin\":\"v2/admin\",\"content\":\"v2/content\"}},\"slugs\":[\"ghost\",\"rss\",\"amp\"],\"redirectCacheMaxAge\":31536000,\"baseApiPath\":\"/ghost/api\",\"defaultApiVersion\":\"v3\",\"defaultApiType\":\"content\",\"staticImageUrlPrefix\":\"content/images\",\"cardTransformers\":[{\"name\":\"card-markdown\",\"type\":\"dom\"},{\"name\":\"code\",\"type\":\"dom\"},{\"name\":\"embed\",\"type\":\"dom\"},{\"name\":\"bookmark\",\"type\":\"dom\"},{\"name\":\"hr\",\"type\":\"dom\"},{\"name\":\"html\",\"type\":\"dom\"},{\"name\":\"image\",\"type\":\"dom\"},{\"name\":\"markdown\",\"type\":\"dom\"},{\"name\":\"gallery\",\"type\":\"dom\"}]},\"_defaultApiPathOptions\":{\"baseApiPath\":\"/ghost/api\",\"version\":\"v3\",\"type\":\"content\",\"apiVersions\":{\"all\":[\"v2\",\"v3\",\"canary\"],\"canary\":{\"admin\":\"canary/admin\",\"content\":\"canary/content\",\"members\":\"canary/members\"},\"v3\":{\"admin\":\"v3/admin\",\"content\":\"v3/content\",\"members\":\"v3/members\"},\"v2\":{\"admin\":\"v2/admin\",\"content\":\"v2/content\"}}}}],[\"hr\",{\"_config\":{\"url\":\"http://localhost:2368/\",\"adminUrl\":null,\"apiVersions\":{\"all\":[\"v2\",\"v3\",\"canary\"],\"canary\":{\"admin\":\"canary/admin\",\"content\":\"canary/content\",\"members\":\"canary/members\"},\"v3\":{\"admin\":\"v3/admin\",\"content\":\"v3/content\",\"members\":\"v3/members\"},\"v2\":{\"admin\":\"v2/admin\",\"content\":\"v2/content\"}},\"slugs\":[\"ghost\",\"rss\",\"amp\"],\"redirectCacheMaxAge\":31536000,\"baseApiPath\":\"/ghost/api\",\"defaultApiVersion\":\"v3\",\"defaultApiType\":\"content\",\"staticImageUrlPrefix\":\"content/images\",\"cardTransformers\":[{\"name\":\"card-markdown\",\"type\":\"dom\"},{\"name\":\"code\",\"type\":\"dom\"},{\"name\":\"embed\",\"type\":\"dom\"},{\"name\":\"bookmark\",\"type\":\"dom\"},{\"name\":\"hr\",\"type\":\"dom\"},{\"name\":\"html\",\"type\":\"dom\"},{\"name\":\"image\",\"type\":\"dom\"},{\"name\":\"markdown\",\"type\":\"dom\"},{\"name\":\"gallery\",\"type\":\"dom\"}]},\"_defaultApiPathOptions\":{\"baseApiPath\":\"/ghost/api\",\"version\":\"v3\",\"type\":\"content\",\"apiVersions\":{\"all\":[\"v2\",\"v3\",\"canary\"],\"canary\":{\"admin\":\"canary/admin\",\"content\":\"canary/content\",\"members\":\"canary/members\"},\"v3\":{\"admin\":\"v3/admin\",\"content\":\"v3/content\",\"members\":\"v3/members\"},\"v2\":{\"admin\":\"v2/admin\",\"content\":\"v2/content\"}}}}]],\"markups\":[],\"sections\":[[1,\"p\",[]],[1,\"h2\",[[0,[],0,\"傳輸寬度\"]]],[1,\"h3\",[[0,[],0,\"每次可傳輸的量\"]]],[1,\"p\",[[0,[],0,\"資料進出記憶體時會有寬度的限制，若頻寬是8bit，則代表一次可進去8個bit，若是64bit，則代表一次可同時傳輸64bit\"]]],[10,0],[1,\"h2\",[[0,[],0,\"時脈\"]]],[1,\"h3\",[[0,[],0,\"一秒可傳輸多少次\"]]],[1,\"p\",[[0,[],0,\"以Hz作為單位，代表一秒可以傳多少次，例如800MHz則為每秒800百萬次\"]]],[10,1],[1,\"h2\",[[0,[],0,\"頻寬\"]]],[1,\"h3\",[[0,[],0,\"一秒可傳輸的量\"]]],[1,\"p\",[[0,[],0,\"一秒可傳輸多少次 * 每次可傳輸的量 = 一秒可傳輸的量，以寬度為64bit及時脈為800HHz的例子來說，記憶體頻寬即為每秒64GB\"]]],[1,\"p\",[[0,[],0,\"64bit * 800MHz = 8Bytes * 800MHz = 6400 MBHz = 6.4GBHz = 每秒64GB\"]]]],\"ghostVersion\":\"3.0\"}","lexical":null,"html":"<p></p><h2 id=\"-\">傳輸寬度</h2><h3 id=\"--1\">每次可傳輸的量</h3><p>資料進出記憶體時會有寬度的限制，若頻寬是8bit，則代表一次可進去8個bit，若是64bit，則代表一次可同時傳輸64bit</p><hr><h2 id=\"--2\">時脈</h2><h3 id=\"--3\">一秒可傳輸多少次</h3><p>以Hz作為單位，代表一秒可以傳多少次，例如800MHz則為每秒800百萬次</p><hr><h2 id=\"--4\">頻寬</h2><h3 id=\"--5\">一秒可傳輸的量</h3><p>一秒可傳輸多少次 * 每次可傳輸的量 = 一秒可傳輸的量，以寬度為64bit及時脈為800HHz的例子來說，記憶體頻寬即為每秒64GB</p><p>64bit * 800MHz = 8Bytes * 800MHz = 6400 MBHz = 6.4GBHz = 每秒64GB</p>","comment_id":"5e1de4127108022a40ad7b02","plaintext":"傳輸寬度\n\n\n每次可傳輸的量\n\n資料進出記憶體時會有寬度的限制，若頻寬是8bit，則代表一次可進去8個bit，若是64bit，則代表一次可同時傳輸64bit\n\n\n時脈\n\n\n一秒可傳輸多少次\n\n以Hz作為單位，代表一秒可以傳多少次，例如800MHz則為每秒800百萬次\n\n\n頻寬\n\n\n一秒可傳輸的量\n\n一秒可傳輸多少次 * 每次可傳輸的量 = 一秒可傳輸的量，以寬度為64bit及時脈為800HHz的例子來說，記憶體頻寬即為每秒64GB\n\n64bit * 800MHz = 8Bytes * 800MHz = 6400 MBHz = 6.4GBHz = 每秒64GB","feature_image":"__GHOST_URL__/content/images/2020/01/binary-code-binary-binary-system-byte-bits-administrator-1458897-pxhere.com.jpg","featured":0,"type":"post","status":"published","locale":null,"visibility":"public","email_recipient_filter":"none","created_at":"2020-01-14 15:53:54","created_by":"1","updated_at":"2020-01-14 16:22:18","updated_by":null,"published_at":"2020-01-14 16:21:42","published_by":"1","custom_excerpt":"記憶體的時脈與頻寬","codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null,"newsletter_id":null},{"id":"635a816a57207246b927a8a7","uuid":"e428b33a-304c-44f8-b11a-24d600982d06","title":"[GolangPackage]Excel的讀寫與操作","slug":"golang-package-excelize","mobiledoc":"{\"version\":\"0.3.1\",\"atoms\":[[\"soft-return\",\"\",{}],[\"soft-return\",\"\",{}]],\"cards\":[[\"hr\",{\"_config\":{\"url\":\"http://localhost:2368/\",\"adminUrl\":null,\"apiVersions\":{\"all\":[\"v2\",\"v3\",\"canary\"],\"canary\":{\"admin\":\"canary/admin\",\"content\":\"canary/content\",\"members\":\"canary/members\"},\"v3\":{\"admin\":\"v3/admin\",\"content\":\"v3/content\",\"members\":\"v3/members\"},\"v2\":{\"admin\":\"v2/admin\",\"content\":\"v2/content\"}},\"slugs\":[\"ghost\",\"rss\",\"amp\"],\"redirectCacheMaxAge\":31536000,\"baseApiPath\":\"/ghost/api\",\"defaultApiVersion\":\"v3\",\"defaultApiType\":\"content\",\"staticImageUrlPrefix\":\"content/images\",\"cardTransformers\":[{\"name\":\"card-markdown\",\"type\":\"dom\"},{\"name\":\"code\",\"type\":\"dom\"},{\"name\":\"embed\",\"type\":\"dom\"},{\"name\":\"bookmark\",\"type\":\"dom\"},{\"name\":\"hr\",\"type\":\"dom\"},{\"name\":\"html\",\"type\":\"dom\"},{\"name\":\"image\",\"type\":\"dom\"},{\"name\":\"markdown\",\"type\":\"dom\"},{\"name\":\"gallery\",\"type\":\"dom\"}]},\"_defaultApiPathOptions\":{\"baseApiPath\":\"/ghost/api\",\"version\":\"v3\",\"type\":\"content\",\"apiVersions\":{\"all\":[\"v2\",\"v3\",\"canary\"],\"canary\":{\"admin\":\"canary/admin\",\"content\":\"canary/content\",\"members\":\"canary/members\"},\"v3\":{\"admin\":\"v3/admin\",\"content\":\"v3/content\",\"members\":\"v3/members\"},\"v2\":{\"admin\":\"v2/admin\",\"content\":\"v2/content\"}}}}],[\"markdown\",{\"markdown\":\"    go get github.com/Luxurioust/excelize\"}],[\"hr\",{\"_config\":{\"url\":\"http://localhost:2368/\",\"adminUrl\":null,\"apiVersions\":{\"all\":[\"v2\",\"v3\",\"canary\"],\"canary\":{\"admin\":\"canary/admin\",\"content\":\"canary/content\",\"members\":\"canary/members\"},\"v3\":{\"admin\":\"v3/admin\",\"content\":\"v3/content\",\"members\":\"v3/members\"},\"v2\":{\"admin\":\"v2/admin\",\"content\":\"v2/content\"}},\"slugs\":[\"ghost\",\"rss\",\"amp\"],\"redirectCacheMaxAge\":31536000,\"baseApiPath\":\"/ghost/api\",\"defaultApiVersion\":\"v3\",\"defaultApiType\":\"content\",\"staticImageUrlPrefix\":\"content/images\",\"cardTransformers\":[{\"name\":\"card-markdown\",\"type\":\"dom\"},{\"name\":\"code\",\"type\":\"dom\"},{\"name\":\"embed\",\"type\":\"dom\"},{\"name\":\"bookmark\",\"type\":\"dom\"},{\"name\":\"hr\",\"type\":\"dom\"},{\"name\":\"html\",\"type\":\"dom\"},{\"name\":\"image\",\"type\":\"dom\"},{\"name\":\"markdown\",\"type\":\"dom\"},{\"name\":\"gallery\",\"type\":\"dom\"}]},\"_defaultApiPathOptions\":{\"baseApiPath\":\"/ghost/api\",\"version\":\"v3\",\"type\":\"content\",\"apiVersions\":{\"all\":[\"v2\",\"v3\",\"canary\"],\"canary\":{\"admin\":\"canary/admin\",\"content\":\"canary/content\",\"members\":\"canary/members\"},\"v3\":{\"admin\":\"v3/admin\",\"content\":\"v3/content\",\"members\":\"v3/members\"},\"v2\":{\"admin\":\"v2/admin\",\"content\":\"v2/content\"}}}}],[\"markdown\",{\"markdown\":\"    xlsx := excelize.NewFile()\"}],[\"markdown\",{\"markdown\":\"    inputFilePath := \\\"D:\\\\Project\\\"\\n    xlsx, err := excelize.OpenFile(inputFilePath)\\n\\tif err != nil {\\n\\t\\tfmt.Println(\\\"\\\\rERROR:\\\", err)\\n\\t}\"}],[\"markdown\",{\"markdown\":\"    sheetName := \\\"Sheet1\\\"//指定要讀取的工作表名稱\\n    xlsxRows, err = xlsx.GetRows(sheetName)\\n\\tif err != nil {\\n\\t\\tfmt.Println(\\\"\\\\rERROR:\\\",err)\\n\\t}\"}],[\"markdown\",{\"markdown\":\"    oldSheetName := \\\"Sheet1\\\"//指定目前工作表名稱\\n    newSheetName := \\\"工作表\\\"//指定新的工作表名稱\\n    xlsx.SetSheetName(oldSheetName, newSheetName)\"}],[\"markdown\",{\"markdown\":\"| fill     \\t| 使用單一顏色填充                                                                                                                                                                                                                                                                                                   \\t| 使用漸層填充                                                                       \\t|\\n|----------\\t|--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\\t|------------------------------------------------------------------------------------\\t|\\n| typr     \\t| pattern                                                                                                                                                                                                                                                                                                            \\t| gradient                                                                           \\t|\\n| color    \\t| [\\\"#FFFFFF\\\"]                                                                                                                                                                                                                                                                                                        \\t| [\\\"#FFFFFF\\\",\\\"#E0EBF5\\\"]                                                              \\t|\\n| gradient \\t|                                                                                                                                                          X                                                                                                                                                         \\t| 0:橫向<br>1:縱向<br>2:對角線向上<br>3:對角線向下<br>4:由對角線向內<br>5:由中心向外 \\t|\\n| pattern  \\t| 0:無<br>1:實心<br>2:75%灰色<br>3:50%灰色<br>4:25%灰色<br>5:水平條紋<br>6:垂直條紋<br>7:反對角線條紋<br>8:對角線條紋<br>9:對角線斜紋<br>10:粗線對角線斜紋<br>11:細線水平條紋<br>12:細線垂直條紋<br>13:細線反對角線條紋<br>14:細線對角線條紋<br>15:細線水平斜紋<br>16:細線對角線斜紋<br>17:12.5%灰色<br>18:6.25%灰色 \\t|                                          X                                         \\t|\"}],[\"markdown\",{\"markdown\":\"    //單一顏色填充\\n    patternStyle, err := xlsx.NewStyle(`{\\\"fill\\\":{\\\"type\\\":\\\"pattern\\\",\\\"color\\\":[\\\"#EBF0F3\\\"],\\\"pattern\\\":1}}`)\\n    if err != nil {\\n\\t\\tfmt.Println(\\\"\\\\rERROR:\\\",err)\\n\\t}\\n    \\n    //漸層填充\\n    gradientStyle, err := f.NewStyle(`{\\\"fill\\\":{\\\"type\\\":\\\"gradient\\\",\\\"color\\\":[\\\"#FFFFFF\\\",\\\"#E0EBF5\\\"],\\\"shading\\\":1}}`)\\n    if err != nil {\\n        fmt.Println(err)\\n    }\\n    \"}],[\"markdown\",{\"markdown\":\"|  font  \\t|             \\t|\\n|:------:\\t|:-----------:\\t|\\n|  bold  \\t|  true/false \\t|\\n| italic \\t|  true/false \\t|\\n| family \\t|   字型名稱  \\t|\\n|  size  \\t|   字體大小  \\t|\\n|  color \\t| [\\\"#FFFFFF\\\"] \\t|\"}],[\"markdown\",{\"markdown\":\"    fontStyle, err := f.NewStyle(`{\\\"font\\\":{\\\"bold\\\":true,\\\"italic\\\":false,\\\"size\\\":12,\\\"color\\\":\\\"#FFFFFF\\\"}}`)\\n    if err != nil {\\n        fmt.Println(err)\\n    }\"}],[\"markdown\",{\"markdown\":\"    //使用樣式設定column\\n    err := xlsx.SetColStyle(sheetName, \\\"A1\\\", patternStyle)\\n    \\n    //使用樣式設定cell\\n    err := xlsx.SetCellStyle(sheetName, \\\"A1\\\", \\\"A1\\\", gradientStyle)\"}]],\"markups\":[[\"strong\"]],\"sections\":[[1,\"p\",[]],[1,\"p\",[[0,[],0,\"excelize是一個能夠讀寫excel的package，可讀入或寫入指定位置的資料及更改樣式，適用於批量產生excel檔案及資料處理，須注意的是該package只支援.xlsx的檔案格式，尚不支援.xls的檔案處理\"]]],[10,0],[1,\"h2\",[[0,[],0,\"安裝\"]]],[1,\"p\",[[0,[],0,\"使用指令安裝package\"]]],[10,1],[10,2],[1,\"h2\",[[0,[],0,\"檔案操作\"],[1,[],0,0]]],[1,\"h3\",[[0,[],0,\"創建新檔\"]]],[10,3],[1,\"h3\",[[0,[],0,\"開啟舊檔\"]]],[10,4],[1,\"h3\",[[0,[],0,\"讀取內容\"]]],[1,\"p\",[[0,[],0,\"將檔案內的資料讀入一個二維的字串slice\"]]],[10,5],[1,\"h3\",[[0,[],0,\"變更工作表名稱\"]]],[10,6],[1,\"h3\",[[0,[],0,\"設定樣式\"]]],[1,\"p\",[[0,[0],1,\"建立樣式\"],[1,[],0,1],[0,[],0,\"呼叫函式時使用JSON格式填入所需的樣式參數\"]]],[1,\"p\",[[0,[],0,\"fill：設定儲存格網底\"]]],[10,7],[10,8],[1,\"p\",[]],[1,\"p\",[[0,[],0,\"font：設定儲存格字體\"]]],[10,9],[10,10],[1,\"p\",[[0,[0],1,\"使用樣式\"]]],[10,11],[1,\"p\",[]]],\"ghostVersion\":\"3.0\"}","lexical":null,"html":"<p></p><p>excelize是一個能夠讀寫excel的package，可讀入或寫入指定位置的資料及更改樣式，適用於批量產生excel檔案及資料處理，須注意的是該package只支援.xlsx的檔案格式，尚不支援.xls的檔案處理</p><hr><h2 id=\"-\">安裝</h2><p>使用指令安裝package</p><!--kg-card-begin: markdown--><pre><code>go get github.com/Luxurioust/excelize\n</code></pre>\n<!--kg-card-end: markdown--><hr><h2 id=\"--1\">檔案操作<br></h2><h3 id=\"--2\">創建新檔</h3><!--kg-card-begin: markdown--><pre><code>xlsx := excelize.NewFile()\n</code></pre>\n<!--kg-card-end: markdown--><h3 id=\"--3\">開啟舊檔</h3><!--kg-card-begin: markdown--><pre><code>inputFilePath := &quot;D:\\Project&quot;\nxlsx, err := excelize.OpenFile(inputFilePath)\nif err != nil {\n\tfmt.Println(&quot;\\rERROR:&quot;, err)\n}\n</code></pre>\n<!--kg-card-end: markdown--><h3 id=\"--4\">讀取內容</h3><p>將檔案內的資料讀入一個二維的字串slice</p><!--kg-card-begin: markdown--><pre><code>sheetName := &quot;Sheet1&quot;//指定要讀取的工作表名稱\nxlsxRows, err = xlsx.GetRows(sheetName)\nif err != nil {\n\tfmt.Println(&quot;\\rERROR:&quot;,err)\n}\n</code></pre>\n<!--kg-card-end: markdown--><h3 id=\"--5\">變更工作表名稱</h3><!--kg-card-begin: markdown--><pre><code>oldSheetName := &quot;Sheet1&quot;//指定目前工作表名稱\nnewSheetName := &quot;工作表&quot;//指定新的工作表名稱\nxlsx.SetSheetName(oldSheetName, newSheetName)\n</code></pre>\n<!--kg-card-end: markdown--><h3 id=\"--6\">設定樣式</h3><p><strong>建立樣式</strong><br>呼叫函式時使用JSON格式填入所需的樣式參數</p><p>fill：設定儲存格網底</p><!--kg-card-begin: markdown--><table>\n<thead>\n<tr>\n<th>fill</th>\n<th>使用單一顏色填充</th>\n<th>使用漸層填充</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>typr</td>\n<td>pattern</td>\n<td>gradient</td>\n</tr>\n<tr>\n<td>color</td>\n<td>[&quot;#FFFFFF&quot;]</td>\n<td>[&quot;#FFFFFF&quot;,&quot;#E0EBF5&quot;]</td>\n</tr>\n<tr>\n<td>gradient</td>\n<td>X</td>\n<td>0:橫向<br>1:縱向<br>2:對角線向上<br>3:對角線向下<br>4:由對角線向內<br>5:由中心向外</td>\n</tr>\n<tr>\n<td>pattern</td>\n<td>0:無<br>1:實心<br>2:75%灰色<br>3:50%灰色<br>4:25%灰色<br>5:水平條紋<br>6:垂直條紋<br>7:反對角線條紋<br>8:對角線條紋<br>9:對角線斜紋<br>10:粗線對角線斜紋<br>11:細線水平條紋<br>12:細線垂直條紋<br>13:細線反對角線條紋<br>14:細線對角線條紋<br>15:細線水平斜紋<br>16:細線對角線斜紋<br>17:12.5%灰色<br>18:6.25%灰色</td>\n<td>X</td>\n</tr>\n</tbody>\n</table>\n<!--kg-card-end: markdown--><!--kg-card-begin: markdown--><pre><code>//單一顏色填充\npatternStyle, err := xlsx.NewStyle(`{&quot;fill&quot;:{&quot;type&quot;:&quot;pattern&quot;,&quot;color&quot;:[&quot;#EBF0F3&quot;],&quot;pattern&quot;:1}}`)\nif err != nil {\n\tfmt.Println(&quot;\\rERROR:&quot;,err)\n}\n\n//漸層填充\ngradientStyle, err := f.NewStyle(`{&quot;fill&quot;:{&quot;type&quot;:&quot;gradient&quot;,&quot;color&quot;:[&quot;#FFFFFF&quot;,&quot;#E0EBF5&quot;],&quot;shading&quot;:1}}`)\nif err != nil {\n    fmt.Println(err)\n}\n</code></pre>\n<!--kg-card-end: markdown--><p></p><p>font：設定儲存格字體</p><!--kg-card-begin: markdown--><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">font</th>\n<th style=\"text-align:center\"></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">bold</td>\n<td style=\"text-align:center\">true/false</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">italic</td>\n<td style=\"text-align:center\">true/false</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">family</td>\n<td style=\"text-align:center\">字型名稱</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">size</td>\n<td style=\"text-align:center\">字體大小</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">color</td>\n<td style=\"text-align:center\">[&quot;#FFFFFF&quot;]</td>\n</tr>\n</tbody>\n</table>\n<!--kg-card-end: markdown--><!--kg-card-begin: markdown--><pre><code>fontStyle, err := f.NewStyle(`{&quot;font&quot;:{&quot;bold&quot;:true,&quot;italic&quot;:false,&quot;size&quot;:12,&quot;color&quot;:&quot;#FFFFFF&quot;}}`)\nif err != nil {\n    fmt.Println(err)\n}\n</code></pre>\n<!--kg-card-end: markdown--><p><strong>使用樣式</strong></p><!--kg-card-begin: markdown--><pre><code>//使用樣式設定column\nerr := xlsx.SetColStyle(sheetName, &quot;A1&quot;, patternStyle)\n\n//使用樣式設定cell\nerr := xlsx.SetCellStyle(sheetName, &quot;A1&quot;, &quot;A1&quot;, gradientStyle)\n</code></pre>\n<!--kg-card-end: markdown-->","comment_id":"5e2d660c17169e27181beddf","plaintext":"excelize是一個能夠讀寫excel的package，可讀入或寫入指定位置的資料及更改樣式，適用於批量產生excel檔案及資料處理，須注意的是該package只支援.xlsx的檔案格式，尚不支援.xls的檔案處理\n\n\n安裝\n\n使用指令安裝package\n\ngo get github.com/Luxurioust/excelize\n\n\n\n\n檔案操作\n\n\n\n創建新檔\n\nxlsx := excelize.NewFile()\n\n\n\n\n開啟舊檔\n\ninputFilePath := \"D:\\Project\"\nxlsx, err := excelize.OpenFile(inputFilePath)\nif err != nil {\n\tfmt.Println(\"\\rERROR:\", err)\n}\n\n\n\n\n讀取內容\n\n將檔案內的資料讀入一個二維的字串slice\n\nsheetName := \"Sheet1\"//指定要讀取的工作表名稱\nxlsxRows, err = xlsx.GetRows(sheetName)\nif err != nil {\n\tfmt.Println(\"\\rERROR:\",err)\n}\n\n\n\n\n變更工作表名稱\n\noldSheetName := \"Sheet1\"//指定目前工作表名稱\nnewSheetName := \"工作表\"//指定新的工作表名稱\nxlsx.SetSheetName(oldSheetName, newSheetName)\n\n\n\n\n設定樣式\n\n建立樣式\n呼叫函式時使用JSON格式填入所需的樣式參數\n\nfill：設定儲存格網底\n\n\n\n\nfill\n使用單一顏色填充\n使用漸層填充\n\n\n\n\ntypr\npattern\ngradient\n\n\ncolor\n[\"#FFFFFF\"]\n[\"#FFFFFF\",\"#E0EBF5\"]\n\n\ngradient\nX\n0:橫向\n1:縱向\n2:對角線向上\n3:對角線向下\n4:由對角線向內\n5:由中心向外\n\n\npattern\n0:無\n1:實心\n2:75%灰色\n3:50%灰色\n4:25%灰色\n5:水平條紋\n6:垂直條紋\n7:反對角線條紋\n8:對角線條紋\n9:對角線斜紋\n10:粗線對角線斜紋\n11:細線水平條紋\n12:細線垂直條紋\n13:細線反對角線條紋\n14:細線對角線條紋\n15:細線水平斜紋\n16:細線對角線斜紋\n17:12.5%灰色\n18:6.25%灰色\nX\n\n\n\n\n\n//單一顏色填充\npatternStyle, err := xlsx.NewStyle(`{\"fill\":{\"type\":\"pattern\",\"color\":[\"#EBF0F3\"],\"pattern\":1}}`)\nif err != nil {\n\tfmt.Println(\"\\rERROR:\",err)\n}\n\n//漸層填充\ngradientStyle, err := f.NewStyle(`{\"fill\":{\"type\":\"gradient\",\"color\":[\"#FFFFFF\",\"#E0EBF5\"],\"shading\":1}}`)\nif err != nil {\n    fmt.Println(err)\n}\n\n\n\n\n\nfont：設定儲存格字體\n\n\n\n\nfont\n\n\n\n\n\nbold\ntrue/false\n\n\nitalic\ntrue/false\n\n\nfamily\n字型名稱\n\n\nsize\n字體大小\n\n\ncolor\n[\"#FFFFFF\"]\n\n\n\n\n\nfontStyle, err := f.NewStyle(`{\"font\":{\"bold\":true,\"italic\":false,\"size\":12,\"color\":\"#FFFFFF\"}}`)\nif err != nil {\n    fmt.Println(err)\n}\n\n\n\n使用樣式\n\n//使用樣式設定column\nerr := xlsx.SetColStyle(sheetName, \"A1\", patternStyle)\n\n//使用樣式設定cell\nerr := xlsx.SetCellStyle(sheetName, \"A1\", \"A1\", gradientStyle)\n\n","feature_image":"__GHOST_URL__/content/images/2020/01/golang-long-1.jpeg","featured":0,"type":"post","status":"published","locale":null,"visibility":"public","email_recipient_filter":"none","created_at":"2020-01-26 10:12:28","created_by":"1","updated_at":"2020-10-27 18:28:45","updated_by":null,"published_at":"2020-01-26 15:50:18","published_by":"1","custom_excerpt":"excelize是一個能夠讀寫excel的package，可讀入或寫入指定位置的資料及更改樣式，適用於批量產生excel檔案及資料處理","codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null,"newsletter_id":null},{"id":"635a816a57207246b927a8a8","uuid":"31119615-c772-4dd2-8067-07394d5c7867","title":"[Golang]channel簡介","slug":"golang-channel","mobiledoc":"{\"version\":\"0.3.1\",\"atoms\":[],\"cards\":[[\"hr\",{\"_config\":{\"url\":\"http://localhost:2368/\",\"adminUrl\":null,\"apiVersions\":{\"all\":[\"v2\",\"v3\",\"canary\"],\"canary\":{\"admin\":\"canary/admin\",\"content\":\"canary/content\",\"members\":\"canary/members\"},\"v3\":{\"admin\":\"v3/admin\",\"content\":\"v3/content\",\"members\":\"v3/members\"},\"v2\":{\"admin\":\"v2/admin\",\"content\":\"v2/content\"}},\"slugs\":[\"ghost\",\"rss\",\"amp\"],\"redirectCacheMaxAge\":31536000,\"baseApiPath\":\"/ghost/api\",\"defaultApiVersion\":\"v3\",\"defaultApiType\":\"content\",\"staticImageUrlPrefix\":\"content/images\",\"cardTransformers\":[{\"name\":\"card-markdown\",\"type\":\"dom\"},{\"name\":\"code\",\"type\":\"dom\"},{\"name\":\"embed\",\"type\":\"dom\"},{\"name\":\"bookmark\",\"type\":\"dom\"},{\"name\":\"hr\",\"type\":\"dom\"},{\"name\":\"html\",\"type\":\"dom\"},{\"name\":\"image\",\"type\":\"dom\"},{\"name\":\"markdown\",\"type\":\"dom\"},{\"name\":\"gallery\",\"type\":\"dom\"}]},\"_defaultApiPathOptions\":{\"baseApiPath\":\"/ghost/api\",\"version\":\"v3\",\"type\":\"content\",\"apiVersions\":{\"all\":[\"v2\",\"v3\",\"canary\"],\"canary\":{\"admin\":\"canary/admin\",\"content\":\"canary/content\",\"members\":\"canary/members\"},\"v3\":{\"admin\":\"v3/admin\",\"content\":\"v3/content\",\"members\":\"v3/members\"},\"v2\":{\"admin\":\"v2/admin\",\"content\":\"v2/content\"}}}}],[\"markdown\",{\"markdown\":\"    ch := make(chan int)\\n    ch := make(chan int,5)\"}],[\"markdown\",{\"markdown\":\"    //OK(buffer為0)\\n    ch := make(chan int)\\n    defer close(ch)\\n    go func(){\\n        ch <- 7\\n    }()\\n    \\n    fmt.Println(<-ch)\\n    \\n    //ERROR(buffer為0)\\n    ch := make(chan int)\\n    defer close(ch)\\n    ch <- 7\\n    \\n    fmt.Println(<-ch)\\n    \\n    //OK(buffer為1)\\n    ch := make(chan int,1)\\n    defer close(ch)\\n    ch <- 7\\n    \\n    fmt.Println(<-ch)\"}],[\"hr\",{\"_config\":{\"url\":\"http://localhost:2368/\",\"adminUrl\":null,\"apiVersions\":{\"all\":[\"v2\",\"v3\",\"canary\"],\"canary\":{\"admin\":\"canary/admin\",\"content\":\"canary/content\",\"members\":\"canary/members\"},\"v3\":{\"admin\":\"v3/admin\",\"content\":\"v3/content\",\"members\":\"v3/members\"},\"v2\":{\"admin\":\"v2/admin\",\"content\":\"v2/content\"}},\"slugs\":[\"ghost\",\"rss\",\"amp\"],\"redirectCacheMaxAge\":31536000,\"baseApiPath\":\"/ghost/api\",\"defaultApiVersion\":\"v3\",\"defaultApiType\":\"content\",\"staticImageUrlPrefix\":\"content/images\",\"cardTransformers\":[{\"name\":\"card-markdown\",\"type\":\"dom\"},{\"name\":\"code\",\"type\":\"dom\"},{\"name\":\"embed\",\"type\":\"dom\"},{\"name\":\"bookmark\",\"type\":\"dom\"},{\"name\":\"hr\",\"type\":\"dom\"},{\"name\":\"html\",\"type\":\"dom\"},{\"name\":\"image\",\"type\":\"dom\"},{\"name\":\"markdown\",\"type\":\"dom\"},{\"name\":\"gallery\",\"type\":\"dom\"}]},\"_defaultApiPathOptions\":{\"baseApiPath\":\"/ghost/api\",\"version\":\"v3\",\"type\":\"content\",\"apiVersions\":{\"all\":[\"v2\",\"v3\",\"canary\"],\"canary\":{\"admin\":\"canary/admin\",\"content\":\"canary/content\",\"members\":\"canary/members\"},\"v3\":{\"admin\":\"v3/admin\",\"content\":\"v3/content\",\"members\":\"v3/members\"},\"v2\":{\"admin\":\"v2/admin\",\"content\":\"v2/content\"}}}}],[\"markdown\",{\"markdown\":\"    ch <- 7\"}],[\"markdown\",{\"markdown\":\"    var result int\\n    result <- ch\\n    fmt.Println(result)\"}],[\"hr\",{\"_config\":{\"url\":\"http://localhost:2368/\",\"adminUrl\":null,\"apiVersions\":{\"all\":[\"v2\",\"v3\",\"canary\"],\"canary\":{\"admin\":\"canary/admin\",\"content\":\"canary/content\",\"members\":\"canary/members\"},\"v3\":{\"admin\":\"v3/admin\",\"content\":\"v3/content\",\"members\":\"v3/members\"},\"v2\":{\"admin\":\"v2/admin\",\"content\":\"v2/content\"}},\"slugs\":[\"ghost\",\"rss\",\"amp\"],\"redirectCacheMaxAge\":31536000,\"baseApiPath\":\"/ghost/api\",\"defaultApiVersion\":\"v3\",\"defaultApiType\":\"content\",\"staticImageUrlPrefix\":\"content/images\",\"cardTransformers\":[{\"name\":\"card-markdown\",\"type\":\"dom\"},{\"name\":\"code\",\"type\":\"dom\"},{\"name\":\"embed\",\"type\":\"dom\"},{\"name\":\"bookmark\",\"type\":\"dom\"},{\"name\":\"hr\",\"type\":\"dom\"},{\"name\":\"html\",\"type\":\"dom\"},{\"name\":\"image\",\"type\":\"dom\"},{\"name\":\"markdown\",\"type\":\"dom\"},{\"name\":\"gallery\",\"type\":\"dom\"}]},\"_defaultApiPathOptions\":{\"baseApiPath\":\"/ghost/api\",\"version\":\"v3\",\"type\":\"content\",\"apiVersions\":{\"all\":[\"v2\",\"v3\",\"canary\"],\"canary\":{\"admin\":\"canary/admin\",\"content\":\"canary/content\",\"members\":\"canary/members\"},\"v3\":{\"admin\":\"v3/admin\",\"content\":\"v3/content\",\"members\":\"v3/members\"},\"v2\":{\"admin\":\"v2/admin\",\"content\":\"v2/content\"}}}}],[\"markdown\",{\"markdown\":\"    func foo(ch chan int, val int) {\\n        ch <- val\\n    }\\n\\n    func main() {\\n        ch := make(chan int, 5)\\n        for i := 0; i < 5; i++ {\\n            foo(ch, i)\\n        }\\n        close(ch)\\n\\n        for ele := range ch {\\n            fmt.Println(ele)\\n        }\\n    }\"}],[\"markdown\",{\"markdown\":\"    var wg sync.WaitGroup\\n    \\n    func foo(ch chan int, val int) {\\n        defer wg.Done()\\n        ch <- val\\n    }\\n\\n    func main() {\\n        ch := make(chan int, 5)\\n        for i := 0; i < 5; i++ {\\n            wg.Add(1)\\n            foo(ch, i)\\n        }\\n        wg.Wait()\\n        close(ch)\\n\\n        for ele := range ch {\\n            fmt.Println(ele)\\n        }\\n    }\"}]],\"markups\":[],\"sections\":[[1,\"p\",[]],[1,\"p\",[[0,[],0,\"在golang裡可使用channel在多個執行緒與主程式之間傳送資料，channel可設定不同型態的buffer，並指定緩衝區大小\"]]],[10,0],[1,\"h2\",[[0,[],0,\"建立channel\"]]],[1,\"p\",[[0,[],0,\"使用make配置空間，第一個參數使用chan指定為通道類型，後面接上channel的型態，第二個參數可加可不加，用來宣告buffer的大小\"]]],[10,1],[1,\"p\",[[0,[],0,\"須注意buffer的預設大小為零，若無指定buffer大小則發送方與接收方需同時準備好才可傳值，否則會造成deadlock(死結)\"]]],[10,2],[10,3],[1,\"h2\",[[0,[],0,\"使用channel傳遞數值\"]]],[1,\"h3\",[[0,[],0,\"傳入channel\"]]],[1,\"p\",[[0,[],0,\"將箭頭由數值指向channel，代表將值傳入到channel內\"]]],[10,4],[1,\"h3\",[[0,[],0,\"傳出channel\"]]],[1,\"p\",[[0,[],0,\"將箭頭由channel指向目的地，代表將數值由channel傳出\"]]],[10,5],[10,6],[1,\"h2\",[[0,[],0,\"等待所有goroutine結束\"]]],[1,\"p\",[[0,[],0,\"有時會遇到明明寫好了goroutine，但在最後將要把數據輸出時卻沒出現任何數據，這時就有可能是因為執行緒尚未結束運算而已經先呼叫close(ch)導致無法使用ch，所以輸出時不會得到channel傳來的任何資訊，當然也不會輸出任何東西\"]]],[10,7],[1,\"p\",[[0,[],0,\"我們可以使用WaitGroup控制，等到所有執行緒都結束後再繼續往下執行\"]]],[10,8],[1,\"p\",[]]],\"ghostVersion\":\"3.0\"}","lexical":null,"html":"<p></p><p>在golang裡可使用channel在多個執行緒與主程式之間傳送資料，channel可設定不同型態的buffer，並指定緩衝區大小</p><hr><h2 id=\"-channel\">建立channel</h2><p>使用make配置空間，第一個參數使用chan指定為通道類型，後面接上channel的型態，第二個參數可加可不加，用來宣告buffer的大小</p><!--kg-card-begin: markdown--><pre><code>ch := make(chan int)\nch := make(chan int,5)\n</code></pre>\n<!--kg-card-end: markdown--><p>須注意buffer的預設大小為零，若無指定buffer大小則發送方與接收方需同時準備好才可傳值，否則會造成deadlock(死結)</p><!--kg-card-begin: markdown--><pre><code>//OK(buffer為0)\nch := make(chan int)\ndefer close(ch)\ngo func(){\n    ch &lt;- 7\n}()\n\nfmt.Println(&lt;-ch)\n\n//ERROR(buffer為0)\nch := make(chan int)\ndefer close(ch)\nch &lt;- 7\n\nfmt.Println(&lt;-ch)\n\n//OK(buffer為1)\nch := make(chan int,1)\ndefer close(ch)\nch &lt;- 7\n\nfmt.Println(&lt;-ch)\n</code></pre>\n<!--kg-card-end: markdown--><hr><h2 id=\"-channel-\">使用channel傳遞數值</h2><h3 id=\"-channel-1\">傳入channel</h3><p>將箭頭由數值指向channel，代表將值傳入到channel內</p><!--kg-card-begin: markdown--><pre><code>ch &lt;- 7\n</code></pre>\n<!--kg-card-end: markdown--><h3 id=\"-channel-2\">傳出channel</h3><p>將箭頭由channel指向目的地，代表將數值由channel傳出</p><!--kg-card-begin: markdown--><pre><code>var result int\nresult &lt;- ch\nfmt.Println(result)\n</code></pre>\n<!--kg-card-end: markdown--><hr><h2 id=\"-goroutine-\">等待所有goroutine結束</h2><p>有時會遇到明明寫好了goroutine，但在最後將要把數據輸出時卻沒出現任何數據，這時就有可能是因為執行緒尚未結束運算而已經先呼叫close(ch)導致無法使用ch，所以輸出時不會得到channel傳來的任何資訊，當然也不會輸出任何東西</p><!--kg-card-begin: markdown--><pre><code>func foo(ch chan int, val int) {\n    ch &lt;- val\n}\n\nfunc main() {\n    ch := make(chan int, 5)\n    for i := 0; i &lt; 5; i++ {\n        foo(ch, i)\n    }\n    close(ch)\n\n    for ele := range ch {\n        fmt.Println(ele)\n    }\n}\n</code></pre>\n<!--kg-card-end: markdown--><p>我們可以使用WaitGroup控制，等到所有執行緒都結束後再繼續往下執行</p><!--kg-card-begin: markdown--><pre><code>var wg sync.WaitGroup\n\nfunc foo(ch chan int, val int) {\n    defer wg.Done()\n    ch &lt;- val\n}\n\nfunc main() {\n    ch := make(chan int, 5)\n    for i := 0; i &lt; 5; i++ {\n        wg.Add(1)\n        foo(ch, i)\n    }\n    wg.Wait()\n    close(ch)\n\n    for ele := range ch {\n        fmt.Println(ele)\n    }\n}\n</code></pre>\n<!--kg-card-end: markdown-->","comment_id":"5e2ee3d2c847230f10934c35","plaintext":"在golang裡可使用channel在多個執行緒與主程式之間傳送資料，channel可設定不同型態的buffer，並指定緩衝區大小\n\n\n建立channel\n\n使用make配置空間，第一個參數使用chan指定為通道類型，後面接上channel的型態，第二個參數可加可不加，用來宣告buffer的大小\n\nch := make(chan int)\nch := make(chan int,5)\n\n\n\n須注意buffer的預設大小為零，若無指定buffer大小則發送方與接收方需同時準備好才可傳值，否則會造成deadlock(死結)\n\n//OK(buffer為0)\nch := make(chan int)\ndefer close(ch)\ngo func(){\n    ch <- 7\n}()\n\nfmt.Println(<-ch)\n\n//ERROR(buffer為0)\nch := make(chan int)\ndefer close(ch)\nch <- 7\n\nfmt.Println(<-ch)\n\n//OK(buffer為1)\nch := make(chan int,1)\ndefer close(ch)\nch <- 7\n\nfmt.Println(<-ch)\n\n\n\n\n使用channel傳遞數值\n\n\n傳入channel\n\n將箭頭由數值指向channel，代表將值傳入到channel內\n\nch <- 7\n\n\n\n\n傳出channel\n\n將箭頭由channel指向目的地，代表將數值由channel傳出\n\nvar result int\nresult <- ch\nfmt.Println(result)\n\n\n\n\n等待所有goroutine結束\n\n有時會遇到明明寫好了goroutine，但在最後將要把數據輸出時卻沒出現任何數據，這時就有可能是因為執行緒尚未結束運算而已經先呼叫close(ch)導致無法使用ch，所以輸出時不會得到channel傳來的任何資訊，當然也不會輸出任何東西\n\nfunc foo(ch chan int, val int) {\n    ch <- val\n}\n\nfunc main() {\n    ch := make(chan int, 5)\n    for i := 0; i < 5; i++ {\n        foo(ch, i)\n    }\n    close(ch)\n\n    for ele := range ch {\n        fmt.Println(ele)\n    }\n}\n\n\n\n我們可以使用WaitGroup控制，等到所有執行緒都結束後再繼續往下執行\n\nvar wg sync.WaitGroup\n\nfunc foo(ch chan int, val int) {\n    defer wg.Done()\n    ch <- val\n}\n\nfunc main() {\n    ch := make(chan int, 5)\n    for i := 0; i < 5; i++ {\n        wg.Add(1)\n        foo(ch, i)\n    }\n    wg.Wait()\n    close(ch)\n\n    for ele := range ch {\n        fmt.Println(ele)\n    }\n}\n\n","feature_image":"__GHOST_URL__/content/images/2020/01/golang-long-2.jpeg","featured":0,"type":"post","status":"published","locale":null,"visibility":"public","email_recipient_filter":"none","created_at":"2020-01-27 13:21:22","created_by":"1","updated_at":"2021-06-14 09:38:33","updated_by":null,"published_at":"2020-01-27 15:43:32","published_by":"1","custom_excerpt":"在golang裡可使用channel在多個執行緒與主程式之間傳送資料，channel可設定不同型態的buffer，並指定緩衝區大小","codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null,"newsletter_id":null},{"id":"635a816a57207246b927a8a9","uuid":"ce2fd7eb-30dd-4b9b-9b36-1618ea8166b2","title":"[Clover]開啟Clover時顯示錯誤訊息：Cannot install without ensuring the file system is read-write","slug":"clover-package-err","mobiledoc":"{\"version\":\"0.3.1\",\"atoms\":[[\"soft-return\",\"\",{}],[\"soft-return\",\"\",{}],[\"soft-return\",\"\",{}],[\"soft-return\",\"\",{}],[\"soft-return\",\"\",{}],[\"soft-return\",\"\",{}],[\"soft-return\",\"\",{}],[\"soft-return\",\"\",{}],[\"soft-return\",\"\",{}]],\"cards\":[[\"image\",{\"src\":\"__GHOST_URL__/content/images/2020/02/errMsg.png\"}],[\"hr\",{\"_config\":{\"url\":\"http://localhost:2368/\",\"adminUrl\":null,\"apiVersions\":{\"all\":[\"v2\",\"v3\",\"canary\"],\"canary\":{\"admin\":\"canary/admin\",\"content\":\"canary/content\",\"members\":\"canary/members\"},\"v3\":{\"admin\":\"v3/admin\",\"content\":\"v3/content\",\"members\":\"v3/members\"},\"v2\":{\"admin\":\"v2/admin\",\"content\":\"v2/content\"}},\"slugs\":[\"ghost\",\"rss\",\"amp\"],\"redirectCacheMaxAge\":31536000,\"baseApiPath\":\"/ghost/api\",\"defaultApiVersion\":\"v3\",\"defaultApiType\":\"content\",\"staticImageUrlPrefix\":\"content/images\",\"cardTransformers\":[{\"name\":\"card-markdown\",\"type\":\"dom\"},{\"name\":\"code\",\"type\":\"dom\"},{\"name\":\"embed\",\"type\":\"dom\"},{\"name\":\"bookmark\",\"type\":\"dom\"},{\"name\":\"hr\",\"type\":\"dom\"},{\"name\":\"html\",\"type\":\"dom\"},{\"name\":\"image\",\"type\":\"dom\"},{\"name\":\"markdown\",\"type\":\"dom\"},{\"name\":\"gallery\",\"type\":\"dom\"}]},\"_defaultApiPathOptions\":{\"baseApiPath\":\"/ghost/api\",\"version\":\"v3\",\"type\":\"content\",\"apiVersions\":{\"all\":[\"v2\",\"v3\",\"canary\"],\"canary\":{\"admin\":\"canary/admin\",\"content\":\"canary/content\",\"members\":\"canary/members\"},\"v3\":{\"admin\":\"v3/admin\",\"content\":\"v3/content\",\"members\":\"v3/members\"},\"v2\":{\"admin\":\"v2/admin\",\"content\":\"v2/content\"}}}}],[\"hr\",{\"_config\":{\"url\":\"http://localhost:2368/\",\"adminUrl\":null,\"apiVersions\":{\"all\":[\"v2\",\"v3\",\"canary\"],\"canary\":{\"admin\":\"canary/admin\",\"content\":\"canary/content\",\"members\":\"canary/members\"},\"v3\":{\"admin\":\"v3/admin\",\"content\":\"v3/content\",\"members\":\"v3/members\"},\"v2\":{\"admin\":\"v2/admin\",\"content\":\"v2/content\"}},\"slugs\":[\"ghost\",\"rss\",\"amp\"],\"redirectCacheMaxAge\":31536000,\"baseApiPath\":\"/ghost/api\",\"defaultApiVersion\":\"v3\",\"defaultApiType\":\"content\",\"staticImageUrlPrefix\":\"content/images\",\"cardTransformers\":[{\"name\":\"card-markdown\",\"type\":\"dom\"},{\"name\":\"code\",\"type\":\"dom\"},{\"name\":\"embed\",\"type\":\"dom\"},{\"name\":\"bookmark\",\"type\":\"dom\"},{\"name\":\"hr\",\"type\":\"dom\"},{\"name\":\"html\",\"type\":\"dom\"},{\"name\":\"image\",\"type\":\"dom\"},{\"name\":\"markdown\",\"type\":\"dom\"},{\"name\":\"gallery\",\"type\":\"dom\"}]},\"_defaultApiPathOptions\":{\"baseApiPath\":\"/ghost/api\",\"version\":\"v3\",\"type\":\"content\",\"apiVersions\":{\"all\":[\"v2\",\"v3\",\"canary\"],\"canary\":{\"admin\":\"canary/admin\",\"content\":\"canary/content\",\"members\":\"canary/members\"},\"v3\":{\"admin\":\"v3/admin\",\"content\":\"v3/content\",\"members\":\"v3/members\"},\"v2\":{\"admin\":\"v2/admin\",\"content\":\"v2/content\"}}}}],[\"hr\",{\"_config\":{\"url\":\"http://localhost:2368/\",\"adminUrl\":null,\"apiVersions\":{\"all\":[\"v2\",\"v3\",\"canary\"],\"canary\":{\"admin\":\"canary/admin\",\"content\":\"canary/content\",\"members\":\"canary/members\"},\"v3\":{\"admin\":\"v3/admin\",\"content\":\"v3/content\",\"members\":\"v3/members\"},\"v2\":{\"admin\":\"v2/admin\",\"content\":\"v2/content\"}},\"slugs\":[\"ghost\",\"rss\",\"amp\"],\"redirectCacheMaxAge\":31536000,\"baseApiPath\":\"/ghost/api\",\"defaultApiVersion\":\"v3\",\"defaultApiType\":\"content\",\"staticImageUrlPrefix\":\"content/images\",\"cardTransformers\":[{\"name\":\"card-markdown\",\"type\":\"dom\"},{\"name\":\"code\",\"type\":\"dom\"},{\"name\":\"embed\",\"type\":\"dom\"},{\"name\":\"bookmark\",\"type\":\"dom\"},{\"name\":\"hr\",\"type\":\"dom\"},{\"name\":\"html\",\"type\":\"dom\"},{\"name\":\"image\",\"type\":\"dom\"},{\"name\":\"markdown\",\"type\":\"dom\"},{\"name\":\"gallery\",\"type\":\"dom\"}]},\"_defaultApiPathOptions\":{\"baseApiPath\":\"/ghost/api\",\"version\":\"v3\",\"type\":\"content\",\"apiVersions\":{\"all\":[\"v2\",\"v3\",\"canary\"],\"canary\":{\"admin\":\"canary/admin\",\"content\":\"canary/content\",\"members\":\"canary/members\"},\"v3\":{\"admin\":\"v3/admin\",\"content\":\"v3/content\",\"members\":\"v3/members\"},\"v2\":{\"admin\":\"v2/admin\",\"content\":\"v2/content\"}}}}],[\"embed\",{\"url\":\"https://www.reddit.com/r/hackintosh/comments/d9pbhy/clover_cannot_install_wo_ensuring_file_system_is/\",\"html\":\"\\n    <blockquote class=\\\"reddit-card\\\" >\\n      <a href=\\\"https://www.reddit.com/r/hackintosh/comments/d9pbhy/clover_cannot_install_wo_ensuring_file_system_is/?ref_source=embed&amp;ref=share\\\">Clover - Cannot Install w/o Ensuring File System is Read/Write</a> from\\n      <a href=\\\"https://www.reddit.com/r/hackintosh/\\\">hackintosh</a>\\n    </blockquote>\\n    <script async src=\\\"https://embed.redditmedia.com/widgets/platform.js\\\" charset=\\\"UTF-8\\\"></script>\\n\",\"type\":\"rich\"}]],\"markups\":[],\"sections\":[[10,0],[1,\"p\",[]],[1,\"h2\",[[0,[],0,\"版本\"]]],[1,\"p\",[[0,[],0,\"OS：macOs Catalina  Version 10.15.3\"],[1,[],0,0],[0,[],0,\"Clover：Clover_v2.5k_r5104\"]]],[10,1],[1,\"h2\",[[0,[],0,\"問題\"]]],[1,\"p\",[[0,[],0,\"在開啟Clover時會跳出\\\"Cannot install without ensuring the file system is read-write\\\"錯誤訊息\"]]],[10,2],[1,\"h2\",[[0,[],0,\"解決方法及步驟\"]]],[1,\"p\",[[0,[],0,\"1.Click the Apple symbol in the Menu bar.\"],[1,[],0,1],[0,[],0,\"2.Click Restart…\"],[1,[],0,2],[0,[],0,\"3.Hold down Command-R to reboot into Recovery Mode.\"],[1,[],0,3],[0,[],0,\"4.Click Utilities.\"],[1,[],0,4],[0,[],0,\"5.Select Terminal.\"],[1,[],0,5],[0,[],0,\"6.Type csrutil disable.\"],[1,[],0,6],[0,[],0,\"7.Press Return or Enter on your keyboard.\"],[1,[],0,7],[0,[],0,\"8.Click the Apple symbol in the Menu bar.\"],[1,[],0,8],[0,[],0,\"9.Click Restart…\"]]],[10,3],[1,\"h2\",[[0,[],0,\"參考資料\"]]],[10,4],[1,\"p\",[]]],\"ghostVersion\":\"3.0\"}","lexical":null,"html":"<figure class=\"kg-card kg-image-card\"><img src=\"__GHOST_URL__/content/images/2020/02/errMsg.png\" class=\"kg-image\" alt loading=\"lazy\"></figure><p></p><h2 id=\"-\">版本</h2><p>OS：macOs Catalina  Version 10.15.3<br>Clover：Clover_v2.5k_r5104</p><hr><h2 id=\"--1\">問題</h2><p>在開啟Clover時會跳出\"Cannot install without ensuring the file system is read-write\"錯誤訊息</p><hr><h2 id=\"--2\">解決方法及步驟</h2><p>1.Click the Apple symbol in the Menu bar.<br>2.Click Restart…<br>3.Hold down Command-R to reboot into Recovery Mode.<br>4.Click Utilities.<br>5.Select Terminal.<br>6.Type csrutil disable.<br>7.Press Return or Enter on your keyboard.<br>8.Click the Apple symbol in the Menu bar.<br>9.Click Restart…</p><hr><h2 id=\"--3\">參考資料</h2><figure class=\"kg-card kg-embed-card\">\n    <blockquote class=\"reddit-card\" >\n      <a href=\"https://www.reddit.com/r/hackintosh/comments/d9pbhy/clover_cannot_install_wo_ensuring_file_system_is/?ref_source=embed&amp;ref=share\">Clover - Cannot Install w/o Ensuring File System is Read/Write</a> from\n      <a href=\"https://www.reddit.com/r/hackintosh/\">hackintosh</a>\n    </blockquote>\n    <script async src=\"https://embed.redditmedia.com/widgets/platform.js\" charset=\"UTF-8\"></script>\n</figure>","comment_id":"5e512e2257c9b119c4cb7261","plaintext":"版本\n\nOS：macOs Catalina  Version 10.15.3\nClover：Clover_v2.5k_r5104\n\n\n問題\n\n在開啟Clover時會跳出\"Cannot install without ensuring the file system is read-write\"錯誤訊息\n\n\n解決方法及步驟\n\n1.Click the Apple symbol in the Menu bar.\n2.Click Restart…\n3.Hold down Command-R to reboot into Recovery Mode.\n4.Click Utilities.\n5.Select Terminal.\n6.Type csrutil disable.\n7.Press Return or Enter on your keyboard.\n8.Click the Apple symbol in the Menu bar.\n9.Click Restart…\n\n\n參考資料\n\n\n\nClover - Cannot Install w/o Ensuring File System is Read/Write from\nhackintosh\n\n\n","feature_image":"__GHOST_URL__/content/images/2020/02/clover-1.png","featured":0,"type":"post","status":"published","locale":null,"visibility":"public","email_recipient_filter":"none","created_at":"2020-02-22 13:35:30","created_by":"1","updated_at":"2020-10-27 18:38:56","updated_by":null,"published_at":"2020-02-22 14:11:49","published_by":"1","custom_excerpt":"在開啟Clover時會跳出\"Cannot install without ensuring the file system is read-write\"錯誤訊息","codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null,"newsletter_id":null},{"id":"635a816a57207246b927a8aa","uuid":"2636df63-6441-40a4-8b26-caa00d712caa","title":"[C++]陣列與指標的位址","slug":"cpp-array-pointer-address","mobiledoc":"{\"version\":\"0.3.1\",\"atoms\":[],\"cards\":[[\"markdown\",{\"markdown\":\"    #include <iostream>\\n\\n    int main()\\n    {\\n        int arr[10] = { 0 };\\n\\n        std::cout << \\\"arr\\\\t\\\" << arr << std::endl;\\n        std::cout << \\\"&arr[0]\\\\t\\\" << &arr[0] << std::endl;\\n        std::cout << \\\"&arr\\\\t\\\" << &arr << std::endl;\\n    }\"}],[\"markdown\",{\"markdown\":\"    >arr     006FFC80\\n    >&arr[0] 006FFC80\\n    >&arr    006FFC80\"}],[\"markdown\",{\"markdown\":\"    #include <iostream>\\n\\n    int main()\\n    {\\n        int arr[10] = { 0 };\\n\\n        std::cout << \\\"arr\\\\t\\\" << arr << std::endl;\\n        std::cout << \\\"&arr[0]\\\\t\\\" << &arr[0] << std::endl;\\n        std::cout << \\\"&arr\\\\t\\\" << &arr << std::endl;\\n\\n        int* p = arr;\\n        std::cout << \\\"p\\\\t\\\" << p << std::endl;\\n        std::cout << \\\"&p[0]\\\\t\\\" << &p[0] << std::endl;\\n        std::cout << \\\"&p\\\\t\\\" << &p << std::endl;\\n    }\"}],[\"markdown\",{\"markdown\":\"    >p       006FFC80\\n    >&p[0]   006FFC80\\n    >&p      006FFC74\"}]],\"markups\":[],\"sections\":[[1,\"p\",[[0,[],0,\"首先宣告名稱為arr大小為10的int陣列，接著分別輸出arr、&arr[0]和&arr\"]]],[10,0],[10,1],[1,\"p\",[[0,[],0,\"我們可以看到直接輸出陣列變數時會出現陣列中第一個元素的位址\"]]],[1,\"p\",[[0,[],0,\"輸出&arr[0]也會出現陣列中第一個元素的位址，其中arr[0]代表第零個元素，而將&加在前面則代表取得其位址，也就是arr[0]的位址\"]]],[1,\"p\",[[0,[],0,\"2而&arr代表輸出arr變數位址，其位址就是第零個元素的位址，也就等於arr[0]的位址，所以輸出的結果會與前兩個相同\"]]],[1,\"p\",[]],[1,\"p\",[[0,[],0,\"這時我們宣告一個名稱為p的int指標，將arr的位址指派給它，並分別輸出p、&p[0]和&p\"]]],[10,2],[10,3],[1,\"p\",[[0,[],0,\"這時p指標中儲存的是arr的位址，所以輸出的自然也就和arr的位址相同\"]]],[1,\"p\",[[0,[],0,\"&p[0]指的是p[0]這個元素的位址，因為p指標是指向arr陣列的，所以當存取p[0]時會去尋找arr[0]，而自然其位址也就會等於arr[0]的位址\"]]],[1,\"p\",[[0,[],0,\"比較特別的是&p，&p代表取得p的位址，而因為p是指標，我們是取得p的位址，所以和arr的位址就不會是同一個了\"]]]],\"ghostVersion\":\"3.0\"}","lexical":null,"html":"<p>首先宣告名稱為arr大小為10的int陣列，接著分別輸出arr、&amp;arr[0]和&amp;arr</p><!--kg-card-begin: markdown--><pre><code>#include &lt;iostream&gt;\n\nint main()\n{\n    int arr[10] = { 0 };\n\n    std::cout &lt;&lt; &quot;arr\\t&quot; &lt;&lt; arr &lt;&lt; std::endl;\n    std::cout &lt;&lt; &quot;&amp;arr[0]\\t&quot; &lt;&lt; &amp;arr[0] &lt;&lt; std::endl;\n    std::cout &lt;&lt; &quot;&amp;arr\\t&quot; &lt;&lt; &amp;arr &lt;&lt; std::endl;\n}\n</code></pre>\n<!--kg-card-end: markdown--><!--kg-card-begin: markdown--><pre><code>&gt;arr     006FFC80\n&gt;&amp;arr[0] 006FFC80\n&gt;&amp;arr    006FFC80\n</code></pre>\n<!--kg-card-end: markdown--><p>我們可以看到直接輸出陣列變數時會出現陣列中第一個元素的位址</p><p>輸出&amp;arr[0]也會出現陣列中第一個元素的位址，其中arr[0]代表第零個元素，而將&amp;加在前面則代表取得其位址，也就是arr[0]的位址</p><p>2而&amp;arr代表輸出arr變數位址，其位址就是第零個元素的位址，也就等於arr[0]的位址，所以輸出的結果會與前兩個相同</p><p></p><p>這時我們宣告一個名稱為p的int指標，將arr的位址指派給它，並分別輸出p、&amp;p[0]和&amp;p</p><!--kg-card-begin: markdown--><pre><code>#include &lt;iostream&gt;\n\nint main()\n{\n    int arr[10] = { 0 };\n\n    std::cout &lt;&lt; &quot;arr\\t&quot; &lt;&lt; arr &lt;&lt; std::endl;\n    std::cout &lt;&lt; &quot;&amp;arr[0]\\t&quot; &lt;&lt; &amp;arr[0] &lt;&lt; std::endl;\n    std::cout &lt;&lt; &quot;&amp;arr\\t&quot; &lt;&lt; &amp;arr &lt;&lt; std::endl;\n\n    int* p = arr;\n    std::cout &lt;&lt; &quot;p\\t&quot; &lt;&lt; p &lt;&lt; std::endl;\n    std::cout &lt;&lt; &quot;&amp;p[0]\\t&quot; &lt;&lt; &amp;p[0] &lt;&lt; std::endl;\n    std::cout &lt;&lt; &quot;&amp;p\\t&quot; &lt;&lt; &amp;p &lt;&lt; std::endl;\n}\n</code></pre>\n<!--kg-card-end: markdown--><!--kg-card-begin: markdown--><pre><code>&gt;p       006FFC80\n&gt;&amp;p[0]   006FFC80\n&gt;&amp;p      006FFC74\n</code></pre>\n<!--kg-card-end: markdown--><p>這時p指標中儲存的是arr的位址，所以輸出的自然也就和arr的位址相同</p><p>&amp;p[0]指的是p[0]這個元素的位址，因為p指標是指向arr陣列的，所以當存取p[0]時會去尋找arr[0]，而自然其位址也就會等於arr[0]的位址</p><p>比較特別的是&amp;p，&amp;p代表取得p的位址，而因為p是指標，我們是取得p的位址，所以和arr的位址就不會是同一個了</p>","comment_id":"5e71c4046286de0ce0c06f09","plaintext":"首先宣告名稱為arr大小為10的int陣列，接著分別輸出arr、&arr[0]和&arr\n\n#include <iostream>\n\nint main()\n{\n    int arr[10] = { 0 };\n\n    std::cout << \"arr\\t\" << arr << std::endl;\n    std::cout << \"&arr[0]\\t\" << &arr[0] << std::endl;\n    std::cout << \"&arr\\t\" << &arr << std::endl;\n}\n\n\n\n>arr     006FFC80\n>&arr[0] 006FFC80\n>&arr    006FFC80\n\n\n\n我們可以看到直接輸出陣列變數時會出現陣列中第一個元素的位址\n\n輸出&arr[0]也會出現陣列中第一個元素的位址，其中arr[0]代表第零個元素，而將&加在前面則代表取得其位址，也就是arr[0]的位址\n\n2而&arr代表輸出arr變數位址，其位址就是第零個元素的位址，也就等於arr[0]的位址，所以輸出的結果會與前兩個相同\n\n\n\n這時我們宣告一個名稱為p的int指標，將arr的位址指派給它，並分別輸出p、&p[0]和&p\n\n#include <iostream>\n\nint main()\n{\n    int arr[10] = { 0 };\n\n    std::cout << \"arr\\t\" << arr << std::endl;\n    std::cout << \"&arr[0]\\t\" << &arr[0] << std::endl;\n    std::cout << \"&arr\\t\" << &arr << std::endl;\n\n    int* p = arr;\n    std::cout << \"p\\t\" << p << std::endl;\n    std::cout << \"&p[0]\\t\" << &p[0] << std::endl;\n    std::cout << \"&p\\t\" << &p << std::endl;\n}\n\n\n\n>p       006FFC80\n>&p[0]   006FFC80\n>&p      006FFC74\n\n\n\n這時p指標中儲存的是arr的位址，所以輸出的自然也就和arr的位址相同\n\n&p[0]指的是p[0]這個元素的位址，因為p指標是指向arr陣列的，所以當存取p[0]時會去尋找arr[0]，而自然其位址也就會等於arr[0]的位址\n\n比較特別的是&p，&p代表取得p的位址，而因為p是指標，我們是取得p的位址，所以和arr的位址就不會是同一個了","feature_image":"__GHOST_URL__/content/images/2020/03/C--.jpg","featured":0,"type":"post","status":"published","locale":null,"visibility":"public","email_recipient_filter":"none","created_at":"2020-03-18 06:47:32","created_by":"1","updated_at":"2020-10-27 18:27:47","updated_by":null,"published_at":"2020-03-18 07:43:05","published_by":"1","custom_excerpt":"C++陣列與指標的位址","codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null,"newsletter_id":null},{"id":"635a816a57207246b927a8ab","uuid":"c05edb98-dc0c-4ab0-be0e-9ebcd4441e6b","title":"[GolangPackage]指定golang執行檔檔案屬性","slug":"golang-package-goversioninfo","mobiledoc":"{\"version\":\"0.3.1\",\"atoms\":[[\"soft-return\",\"\",{}],[\"soft-return\",\"\",{}],[\"soft-return\",\"\",{}]],\"cards\":[[\"hr\",{\"_config\":{\"url\":\"http://localhost:2368/\",\"adminUrl\":null,\"apiVersions\":{\"all\":[\"v2\",\"v3\",\"canary\"],\"canary\":{\"admin\":\"canary/admin\",\"content\":\"canary/content\",\"members\":\"canary/members\"},\"v3\":{\"admin\":\"v3/admin\",\"content\":\"v3/content\",\"members\":\"v3/members\"},\"v2\":{\"admin\":\"v2/admin\",\"content\":\"v2/content\"}},\"slugs\":[\"ghost\",\"rss\",\"amp\"],\"redirectCacheMaxAge\":31536000,\"baseApiPath\":\"/ghost/api\",\"defaultApiVersion\":\"v3\",\"defaultApiType\":\"content\",\"staticImageUrlPrefix\":\"content/images\",\"cardTransformers\":[{\"name\":\"card-markdown\",\"type\":\"dom\"},{\"name\":\"code\",\"type\":\"dom\"},{\"name\":\"embed\",\"type\":\"dom\"},{\"name\":\"bookmark\",\"type\":\"dom\"},{\"name\":\"hr\",\"type\":\"dom\"},{\"name\":\"html\",\"type\":\"dom\"},{\"name\":\"image\",\"type\":\"dom\"},{\"name\":\"markdown\",\"type\":\"dom\"},{\"name\":\"gallery\",\"type\":\"dom\"}]},\"_defaultApiPathOptions\":{\"baseApiPath\":\"/ghost/api\",\"version\":\"v3\",\"type\":\"content\",\"apiVersions\":{\"all\":[\"v2\",\"v3\",\"canary\"],\"canary\":{\"admin\":\"canary/admin\",\"content\":\"canary/content\",\"members\":\"canary/members\"},\"v3\":{\"admin\":\"v3/admin\",\"content\":\"v3/content\",\"members\":\"v3/members\"},\"v2\":{\"admin\":\"v2/admin\",\"content\":\"v2/content\"}}}}],[\"markdown\",{\"markdown\":\"    go get github.com/josephspurrier/goversioninfo/cmd/goversioninfo\"}],[\"markdown\",{\"markdown\":\"    go build -o bin/goversioninfo.exe github.com/josephspurrier/goversioninfo/cmd/goversioninfo\"}],[\"hr\",{\"_config\":{\"url\":\"http://localhost:2368/\",\"adminUrl\":null,\"apiVersions\":{\"all\":[\"v2\",\"v3\",\"canary\"],\"canary\":{\"admin\":\"canary/admin\",\"content\":\"canary/content\",\"members\":\"canary/members\"},\"v3\":{\"admin\":\"v3/admin\",\"content\":\"v3/content\",\"members\":\"v3/members\"},\"v2\":{\"admin\":\"v2/admin\",\"content\":\"v2/content\"}},\"slugs\":[\"ghost\",\"rss\",\"amp\"],\"redirectCacheMaxAge\":31536000,\"baseApiPath\":\"/ghost/api\",\"defaultApiVersion\":\"v3\",\"defaultApiType\":\"content\",\"staticImageUrlPrefix\":\"content/images\",\"cardTransformers\":[{\"name\":\"card-markdown\",\"type\":\"dom\"},{\"name\":\"code\",\"type\":\"dom\"},{\"name\":\"embed\",\"type\":\"dom\"},{\"name\":\"bookmark\",\"type\":\"dom\"},{\"name\":\"hr\",\"type\":\"dom\"},{\"name\":\"html\",\"type\":\"dom\"},{\"name\":\"image\",\"type\":\"dom\"},{\"name\":\"markdown\",\"type\":\"dom\"},{\"name\":\"gallery\",\"type\":\"dom\"}]},\"_defaultApiPathOptions\":{\"baseApiPath\":\"/ghost/api\",\"version\":\"v3\",\"type\":\"content\",\"apiVersions\":{\"all\":[\"v2\",\"v3\",\"canary\"],\"canary\":{\"admin\":\"canary/admin\",\"content\":\"canary/content\",\"members\":\"canary/members\"},\"v3\":{\"admin\":\"v3/admin\",\"content\":\"v3/content\",\"members\":\"v3/members\"},\"v2\":{\"admin\":\"v2/admin\",\"content\":\"v2/content\"}}}}],[\"markdown\",{\"markdown\":\"    //go:generate goversioninfo\\n\\n    package main\\n\\n    import \\\"fmt\\\"\\n\\n    func main() {\\n        fmt.Println(\\\"Hello world\\\")\\n    }\\n\"}],[\"image\",{\"src\":\"__GHOST_URL__/content/images/2020/05/---2020-05-22-012503.png\"}],[\"markdown\",{\"markdown\":\"    {\\n        \\\"FixedFileInfo\\\": {\\n            \\\"FileVersion\\\": {\\n                \\\"Major\\\": 1,\\n                \\\"Minor\\\": 0,\\n                \\\"Patch\\\": 0,\\n                \\\"Build\\\": 0\\n            },\\n            \\\"ProductVersion\\\": {\\n                \\\"Major\\\": 1,\\n                \\\"Minor\\\": 0,\\n                \\\"Patch\\\": 0,\\n                \\\"Build\\\": 0\\n            },\\n            \\\"FileFlagsMask\\\": \\\"3f\\\",\\n            \\\"FileFlags \\\": \\\"00\\\",\\n            \\\"FileOS\\\": \\\"040004\\\",\\n            \\\"FileType\\\": \\\"01\\\",\\n            \\\"FileSubType\\\": \\\"00\\\"\\n        },\\n        \\\"StringFileInfo\\\": {\\n            \\\"Comments\\\": \\\"Test file.\\\",\\n            \\\"CompanyName\\\": \\\"josephspurrier\\\",\\n            \\\"FileDescription\\\": \\\"This is a hello world file.\\\",\\n            \\\"FileVersion\\\": \\\"v1.0.0.0\\\",\\n            \\\"InternalName\\\": \\\"goversioninfo.exe\\\",\\n            \\\"LegalCopyright\\\": \\\"Copyright (c) 2019 Joseph Spurrier\\\",\\n            \\\"LegalTrademarks\\\": \\\"\\\",\\n            \\\"OriginalFilename\\\": \\\"main.go\\\",\\n            \\\"PrivateBuild\\\": \\\"\\\",\\n            \\\"ProductName\\\": \\\"goversioninfo\\\",\\n            \\\"ProductVersion\\\": \\\"v1.0.0.0\\\",\\n            \\\"SpecialBuild\\\": \\\"\\\"\\n        },\\n        \\\"VarFileInfo\\\": {\\n            \\\"Translation\\\": {\\n                \\\"LangID\\\": \\\"0409\\\",\\n                \\\"CharsetID\\\": \\\"04B0\\\"\\n            }\\n        },\\n        \\\"IconPath\\\": \\\"resource/icon.ico\\\",\\n        \\\"ManifestPath\\\": \\\"resource/goversioninfo.exe.manifest\\\"\\n    }\"}],[\"markdown\",{\"markdown\":\"    go generate\\n    go generate your\\\\package\\\\route\"}],[\"image\",{\"src\":\"__GHOST_URL__/content/images/2020/05/---2020-05-22-013035.png\"}],[\"markdown\",{\"markdown\":\"    go build\\n    go build -o output\\\\route your\\\\package\\\\route\"}],[\"image\",{\"src\":\"__GHOST_URL__/content/images/2020/05/---2020-05-22-013343.png\"}]],\"markups\":[],\"sections\":[[1,\"p\",[[0,[],0,\"GoVersionInfo package可在生成執行檔時指定執行檔縮圖及檔案屬性，檔案描述、檔案類型、版本等參數皆可指定\"]]],[10,0],[1,\"h2\",[[0,[],0,\"安裝\"],[1,[],0,0]]],[1,\"h3\",[[0,[],0,\"使用指令安裝package\"]]],[10,1],[1,\"h3\",[[0,[],0,\"產生可執行檔\"]]],[1,\"p\",[[0,[],0,\"-0 bin/goversioninfo.exe代表要將產生出來的可執行檔放在bin目錄裡，並將檔名命名為goversioninfo.exe\"],[1,[],0,1],[0,[],0,\"空一格後面接github.com/josephspurrier/goversioninfo/cmd/goversioninfo代表要以這個package為目標產生可執行檔\"]]],[10,2],[10,3],[1,\"h2\",[[0,[],0,\"設定\"],[1,[],0,2]]],[1,\"h3\",[[0,[],0,\"設定go generate註釋\"]]],[1,\"p\",[[0,[],0,\"將//go:generate goversioninfo加入到程式碼的最頂端，往後在執行go generate命令時才能夠被搜尋到\"]]],[10,4],[1,\"h3\",[[0,[],0,\"設定versioninfo.json檔案\"]]],[1,\"p\",[[0,[],0,\"在github.com\\\\josephspurrier\\\\goversioninfo\\\\testdata\\\\resource內有一個檔名為versioninfo的json檔，將其複製並放置於要產生執行檔的程式碼的目錄中\"]]],[1,\"p\",[[0,[],0,\"resource資料夾內有icon和goversioninfo.exe.manifest兩個檔案，等等在設定versioninfo時會用到\"]]],[10,5],[1,\"h3\",[[0,[],0,\"指定versioninfo.json檔案參數\"]]],[1,\"p\",[[0,[],0,\"將IconPath和ManifestPath的路徑指定為可執行檔圖示的路徑和Manifest檔案的路徑\"]]],[10,6],[1,\"h3\",[[0,[],0,\"產生syso檔\"]]],[1,\"p\",[[0,[],0,\"輸入go generate指令產生resource.syso檔案，若不在同個目錄內可指定package路徑，例如主程式在D:\\\\Project\\\\Go\\\\src\\\\goinfotest，若當前位置在目錄內直接下go generate即可，若不在目錄內則要輸入go generate+從src目錄後開始算的package路徑(go generate goinfotest)產生syso檔\"]]],[10,7],[10,8],[1,\"h3\",[[0,[],0,\"產生可執行檔\"]]],[1,\"p\",[[0,[],0,\"使用go build產生可執行檔，亦可使用\\\"go build -o 目的路徑與檔名 +package路徑\\\"產生可執行檔\"]]],[10,9],[10,10],[1,\"p\",[]]],\"ghostVersion\":\"3.0\"}","lexical":null,"html":"<p>GoVersionInfo package可在生成執行檔時指定執行檔縮圖及檔案屬性，檔案描述、檔案類型、版本等參數皆可指定</p><hr><h2 id=\"-\">安裝<br></h2><h3 id=\"-package\">使用指令安裝package</h3><!--kg-card-begin: markdown--><pre><code>go get github.com/josephspurrier/goversioninfo/cmd/goversioninfo\n</code></pre>\n<!--kg-card-end: markdown--><h3 id=\"--1\">產生可執行檔</h3><p>-0 bin/goversioninfo.exe代表要將產生出來的可執行檔放在bin目錄裡，並將檔名命名為goversioninfo.exe<br>空一格後面接github.com/josephspurrier/goversioninfo/cmd/goversioninfo代表要以這個package為目標產生可執行檔</p><!--kg-card-begin: markdown--><pre><code>go build -o bin/goversioninfo.exe github.com/josephspurrier/goversioninfo/cmd/goversioninfo\n</code></pre>\n<!--kg-card-end: markdown--><hr><h2 id=\"--2\">設定<br></h2><h3 id=\"-go-generate-\">設定go generate註釋</h3><p>將//go:generate goversioninfo加入到程式碼的最頂端，往後在執行go generate命令時才能夠被搜尋到</p><!--kg-card-begin: markdown--><pre><code>//go:generate goversioninfo\n\npackage main\n\nimport &quot;fmt&quot;\n\nfunc main() {\n    fmt.Println(&quot;Hello world&quot;)\n}\n</code></pre>\n<!--kg-card-end: markdown--><h3 id=\"-versioninfo-json-\">設定versioninfo.json檔案</h3><p>在github.com\\josephspurrier\\goversioninfo\\testdata\\resource內有一個檔名為versioninfo的json檔，將其複製並放置於要產生執行檔的程式碼的目錄中</p><p>resource資料夾內有icon和goversioninfo.exe.manifest兩個檔案，等等在設定versioninfo時會用到</p><figure class=\"kg-card kg-image-card\"><img src=\"__GHOST_URL__/content/images/2020/05/---2020-05-22-012503.png\" class=\"kg-image\" alt loading=\"lazy\"></figure><h3 id=\"-versioninfo-json--1\">指定versioninfo.json檔案參數</h3><p>將IconPath和ManifestPath的路徑指定為可執行檔圖示的路徑和Manifest檔案的路徑</p><!--kg-card-begin: markdown--><pre><code>{\n    &quot;FixedFileInfo&quot;: {\n        &quot;FileVersion&quot;: {\n            &quot;Major&quot;: 1,\n            &quot;Minor&quot;: 0,\n            &quot;Patch&quot;: 0,\n            &quot;Build&quot;: 0\n        },\n        &quot;ProductVersion&quot;: {\n            &quot;Major&quot;: 1,\n            &quot;Minor&quot;: 0,\n            &quot;Patch&quot;: 0,\n            &quot;Build&quot;: 0\n        },\n        &quot;FileFlagsMask&quot;: &quot;3f&quot;,\n        &quot;FileFlags &quot;: &quot;00&quot;,\n        &quot;FileOS&quot;: &quot;040004&quot;,\n        &quot;FileType&quot;: &quot;01&quot;,\n        &quot;FileSubType&quot;: &quot;00&quot;\n    },\n    &quot;StringFileInfo&quot;: {\n        &quot;Comments&quot;: &quot;Test file.&quot;,\n        &quot;CompanyName&quot;: &quot;josephspurrier&quot;,\n        &quot;FileDescription&quot;: &quot;This is a hello world file.&quot;,\n        &quot;FileVersion&quot;: &quot;v1.0.0.0&quot;,\n        &quot;InternalName&quot;: &quot;goversioninfo.exe&quot;,\n        &quot;LegalCopyright&quot;: &quot;Copyright (c) 2019 Joseph Spurrier&quot;,\n        &quot;LegalTrademarks&quot;: &quot;&quot;,\n        &quot;OriginalFilename&quot;: &quot;main.go&quot;,\n        &quot;PrivateBuild&quot;: &quot;&quot;,\n        &quot;ProductName&quot;: &quot;goversioninfo&quot;,\n        &quot;ProductVersion&quot;: &quot;v1.0.0.0&quot;,\n        &quot;SpecialBuild&quot;: &quot;&quot;\n    },\n    &quot;VarFileInfo&quot;: {\n        &quot;Translation&quot;: {\n            &quot;LangID&quot;: &quot;0409&quot;,\n            &quot;CharsetID&quot;: &quot;04B0&quot;\n        }\n    },\n    &quot;IconPath&quot;: &quot;resource/icon.ico&quot;,\n    &quot;ManifestPath&quot;: &quot;resource/goversioninfo.exe.manifest&quot;\n}\n</code></pre>\n<!--kg-card-end: markdown--><h3 id=\"-syso-\">產生syso檔</h3><p>輸入go generate指令產生resource.syso檔案，若不在同個目錄內可指定package路徑，例如主程式在D:\\Project\\Go\\src\\goinfotest，若當前位置在目錄內直接下go generate即可，若不在目錄內則要輸入go generate+從src目錄後開始算的package路徑(go generate goinfotest)產生syso檔</p><!--kg-card-begin: markdown--><pre><code>go generate\ngo generate your\\package\\route\n</code></pre>\n<!--kg-card-end: markdown--><figure class=\"kg-card kg-image-card\"><img src=\"__GHOST_URL__/content/images/2020/05/---2020-05-22-013035.png\" class=\"kg-image\" alt loading=\"lazy\"></figure><h3 id=\"--3\">產生可執行檔</h3><p>使用go build產生可執行檔，亦可使用\"go build -o 目的路徑與檔名 +package路徑\"產生可執行檔</p><!--kg-card-begin: markdown--><pre><code>go build\ngo build -o output\\route your\\package\\route\n</code></pre>\n<!--kg-card-end: markdown--><figure class=\"kg-card kg-image-card\"><img src=\"__GHOST_URL__/content/images/2020/05/---2020-05-22-013343.png\" class=\"kg-image\" alt loading=\"lazy\"></figure>","comment_id":"5ec6a6b6986e6527cc1d24c9","plaintext":"GoVersionInfo package可在生成執行檔時指定執行檔縮圖及檔案屬性，檔案描述、檔案類型、版本等參數皆可指定\n\n\n安裝\n\n\n\n使用指令安裝package\n\ngo get github.com/josephspurrier/goversioninfo/cmd/goversioninfo\n\n\n\n\n產生可執行檔\n\n-0 bin/goversioninfo.exe代表要將產生出來的可執行檔放在bin目錄裡，並將檔名命名為goversioninfo.exe\n空一格後面接github.com/josephspurrier/goversioninfo/cmd/goversioninfo代表要以這個package為目標產生可執行檔\n\ngo build -o bin/goversioninfo.exe github.com/josephspurrier/goversioninfo/cmd/goversioninfo\n\n\n\n\n設定\n\n\n\n設定go generate註釋\n\n將//go:generate goversioninfo加入到程式碼的最頂端，往後在執行go generate命令時才能夠被搜尋到\n\n//go:generate goversioninfo\n\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n    fmt.Println(\"Hello world\")\n}\n\n\n\n\n設定versioninfo.json檔案\n\n在github.com\\josephspurrier\\goversioninfo\\testdata\\resource內有一個檔名為versioninfo的json檔，將其複製並放置於要產生執行檔的程式碼的目錄中\n\nresource資料夾內有icon和goversioninfo.exe.manifest兩個檔案，等等在設定versioninfo時會用到\n\n\n指定versioninfo.json檔案參數\n\n將IconPath和ManifestPath的路徑指定為可執行檔圖示的路徑和Manifest檔案的路徑\n\n{\n    \"FixedFileInfo\": {\n        \"FileVersion\": {\n            \"Major\": 1,\n            \"Minor\": 0,\n            \"Patch\": 0,\n            \"Build\": 0\n        },\n        \"ProductVersion\": {\n            \"Major\": 1,\n            \"Minor\": 0,\n            \"Patch\": 0,\n            \"Build\": 0\n        },\n        \"FileFlagsMask\": \"3f\",\n        \"FileFlags \": \"00\",\n        \"FileOS\": \"040004\",\n        \"FileType\": \"01\",\n        \"FileSubType\": \"00\"\n    },\n    \"StringFileInfo\": {\n        \"Comments\": \"Test file.\",\n        \"CompanyName\": \"josephspurrier\",\n        \"FileDescription\": \"This is a hello world file.\",\n        \"FileVersion\": \"v1.0.0.0\",\n        \"InternalName\": \"goversioninfo.exe\",\n        \"LegalCopyright\": \"Copyright (c) 2019 Joseph Spurrier\",\n        \"LegalTrademarks\": \"\",\n        \"OriginalFilename\": \"main.go\",\n        \"PrivateBuild\": \"\",\n        \"ProductName\": \"goversioninfo\",\n        \"ProductVersion\": \"v1.0.0.0\",\n        \"SpecialBuild\": \"\"\n    },\n    \"VarFileInfo\": {\n        \"Translation\": {\n            \"LangID\": \"0409\",\n            \"CharsetID\": \"04B0\"\n        }\n    },\n    \"IconPath\": \"resource/icon.ico\",\n    \"ManifestPath\": \"resource/goversioninfo.exe.manifest\"\n}\n\n\n\n\n產生syso檔\n\n輸入go generate指令產生resource.syso檔案，若不在同個目錄內可指定package路徑，例如主程式在D:\\Project\\Go\\src\\goinfotest，若當前位置在目錄內直接下go generate即可，若不在目錄內則要輸入go generate+從src目錄後開始算的package路徑(go generate goinfotest)產生syso檔\n\ngo generate\ngo generate your\\package\\route\n\n\n\n\n產生可執行檔\n\n使用go build產生可執行檔，亦可使用\"go build -o 目的路徑與檔名 +package路徑\"產生可執行檔\n\ngo build\ngo build -o output\\route your\\package\\route\n\n","feature_image":"__GHOST_URL__/content/images/2020/05/golang-long.jpeg","featured":0,"type":"post","status":"published","locale":null,"visibility":"public","email_recipient_filter":"none","created_at":"2020-05-21 16:05:10","created_by":"1","updated_at":"2020-10-27 18:27:11","updated_by":null,"published_at":"2020-05-21 17:34:18","published_by":"1","custom_excerpt":"GoVersionInfo package可在生成執行檔時指定執行檔縮圖及檔案屬性，檔案描述、檔案類型、版本等參數皆可指定","codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null,"newsletter_id":null},{"id":"635a816a57207246b927a8ac","uuid":"462ec3bb-7ce2-4e7d-85bf-20ab1d4e9f4c","title":"[Design Pattern]Flyweight Pattern","slug":"design-pattern-flyweight-pattern","mobiledoc":"{\"version\":\"0.3.1\",\"atoms\":[[\"soft-return\",\"\",{}],[\"soft-return\",\"\",{}],[\"soft-return\",\"\",{}],[\"soft-return\",\"\",{}],[\"soft-return\",\"\",{}]],\"cards\":[[\"image\",{\"src\":\"__GHOST_URL__/content/images/2020/05/---2020-05-24-190630.png\"}],[\"hr\",{\"_config\":{\"url\":\"http://localhost:2368/\",\"adminUrl\":null,\"apiVersions\":{\"all\":[\"v2\",\"v3\",\"canary\"],\"canary\":{\"admin\":\"canary/admin\",\"content\":\"canary/content\",\"members\":\"canary/members\"},\"v3\":{\"admin\":\"v3/admin\",\"content\":\"v3/content\",\"members\":\"v3/members\"},\"v2\":{\"admin\":\"v2/admin\",\"content\":\"v2/content\"}},\"slugs\":[\"ghost\",\"rss\",\"amp\"],\"redirectCacheMaxAge\":31536000,\"baseApiPath\":\"/ghost/api\",\"defaultApiVersion\":\"v3\",\"defaultApiType\":\"content\",\"staticImageUrlPrefix\":\"content/images\",\"cardTransformers\":[{\"name\":\"card-markdown\",\"type\":\"dom\"},{\"name\":\"code\",\"type\":\"dom\"},{\"name\":\"embed\",\"type\":\"dom\"},{\"name\":\"bookmark\",\"type\":\"dom\"},{\"name\":\"hr\",\"type\":\"dom\"},{\"name\":\"html\",\"type\":\"dom\"},{\"name\":\"image\",\"type\":\"dom\"},{\"name\":\"markdown\",\"type\":\"dom\"},{\"name\":\"gallery\",\"type\":\"dom\"}]},\"_defaultApiPathOptions\":{\"baseApiPath\":\"/ghost/api\",\"version\":\"v3\",\"type\":\"content\",\"apiVersions\":{\"all\":[\"v2\",\"v3\",\"canary\"],\"canary\":{\"admin\":\"canary/admin\",\"content\":\"canary/content\",\"members\":\"canary/members\"},\"v3\":{\"admin\":\"v3/admin\",\"content\":\"v3/content\",\"members\":\"v3/members\"},\"v2\":{\"admin\":\"v2/admin\",\"content\":\"v2/content\"}}}}]],\"markups\":[],\"sections\":[[1,\"p\",[]],[1,\"h2\",[[0,[],0,\"結構\"]]],[10,0],[1,\"h3\",[[0,[],0,\"Flyweight(負責制定Flyweight介面)\"],[1,[],0,0]]],[1,\"h3\",[[0,[],0,\"ConcreteFlyweight(負責儲存Intrinsic state)\"]]],[1,\"p\",[[0,[],0,\"實際的Flyweight類別\"]]],[1,\"h3\",[[0,[],0,\"UnsharedConcreteFlyweight(不共享的Flyweight子類別)\"],[1,[],0,1]]],[1,\"h3\",[[0,[],0,\"FlyweightFactory(負責建立與儲存Flyweight物件)\"]]],[1,\"p\",[[0,[],0,\"FlyweightFactory會判斷Client要求的物件是否存在\"],[1,[],0,2],[0,[],0,\"若存在則返回給Client\"],[1,[],0,3],[0,[],0,\"若不存在則建立一個Flyweight物件、儲存物件並返回給Client\"]]],[1,\"h3\",[[0,[],0,\"Client(負責使用Flyweight)\"]]],[1,\"p\",[[0,[],0,\"對Extrinsic state進行儲存或運算\"],[1,[],0,4],[0,[],0,\"必須透過FlyweightFactory對ConcreteFlyweight進行存取，以確保Flyweight物件的單一性\"]]],[10,1],[1,\"p\",[[0,[],0,\"The state stored inside a flyweight is called “intrinsic.” The state passed to the flyweight’s methods is called “extrinsic.”\"]]]],\"ghostVersion\":\"3.0\"}","lexical":null,"html":"<p></p><h2 id=\"-\">結構</h2><figure class=\"kg-card kg-image-card\"><img src=\"__GHOST_URL__/content/images/2020/05/---2020-05-24-190630.png\" class=\"kg-image\" alt loading=\"lazy\"></figure><h3 id=\"flyweight-flyweight-\">Flyweight(負責制定Flyweight介面)<br></h3><h3 id=\"concreteflyweight-intrinsic-state-\">ConcreteFlyweight(負責儲存Intrinsic state)</h3><p>實際的Flyweight類別</p><h3 id=\"unsharedconcreteflyweight-flyweight-\">UnsharedConcreteFlyweight(不共享的Flyweight子類別)<br></h3><h3 id=\"flyweightfactory-flyweight-\">FlyweightFactory(負責建立與儲存Flyweight物件)</h3><p>FlyweightFactory會判斷Client要求的物件是否存在<br>若存在則返回給Client<br>若不存在則建立一個Flyweight物件、儲存物件並返回給Client</p><h3 id=\"client-flyweight-\">Client(負責使用Flyweight)</h3><p>對Extrinsic state進行儲存或運算<br>必須透過FlyweightFactory對ConcreteFlyweight進行存取，以確保Flyweight物件的單一性</p><hr><p>The state stored inside a flyweight is called “intrinsic.” The state passed to the flyweight’s methods is called “extrinsic.”</p>","comment_id":"5eca1ef467a22515d40ba7c8","plaintext":"結構\n\n\nFlyweight(負責制定Flyweight介面)\n\n\n\nConcreteFlyweight(負責儲存Intrinsic state)\n\n實際的Flyweight類別\n\n\nUnsharedConcreteFlyweight(不共享的Flyweight子類別)\n\n\n\nFlyweightFactory(負責建立與儲存Flyweight物件)\n\nFlyweightFactory會判斷Client要求的物件是否存在\n若存在則返回給Client\n若不存在則建立一個Flyweight物件、儲存物件並返回給Client\n\n\nClient(負責使用Flyweight)\n\n對Extrinsic state進行儲存或運算\n必須透過FlyweightFactory對ConcreteFlyweight進行存取，以確保Flyweight物件的單一性\n\nThe state stored inside a flyweight is called “intrinsic.” The state passed to the flyweight’s methods is called “extrinsic.”","feature_image":null,"featured":0,"type":"post","status":"draft","locale":null,"visibility":"public","email_recipient_filter":"all","created_at":"2020-05-24 07:15:00","created_by":"1","updated_at":"2020-05-25 10:58:55","updated_by":null,"published_at":null,"published_by":null,"custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null,"newsletter_id":null},{"id":"635a816a57207246b927a8ad","uuid":"eda32301-fa9b-449e-a33b-6ad960e7617c","title":"[Qt]Qt的鍵盤與滑鼠點擊事件","slug":"qt-key-mouse-press-event","mobiledoc":"{\"version\":\"0.3.1\",\"atoms\":[[\"soft-return\",\"\",{}]],\"cards\":[[\"hr\",{\"_config\":{\"url\":\"http://localhost:2368/\",\"adminUrl\":null,\"apiVersions\":{\"all\":[\"v2\",\"v3\",\"canary\"],\"canary\":{\"admin\":\"canary/admin\",\"content\":\"canary/content\",\"members\":\"canary/members\"},\"v3\":{\"admin\":\"v3/admin\",\"content\":\"v3/content\",\"members\":\"v3/members\"},\"v2\":{\"admin\":\"v2/admin\",\"content\":\"v2/content\"}},\"slugs\":[\"ghost\",\"rss\",\"amp\"],\"redirectCacheMaxAge\":31536000,\"baseApiPath\":\"/ghost/api\",\"defaultApiVersion\":\"v3\",\"defaultApiType\":\"content\",\"staticImageUrlPrefix\":\"content/images\",\"cardTransformers\":[{\"name\":\"card-markdown\",\"type\":\"dom\"},{\"name\":\"code\",\"type\":\"dom\"},{\"name\":\"embed\",\"type\":\"dom\"},{\"name\":\"bookmark\",\"type\":\"dom\"},{\"name\":\"hr\",\"type\":\"dom\"},{\"name\":\"html\",\"type\":\"dom\"},{\"name\":\"image\",\"type\":\"dom\"},{\"name\":\"markdown\",\"type\":\"dom\"},{\"name\":\"gallery\",\"type\":\"dom\"}]},\"_defaultApiPathOptions\":{\"baseApiPath\":\"/ghost/api\",\"version\":\"v3\",\"type\":\"content\",\"apiVersions\":{\"all\":[\"v2\",\"v3\",\"canary\"],\"canary\":{\"admin\":\"canary/admin\",\"content\":\"canary/content\",\"members\":\"canary/members\"},\"v3\":{\"admin\":\"v3/admin\",\"content\":\"v3/content\",\"members\":\"v3/members\"},\"v2\":{\"admin\":\"v2/admin\",\"content\":\"v2/content\"}}}}],[\"markdown\",{\"markdown\":\"    #include <QMouseEvent>\"}],[\"markdown\",{\"markdown\":\"    protected:\\n        void mousePressEvent(QMouseEvent * event);\"}],[\"markdown\",{\"markdown\":\"    void MainWindow::mousePressEvent(QMouseEvent * e)\\n    {\\n        //獲取座標\\n        qDebug() <<\\\"(\\\"<< e->x() << \\\",\\\" << e->y()<<\\\")\\\";\\n\\n        if(e->button() == Qt::LeftButton)\\n        {\\n            qDebug() << \\\"左鍵\\\" ;\\n        }\\n        else if(e->button() == Qt::RightButton)\\n        {\\n            qDebug() << \\\"右鍵\\\" ;\\n        }\\n    }\"}],[\"hr\",{\"_config\":{\"url\":\"http://localhost:2368/\",\"adminUrl\":null,\"apiVersions\":{\"all\":[\"v2\",\"v3\",\"canary\"],\"canary\":{\"admin\":\"canary/admin\",\"content\":\"canary/content\",\"members\":\"canary/members\"},\"v3\":{\"admin\":\"v3/admin\",\"content\":\"v3/content\",\"members\":\"v3/members\"},\"v2\":{\"admin\":\"v2/admin\",\"content\":\"v2/content\"}},\"slugs\":[\"ghost\",\"rss\",\"amp\"],\"redirectCacheMaxAge\":31536000,\"baseApiPath\":\"/ghost/api\",\"defaultApiVersion\":\"v3\",\"defaultApiType\":\"content\",\"staticImageUrlPrefix\":\"content/images\",\"cardTransformers\":[{\"name\":\"card-markdown\",\"type\":\"dom\"},{\"name\":\"code\",\"type\":\"dom\"},{\"name\":\"embed\",\"type\":\"dom\"},{\"name\":\"bookmark\",\"type\":\"dom\"},{\"name\":\"hr\",\"type\":\"dom\"},{\"name\":\"html\",\"type\":\"dom\"},{\"name\":\"image\",\"type\":\"dom\"},{\"name\":\"markdown\",\"type\":\"dom\"},{\"name\":\"gallery\",\"type\":\"dom\"}]},\"_defaultApiPathOptions\":{\"baseApiPath\":\"/ghost/api\",\"version\":\"v3\",\"type\":\"content\",\"apiVersions\":{\"all\":[\"v2\",\"v3\",\"canary\"],\"canary\":{\"admin\":\"canary/admin\",\"content\":\"canary/content\",\"members\":\"canary/members\"},\"v3\":{\"admin\":\"v3/admin\",\"content\":\"v3/content\",\"members\":\"v3/members\"},\"v2\":{\"admin\":\"v2/admin\",\"content\":\"v2/content\"}}}}],[\"markdown\",{\"markdown\":\"    protected:\\n        void keyPressEvent(QKeyEvent * event);\"}],[\"markdown\",{\"markdown\":\"    void MainWindow::keyPressEvent(QKeyEvent * event)\\n    {\\n        switch (event->key())\\n        {\\n            case Qt::Key_Alt:{\\n                    qDebug() << \\\"Alt\\\";\\n                break;\\n            }\\n            default:{\\n                    qDebug() << event->key();\\n                break;\\n            }\\n        }\\n    }\"}]],\"markups\":[],\"sections\":[[1,\"p\",[]],[1,\"h2\",[[0,[],0,\"環境\"]]],[1,\"p\",[[0,[],0,\"Qt 5.14.1\"],[1,[],0,0],[0,[],0,\"Qt Creator 4.11.1\"]]],[10,0],[1,\"h2\",[[0,[],0,\"滑鼠點擊事件\"]]],[1,\"p\",[[0,[],0,\"引用QMouseEvent標頭檔\"]]],[10,1],[1,\"p\",[[0,[],0,\"在protected裡定義滑鼠觸發事件\"]]],[10,2],[1,\"p\",[[0,[],0,\"新增具體觸發事件\"]]],[10,3],[1,\"p\",[[0,[],0,\"要使用qDebug()輸出時必須增加#include<QDebug>引用QDebug標頭檔\"]]],[10,4],[1,\"h2\",[[0,[],0,\"鍵盤點擊事件\"]]],[1,\"p\",[[0,[],0,\"在protected裡定義滑鼠觸發事件\"]]],[10,5],[1,\"p\",[[0,[],0,\"新增鍵盤觸發事件\"]]],[10,6],[1,\"p\",[]]],\"ghostVersion\":\"3.0\"}","lexical":null,"html":"<p></p><h2 id=\"-\">環境</h2><p>Qt 5.14.1<br>Qt Creator 4.11.1</p><hr><h2 id=\"--1\">滑鼠點擊事件</h2><p>引用QMouseEvent標頭檔</p><!--kg-card-begin: markdown--><pre><code>#include &lt;QMouseEvent&gt;\n</code></pre>\n<!--kg-card-end: markdown--><p>在protected裡定義滑鼠觸發事件</p><!--kg-card-begin: markdown--><pre><code>protected:\n    void mousePressEvent(QMouseEvent * event);\n</code></pre>\n<!--kg-card-end: markdown--><p>新增具體觸發事件</p><!--kg-card-begin: markdown--><pre><code>void MainWindow::mousePressEvent(QMouseEvent * e)\n{\n    //獲取座標\n    qDebug() &lt;&lt;&quot;(&quot;&lt;&lt; e-&gt;x() &lt;&lt; &quot;,&quot; &lt;&lt; e-&gt;y()&lt;&lt;&quot;)&quot;;\n\n    if(e-&gt;button() == Qt::LeftButton)\n    {\n        qDebug() &lt;&lt; &quot;左鍵&quot; ;\n    }\n    else if(e-&gt;button() == Qt::RightButton)\n    {\n        qDebug() &lt;&lt; &quot;右鍵&quot; ;\n    }\n}\n</code></pre>\n<!--kg-card-end: markdown--><p>要使用qDebug()輸出時必須增加#include&lt;QDebug&gt;引用QDebug標頭檔</p><hr><h2 id=\"--2\">鍵盤點擊事件</h2><p>在protected裡定義滑鼠觸發事件</p><!--kg-card-begin: markdown--><pre><code>protected:\n    void keyPressEvent(QKeyEvent * event);\n</code></pre>\n<!--kg-card-end: markdown--><p>新增鍵盤觸發事件</p><!--kg-card-begin: markdown--><pre><code>void MainWindow::keyPressEvent(QKeyEvent * event)\n{\n    switch (event-&gt;key())\n    {\n        case Qt::Key_Alt:{\n                qDebug() &lt;&lt; &quot;Alt&quot;;\n            break;\n        }\n        default:{\n                qDebug() &lt;&lt; event-&gt;key();\n            break;\n        }\n    }\n}\n</code></pre>\n<!--kg-card-end: markdown-->","comment_id":"5ee33b6118d9a726c4d13dcf","plaintext":"環境\n\nQt 5.14.1\nQt Creator 4.11.1\n\n\n滑鼠點擊事件\n\n引用QMouseEvent標頭檔\n\n#include <QMouseEvent>\n\n\n\n在protected裡定義滑鼠觸發事件\n\nprotected:\n    void mousePressEvent(QMouseEvent * event);\n\n\n\n新增具體觸發事件\n\nvoid MainWindow::mousePressEvent(QMouseEvent * e)\n{\n    //獲取座標\n    qDebug() <<\"(\"<< e->x() << \",\" << e->y()<<\")\";\n\n    if(e->button() == Qt::LeftButton)\n    {\n        qDebug() << \"左鍵\" ;\n    }\n    else if(e->button() == Qt::RightButton)\n    {\n        qDebug() << \"右鍵\" ;\n    }\n}\n\n\n\n要使用qDebug()輸出時必須增加#include<QDebug>引用QDebug標頭檔\n\n\n鍵盤點擊事件\n\n在protected裡定義滑鼠觸發事件\n\nprotected:\n    void keyPressEvent(QKeyEvent * event);\n\n\n\n新增鍵盤觸發事件\n\nvoid MainWindow::keyPressEvent(QKeyEvent * event)\n{\n    switch (event->key())\n    {\n        case Qt::Key_Alt:{\n                qDebug() << \"Alt\";\n            break;\n        }\n        default:{\n                qDebug() << event->key();\n            break;\n        }\n    }\n}\n\n","feature_image":"__GHOST_URL__/content/images/2020/06/DarkCyan.jpg","featured":0,"type":"post","status":"published","locale":null,"visibility":"public","email_recipient_filter":"none","created_at":"2020-06-12 08:22:57","created_by":"1","updated_at":"2020-10-27 18:33:15","updated_by":null,"published_at":"2020-06-12 14:29:28","published_by":"1","custom_excerpt":"Qt的鍵盤與滑鼠點擊事件","codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null,"newsletter_id":null},{"id":"635a816a57207246b927a8ae","uuid":"b17eb711-469a-4a62-bb82-e6946a3ac950","title":"[GolangPackage] 使用lnx/walk建立圖形化介面","slug":"golang-package-walk","mobiledoc":"{\"version\":\"0.3.1\",\"atoms\":[],\"cards\":[[\"markdown\",{\"markdown\":\"golang 普遍使用CLI作為使用者介面，但因為需要做一個程式給不常使用指令的人使用，所以使用lxn/walk建立圖形化使用者介面，lxn/walk可以滿足視窗的大部分需求，適用於建立一些基本的圖形化介面\\n\\n## 環境\\n- Windows 10 x64\\n- go 1.15\\n- github.com/lxn/walk v0.0.0-20200806153934-8721e9bc9ff7\\n- github.com/akavel/rsrc v0.9.0\\n\\n## 安裝\\n要將程式包裝成可執行檔需要兩個package，分別是lxn/walk和akavel/rsrc\\nlxn/walk用來建立圖形化介面\\nakavel/rsrc用來將資源嵌入可執行檔\\n使用指令安裝lxn/walk和akavel/rsrc\\n```\\ngo get github.com/lxn/walk\\ngo get github.com/akavel/rsrc\\n```\\n\\n## 結構\\n在lxn/walk下包含了declarative sub package、範例檔和各種元件的檔案\\n```\\n－github.com\\n    |－lxn\\n        |－walk\\n            |－declarative\\n            |－examples\\n            |...其他檔案\\n```\\n以examples下的action範例裡的一小段程式碼為例\\n```\\nPushButton{\\n\\tAssignTo: &toggleSpecialModePB,\\n\\tText:     \\\"Enable Special Mode\\\",\\n\\tOnClicked: func() {\\n\\t\\tisSpecialMode.SetSatisfied(!isSpecialMode.Satisfied())\\n\\n\\t\\tif isSpecialMode.Satisfied() {\\n\\t\\t\\ttoggleSpecialModePB.SetText(\\\"Disable Special Mode\\\")\\n\\t\\t} else {\\n\\t\\t\\ttoggleSpecialModePB.SetText(\\\"Enable Special Mode\\\")\\n\\t\\t}\\n\\t},\\n\\tAccessibility: Accessibility{\\n\\t\\tHelp: \\\"Toggles special mode\\\",\\n\\t},\\n},\\n```\\n很好奇PushButton裡面的這些參數到底是哪裡來的對吧\\n讓我們看看declarative目錄下的pushbutton.go檔案  \\n\\n**pushbutton.go**\\n```\\npackage declarative\\n\\nimport (\\n\\t\\\"github.com/lxn/walk\\\"\\n)\\n\\ntype PushButton struct {\\n\\t// Window\\n\\n\\tAccessibility      Accessibility\\n\\tBackground         Brush\\n\\tContextMenuItems   []MenuItem\\n\\tDoubleBuffering    bool\\n\\tEnabled            Property\\n\\tFont               Font\\n\\tMaxSize            Size\\n\\tMinSize            Size\\n\\tName               string\\n\\tOnBoundsChanged    walk.EventHandler\\n\\tOnKeyDown          walk.KeyEventHandler\\n\\tOnKeyPress         walk.KeyEventHandler\\n\\tOnKeyUp            walk.KeyEventHandler\\n\\tOnMouseDown        walk.MouseEventHandler\\n\\tOnMouseMove        walk.MouseEventHandler\\n\\tOnMouseUp          walk.MouseEventHandler\\n\\tOnSizeChanged      walk.EventHandler\\n\\tPersistent         bool\\n\\tRightToLeftReading bool\\n\\tToolTipText        Property\\n\\tVisible            Property\\n\\n\\t// Widget\\n\\n\\tAlignment          Alignment2D\\n\\tAlwaysConsumeSpace bool\\n\\tColumn             int\\n\\tColumnSpan         int\\n\\tGraphicsEffects    []walk.WidgetGraphicsEffect\\n\\tRow                int\\n\\tRowSpan            int\\n\\tStretchFactor      int\\n\\n\\t// Button\\n\\n\\tImage     Property\\n\\tOnClicked walk.EventHandler\\n\\tText      Property\\n\\n\\t// PushButton\\n\\n\\tAssignTo       **walk.PushButton\\n\\tImageAboveText bool\\n}\\n```\\n這邊清楚的定義了哪些元件可以用哪些參數，只要照著結構裡定義的屬性名稱和型別給予對應的數值就可以了\\n\\n## 建置與執行\\n\\n要執行圖形化介面無法直接使用go run執行\\n必須在相同目錄下新增.manifest檔案並使用go build建置產生可執行檔\\n再啟動可執行檔執行\\n我們使用examples下的clipboard作為範例  \\n\\n**clipboard.go**\\n```\\n// Copyright 2013 The Walk Authors. All rights reserved.\\n// Use of this source code is governed by a BSD-style\\n// license that can be found in the LICENSE file.\\n\\npackage main\\n\\nimport (\\n\\t\\\"log\\\"\\n)\\n\\nimport (\\n\\t\\\"github.com/lxn/walk\\\"\\n\\t. \\\"github.com/lxn/walk/declarative\\\"\\n)\\n\\nfunc main() {\\n\\tvar te *walk.TextEdit\\n\\n\\tif _, err := (MainWindow{\\n\\t\\tTitle:   \\\"Walk Clipboard Example\\\",\\n\\t\\tMinSize: Size{300, 200},\\n\\t\\tLayout:  VBox{},\\n\\t\\tChildren: []Widget{\\n\\t\\t\\tPushButton{\\n\\t\\t\\t\\tText: \\\"Copy\\\",\\n\\t\\t\\t\\tOnClicked: func() {\\n\\t\\t\\t\\t\\tif err := walk.Clipboard().SetText(te.Text()); err != nil {\\n\\t\\t\\t\\t\\t\\tlog.Print(\\\"Copy: \\\", err)\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t},\\n\\t\\t\\t},\\n\\t\\t\\tPushButton{\\n\\t\\t\\t\\tText: \\\"Paste\\\",\\n\\t\\t\\t\\tOnClicked: func() {\\n\\t\\t\\t\\t\\tif text, err := walk.Clipboard().Text(); err != nil {\\n\\t\\t\\t\\t\\t\\tlog.Print(\\\"Paste: \\\", err)\\n\\t\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\t\\tte.SetText(text)\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t},\\n\\t\\t\\t},\\n\\t\\t\\tTextEdit{\\n\\t\\t\\t\\tAssignTo: &te,\\n\\t\\t\\t},\\n\\t\\t},\\n\\t}).Run(); err != nil {\\n\\t\\tlog.Fatal(err)\\n\\t}\\n}\\n```\\n**test.manifest**\\n```\\n<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\" standalone=\\\"yes\\\"?>\\n<assembly xmlns=\\\"urn:schemas-microsoft-com:asm.v1\\\" manifestVersion=\\\"1.0\\\">\\n    <assemblyIdentity version=\\\"1.0.0.0\\\" processorArchitecture=\\\"*\\\" name=\\\"SomeFunkyNameHere\\\" type=\\\"win32\\\"/>\\n    <dependency>\\n        <dependentAssembly>\\n            <assemblyIdentity type=\\\"win32\\\" name=\\\"Microsoft.Windows.Common-Controls\\\" version=\\\"6.0.0.0\\\" processorArchitecture=\\\"*\\\" publicKeyToken=\\\"6595b64144ccf1df\\\" language=\\\"*\\\"/>\\n        </dependentAssembly>\\n    </dependency>\\n    <application xmlns=\\\"urn:schemas-microsoft-com:asm.v3\\\">\\n        <windowsSettings>\\n            <dpiAwareness xmlns=\\\"http://schemas.microsoft.com/SMI/2016/WindowsSettings\\\">PerMonitorV2, PerMonitor</dpiAwareness>\\n            <dpiAware xmlns=\\\"http://schemas.microsoft.com/SMI/2005/WindowsSettings\\\">True</dpiAware>\\n        </windowsSettings>\\n    </application>\\n</assembly>\\n```\\n建立一個目錄並在目錄底下放置clipboard.go和test.manifest兩個檔案\\n```\\n－walktest\\n    |－clipboard.go\\n    |－test.manifest\\n```\\n第一次要使用指令產生.syso檔\\n```\\nrsrc -manifest test.manifest -o rsrc.syso\\n```\\n再輸入指令建置可執行檔\\n```\\ngo build\\n```\\n運行可執行檔就會出現圖形化介面了\\n```\\nwalktest.exe\\n```\\n![](assets/1.png)\"}]],\"markups\":[],\"sections\":[[10,0],[1,\"p\",[]]],\"ghostVersion\":\"3.0\"}","lexical":null,"html":"<!--kg-card-begin: markdown--><p>golang 普遍使用CLI作為使用者介面，但因為需要做一個程式給不常使用指令的人使用，所以使用lxn/walk建立圖形化使用者介面，lxn/walk可以滿足視窗的大部分需求，適用於建立一些基本的圖形化介面</p>\n<h2 id=\"\">環境</h2>\n<ul>\n<li>Windows 10 x64</li>\n<li>go 1.15</li>\n<li>github.com/lxn/walk v0.0.0-20200806153934-8721e9bc9ff7</li>\n<li>github.com/akavel/rsrc v0.9.0</li>\n</ul>\n<h2 id=\"\">安裝</h2>\n<p>要將程式包裝成可執行檔需要兩個package，分別是lxn/walk和akavel/rsrc<br>\nlxn/walk用來建立圖形化介面<br>\nakavel/rsrc用來將資源嵌入可執行檔<br>\n使用指令安裝lxn/walk和akavel/rsrc</p>\n<pre><code>go get github.com/lxn/walk\ngo get github.com/akavel/rsrc\n</code></pre>\n<h2 id=\"\">結構</h2>\n<p>在lxn/walk下包含了declarative sub package、範例檔和各種元件的檔案</p>\n<pre><code>－github.com\n    |－lxn\n        |－walk\n            |－declarative\n            |－examples\n            |...其他檔案\n</code></pre>\n<p>以examples下的action範例裡的一小段程式碼為例</p>\n<pre><code>PushButton{\n\tAssignTo: &amp;toggleSpecialModePB,\n\tText:     &quot;Enable Special Mode&quot;,\n\tOnClicked: func() {\n\t\tisSpecialMode.SetSatisfied(!isSpecialMode.Satisfied())\n\n\t\tif isSpecialMode.Satisfied() {\n\t\t\ttoggleSpecialModePB.SetText(&quot;Disable Special Mode&quot;)\n\t\t} else {\n\t\t\ttoggleSpecialModePB.SetText(&quot;Enable Special Mode&quot;)\n\t\t}\n\t},\n\tAccessibility: Accessibility{\n\t\tHelp: &quot;Toggles special mode&quot;,\n\t},\n},\n</code></pre>\n<p>很好奇PushButton裡面的這些參數到底是哪裡來的對吧<br>\n讓我們看看declarative目錄下的pushbutton.go檔案</p>\n<p><strong>pushbutton.go</strong></p>\n<pre><code>package declarative\n\nimport (\n\t&quot;github.com/lxn/walk&quot;\n)\n\ntype PushButton struct {\n\t// Window\n\n\tAccessibility      Accessibility\n\tBackground         Brush\n\tContextMenuItems   []MenuItem\n\tDoubleBuffering    bool\n\tEnabled            Property\n\tFont               Font\n\tMaxSize            Size\n\tMinSize            Size\n\tName               string\n\tOnBoundsChanged    walk.EventHandler\n\tOnKeyDown          walk.KeyEventHandler\n\tOnKeyPress         walk.KeyEventHandler\n\tOnKeyUp            walk.KeyEventHandler\n\tOnMouseDown        walk.MouseEventHandler\n\tOnMouseMove        walk.MouseEventHandler\n\tOnMouseUp          walk.MouseEventHandler\n\tOnSizeChanged      walk.EventHandler\n\tPersistent         bool\n\tRightToLeftReading bool\n\tToolTipText        Property\n\tVisible            Property\n\n\t// Widget\n\n\tAlignment          Alignment2D\n\tAlwaysConsumeSpace bool\n\tColumn             int\n\tColumnSpan         int\n\tGraphicsEffects    []walk.WidgetGraphicsEffect\n\tRow                int\n\tRowSpan            int\n\tStretchFactor      int\n\n\t// Button\n\n\tImage     Property\n\tOnClicked walk.EventHandler\n\tText      Property\n\n\t// PushButton\n\n\tAssignTo       **walk.PushButton\n\tImageAboveText bool\n}\n</code></pre>\n<p>這邊清楚的定義了哪些元件可以用哪些參數，只要照著結構裡定義的屬性名稱和型別給予對應的數值就可以了</p>\n<h2 id=\"\">建置與執行</h2>\n<p>要執行圖形化介面無法直接使用go run執行<br>\n必須在相同目錄下新增.manifest檔案並使用go build建置產生可執行檔<br>\n再啟動可執行檔執行<br>\n我們使用examples下的clipboard作為範例</p>\n<p><strong>clipboard.go</strong></p>\n<pre><code>// Copyright 2013 The Walk Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style\n// license that can be found in the LICENSE file.\n\npackage main\n\nimport (\n\t&quot;log&quot;\n)\n\nimport (\n\t&quot;github.com/lxn/walk&quot;\n\t. &quot;github.com/lxn/walk/declarative&quot;\n)\n\nfunc main() {\n\tvar te *walk.TextEdit\n\n\tif _, err := (MainWindow{\n\t\tTitle:   &quot;Walk Clipboard Example&quot;,\n\t\tMinSize: Size{300, 200},\n\t\tLayout:  VBox{},\n\t\tChildren: []Widget{\n\t\t\tPushButton{\n\t\t\t\tText: &quot;Copy&quot;,\n\t\t\t\tOnClicked: func() {\n\t\t\t\t\tif err := walk.Clipboard().SetText(te.Text()); err != nil {\n\t\t\t\t\t\tlog.Print(&quot;Copy: &quot;, err)\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t},\n\t\t\tPushButton{\n\t\t\t\tText: &quot;Paste&quot;,\n\t\t\t\tOnClicked: func() {\n\t\t\t\t\tif text, err := walk.Clipboard().Text(); err != nil {\n\t\t\t\t\t\tlog.Print(&quot;Paste: &quot;, err)\n\t\t\t\t\t} else {\n\t\t\t\t\t\tte.SetText(text)\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t},\n\t\t\tTextEdit{\n\t\t\t\tAssignTo: &amp;te,\n\t\t\t},\n\t\t},\n\t}).Run(); err != nil {\n\t\tlog.Fatal(err)\n\t}\n}\n</code></pre>\n<p><strong>test.manifest</strong></p>\n<pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;yes&quot;?&gt;\n&lt;assembly xmlns=&quot;urn:schemas-microsoft-com:asm.v1&quot; manifestVersion=&quot;1.0&quot;&gt;\n    &lt;assemblyIdentity version=&quot;1.0.0.0&quot; processorArchitecture=&quot;*&quot; name=&quot;SomeFunkyNameHere&quot; type=&quot;win32&quot;/&gt;\n    &lt;dependency&gt;\n        &lt;dependentAssembly&gt;\n            &lt;assemblyIdentity type=&quot;win32&quot; name=&quot;Microsoft.Windows.Common-Controls&quot; version=&quot;6.0.0.0&quot; processorArchitecture=&quot;*&quot; publicKeyToken=&quot;6595b64144ccf1df&quot; language=&quot;*&quot;/&gt;\n        &lt;/dependentAssembly&gt;\n    &lt;/dependency&gt;\n    &lt;application xmlns=&quot;urn:schemas-microsoft-com:asm.v3&quot;&gt;\n        &lt;windowsSettings&gt;\n            &lt;dpiAwareness xmlns=&quot;http://schemas.microsoft.com/SMI/2016/WindowsSettings&quot;&gt;PerMonitorV2, PerMonitor&lt;/dpiAwareness&gt;\n            &lt;dpiAware xmlns=&quot;http://schemas.microsoft.com/SMI/2005/WindowsSettings&quot;&gt;True&lt;/dpiAware&gt;\n        &lt;/windowsSettings&gt;\n    &lt;/application&gt;\n&lt;/assembly&gt;\n</code></pre>\n<p>建立一個目錄並在目錄底下放置clipboard.go和test.manifest兩個檔案</p>\n<pre><code>－walktest\n    |－clipboard.go\n    |－test.manifest\n</code></pre>\n<p>第一次要使用指令產生.syso檔</p>\n<pre><code>rsrc -manifest test.manifest -o rsrc.syso\n</code></pre>\n<p>再輸入指令建置可執行檔</p>\n<pre><code>go build\n</code></pre>\n<p>運行可執行檔就會出現圖形化介面了</p>\n<pre><code>walktest.exe\n</code></pre>\n<p><img src=\"assets/1.png\" alt=\"\" loading=\"lazy\"></p>\n<!--kg-card-end: markdown-->","comment_id":"5f4809f66c8c391358537596","plaintext":"golang 普遍使用CLI作為使用者介面，但因為需要做一個程式給不常使用指令的人使用，所以使用lxn/walk建立圖形化使用者介面，lxn/walk可以滿足視窗的大部分需求，適用於建立一些基本的圖形化介面\n\n\n\n環境\n\n\n * Windows 10 x64\n * go 1.15\n * github.com/lxn/walk v0.0.0-20200806153934-8721e9bc9ff7\n * github.com/akavel/rsrc v0.9.0\n\n\n\n安裝\n\n\n要將程式包裝成可執行檔需要兩個package，分別是lxn/walk和akavel/rsrc\n\nlxn/walk用來建立圖形化介面\n\nakavel/rsrc用來將資源嵌入可執行檔\n\n使用指令安裝lxn/walk和akavel/rsrc\n\n\ngo get github.com/lxn/walk\ngo get github.com/akavel/rsrc\n\n\n\n\n結構\n\n\n在lxn/walk下包含了declarative sub package、範例檔和各種元件的檔案\n\n\n－github.com\n    |－lxn\n        |－walk\n            |－declarative\n            |－examples\n            |...其他檔案\n\n\n\n以examples下的action範例裡的一小段程式碼為例\n\n\nPushButton{\n\tAssignTo: &toggleSpecialModePB,\n\tText:     \"Enable Special Mode\",\n\tOnClicked: func() {\n\t\tisSpecialMode.SetSatisfied(!isSpecialMode.Satisfied())\n\n\t\tif isSpecialMode.Satisfied() {\n\t\t\ttoggleSpecialModePB.SetText(\"Disable Special Mode\")\n\t\t} else {\n\t\t\ttoggleSpecialModePB.SetText(\"Enable Special Mode\")\n\t\t}\n\t},\n\tAccessibility: Accessibility{\n\t\tHelp: \"Toggles special mode\",\n\t},\n},\n\n\n\n很好奇PushButton裡面的這些參數到底是哪裡來的對吧\n\n讓我們看看declarative目錄下的pushbutton.go檔案\n\n\npushbutton.go\n\n\npackage declarative\n\nimport (\n\t\"github.com/lxn/walk\"\n)\n\ntype PushButton struct {\n\t// Window\n\n\tAccessibility      Accessibility\n\tBackground         Brush\n\tContextMenuItems   []MenuItem\n\tDoubleBuffering    bool\n\tEnabled            Property\n\tFont               Font\n\tMaxSize            Size\n\tMinSize            Size\n\tName               string\n\tOnBoundsChanged    walk.EventHandler\n\tOnKeyDown          walk.KeyEventHandler\n\tOnKeyPress         walk.KeyEventHandler\n\tOnKeyUp            walk.KeyEventHandler\n\tOnMouseDown        walk.MouseEventHandler\n\tOnMouseMove        walk.MouseEventHandler\n\tOnMouseUp          walk.MouseEventHandler\n\tOnSizeChanged      walk.EventHandler\n\tPersistent         bool\n\tRightToLeftReading bool\n\tToolTipText        Property\n\tVisible            Property\n\n\t// Widget\n\n\tAlignment          Alignment2D\n\tAlwaysConsumeSpace bool\n\tColumn             int\n\tColumnSpan         int\n\tGraphicsEffects    []walk.WidgetGraphicsEffect\n\tRow                int\n\tRowSpan            int\n\tStretchFactor      int\n\n\t// Button\n\n\tImage     Property\n\tOnClicked walk.EventHandler\n\tText      Property\n\n\t// PushButton\n\n\tAssignTo       **walk.PushButton\n\tImageAboveText bool\n}\n\n\n\n這邊清楚的定義了哪些元件可以用哪些參數，只要照著結構裡定義的屬性名稱和型別給予對應的數值就可以了\n\n\n\n建置與執行\n\n\n要執行圖形化介面無法直接使用go run執行\n\n必須在相同目錄下新增.manifest檔案並使用go build建置產生可執行檔\n\n再啟動可執行檔執行\n\n我們使用examples下的clipboard作為範例\n\n\nclipboard.go\n\n\n// Copyright 2013 The Walk Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style\n// license that can be found in the LICENSE file.\n\npackage main\n\nimport (\n\t\"log\"\n)\n\nimport (\n\t\"github.com/lxn/walk\"\n\t. \"github.com/lxn/walk/declarative\"\n)\n\nfunc main() {\n\tvar te *walk.TextEdit\n\n\tif _, err := (MainWindow{\n\t\tTitle:   \"Walk Clipboard Example\",\n\t\tMinSize: Size{300, 200},\n\t\tLayout:  VBox{},\n\t\tChildren: []Widget{\n\t\t\tPushButton{\n\t\t\t\tText: \"Copy\",\n\t\t\t\tOnClicked: func() {\n\t\t\t\t\tif err := walk.Clipboard().SetText(te.Text()); err != nil {\n\t\t\t\t\t\tlog.Print(\"Copy: \", err)\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t},\n\t\t\tPushButton{\n\t\t\t\tText: \"Paste\",\n\t\t\t\tOnClicked: func() {\n\t\t\t\t\tif text, err := walk.Clipboard().Text(); err != nil {\n\t\t\t\t\t\tlog.Print(\"Paste: \", err)\n\t\t\t\t\t} else {\n\t\t\t\t\t\tte.SetText(text)\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t},\n\t\t\tTextEdit{\n\t\t\t\tAssignTo: &te,\n\t\t\t},\n\t\t},\n\t}).Run(); err != nil {\n\t\tlog.Fatal(err)\n\t}\n}\n\n\n\ntest.manifest\n\n\n<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<assembly xmlns=\"urn:schemas-microsoft-com:asm.v1\" manifestVersion=\"1.0\">\n    <assemblyIdentity version=\"1.0.0.0\" processorArchitecture=\"*\" name=\"SomeFunkyNameHere\" type=\"win32\"/>\n    <dependency>\n        <dependentAssembly>\n            <assemblyIdentity type=\"win32\" name=\"Microsoft.Windows.Common-Controls\" version=\"6.0.0.0\" processorArchitecture=\"*\" publicKeyToken=\"6595b64144ccf1df\" language=\"*\"/>\n        </dependentAssembly>\n    </dependency>\n    <application xmlns=\"urn:schemas-microsoft-com:asm.v3\">\n        <windowsSettings>\n            <dpiAwareness xmlns=\"http://schemas.microsoft.com/SMI/2016/WindowsSettings\">PerMonitorV2, PerMonitor</dpiAwareness>\n            <dpiAware xmlns=\"http://schemas.microsoft.com/SMI/2005/WindowsSettings\">True</dpiAware>\n        </windowsSettings>\n    </application>\n</assembly>\n\n\n\n建立一個目錄並在目錄底下放置clipboard.go和test.manifest兩個檔案\n\n\n－walktest\n    |－clipboard.go\n    |－test.manifest\n\n\n\n第一次要使用指令產生.syso檔\n\n\nrsrc -manifest test.manifest -o rsrc.syso\n\n\n\n再輸入指令建置可執行檔\n\n\ngo build\n\n\n\n運行可執行檔就會出現圖形化介面了\n\n\nwalktest.exe\n\n\n\n\n","feature_image":"__GHOST_URL__/content/images/2020/08/golang-long.jpeg","featured":0,"type":"post","status":"published","locale":null,"visibility":"public","email_recipient_filter":"none","created_at":"2020-08-27 19:31:02","created_by":"1","updated_at":"2020-09-01 15:57:02","updated_by":null,"published_at":"2020-08-27 19:48:31","published_by":"1","custom_excerpt":"golang 普遍使用CLI作為使用者介面，但因為需要做一個程式給不常使用指令的人使用，所以使用lxn/walk建立圖形化使用者介面，lxn/walk可以滿足視窗的大部分需求，適用於建立一些基本的圖形化介面","codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null,"newsletter_id":null},{"id":"635a816a57207246b927a8af","uuid":"bb3ddc88-c7ac-4d86-8981-6212e7e081d6","title":"[Golang]使用筆畫排序中文字","slug":"golang-sort-traditionalchinese","mobiledoc":"{\"version\":\"0.3.1\",\"atoms\":[],\"cards\":[[\"markdown\",{\"markdown\":\"有次嘗試要使用筆劃排序中文姓名時，直接使用sort包進行排序，但發現結果並不是照著筆劃排序，查了點資料發現原來和UTF-8、Big5兩種編碼有極大的關係\\n\\n## 環境\\n- Windows 10 x64\\n- go 1.15\\n- golang.org/x/text v0.3.3\\n\\n## UTF-8和Big5的排序\\n### Big5\\n從全字庫查詢到Big5的編碼原則\\n>以國家標準CNS11643及國際標準ISO10646漢字集為字源範圍，並依CNS11643之序編碼。\\n>\\n而CNS11643的字碼編排原則又是如何呢?以下是定義\\n>依**先筆畫後部首**排列順序編碼。 說明： 每一字面均以文字總筆畫數為首序、部首為次序、筆順為末序編訂字碼，使用者只需以書寫之實際筆畫數即可查尋到國標碼。\\n>\\n所以我們可以得知Big5以\\\"**筆畫->部首->筆順**\\\"為排列順序\\n### UTF-8\\n而全字庫裡對於UTF-8的說明如下\\n>在I區的中日韓漢字部份，最當初進行編碼時，因各國漢字型體不盡相同，必須先進行認同(unify)整理工作，SC2/WG2因此邀集有關各國指派專家組成CJK/JRG(中日韓聯合研究工作組，即IRG前身)，進行字集的總整理。CJK/JRG歷經五次會議完成此項艱鉅工作，所整理的「中日韓認同表意文字」(CJK Unified Ideographs)參考了我國75年版CNS 11643之第1、2、14字面(T欄)，大陸的GB 2312、GB 12345、GB 7589、GB 17590、GB 8565(G欄)，日本的JIS X 0208、JIS X 0212(J欄)及南韓的KS C 5601、KSC 5667(K欄)等標準字符集，可說已包含這四地所常用的字。其字序主要是參考康熙字典、大漢和詞典、漢語大詞典及大字源字典，以**先部首後筆劃**的順序排列。\\n>\\n所以我們可以得知UTF-8以\\\"**部首->筆畫**\\\"為排列順序\\n\\n## Golang的預設編碼\\ngolang預設使用UTF-8作為編碼格式，所以若直接使用sort包進行排序得出的結果會是依照先部首後筆畫的順序排序\\n\\n## 轉為Big5排序\\n若想得到以先筆畫後部首的方式排序，其中一個方法是將預設的UTF-8轉為Big5，使用Big5排序過後依照需求再轉換回UTF-8\\n\\n## 程式碼\\n以\\\"**毛隆青,劉雅君,陳嘉鴻,王育如,郭苡良,楊宗穎,李玉全,劉玉合,姚昶民,林欣麟**\\\"十個姓名作為測試資料輸入，結果應為[**毛隆青 王育如 李玉全 林欣麟 姚昶民 郭苡良 陳嘉鴻 楊宗穎 劉玉合 劉雅君**]  \\n\\n此處須注意若筆劃數量相同，則會比對完部首後再比對下一個字，例如:\\n**毛隆青**和**王育如**姓氏都是四劃，但是比對過筆劃後結果是'**毛**'先於'**王**'所以'**毛**'才會排在'**王**'前面  \\n\\n**main.go**\\n```go\\npackage main\\n\\nimport (\\n\\t\\\"fmt\\\"\\n\\t\\\"sort\\\"\\n\\n\\t\\\"golang.org/x/text/encoding/traditionalchinese\\\"\\n\\t\\\"golang.org/x/text/transform\\\"\\n)\\n\\nfunc main() {\\n\\n\\ts := []string{\\\"毛隆青\\\", \\\"劉雅君\\\", \\\"陳嘉鴻\\\", \\\"王育如\\\", \\\"郭苡良\\\", \\\"楊宗穎\\\", \\\"李玉全\\\", \\\"劉玉合\\\", \\\"姚昶民\\\", \\\"林欣麟\\\"}\\n\\n\\ts1 := sortByStroke(s)\\n\\tfmt.Println(s1)\\n}\\n\\nfunc sortByStroke(input []string) (output []string) {\\n\\toutput = make([]string, 0)\\n    \\n\\t//建立Encoder和Decoder\\n\\tutf8ToBig5 := traditionalchinese.Big5.NewEncoder()\\n\\tbig5ToUtf8 := traditionalchinese.Big5.NewDecoder()\\n\\n\\t//將UTF-8轉換為Big5\\n\\tfor index := range input {\\n\\t\\tbig5, _, _ := transform.String(utf8ToBig5, input[index])\\n\\t\\tinput[index] = big5\\n\\t}\\n\\n\\t//使用轉換成Big5的編碼進行排序\\n\\tsort.Strings(input)\\n\\n\\t//將排序過後的Big5碼轉回UTF-8並放入output slice\\n\\tfor _, value := range input {\\n\\t\\tutf8, _, _ := transform.String(big5ToUtf8, value)\\n\\t\\toutput = append(output, utf8)\\n\\t}\\n\\n\\treturn output\\n}\\n```\\n```\\nD:\\\\>go run main\\n[毛隆青 王育如 李玉全 林欣麟 姚昶民 郭苡良 陳嘉鴻 楊宗穎 劉玉合 劉雅君]\\n```\\n\\n## 參考資料\\n[全字庫-中文碼介紹](https://www.cns11643.gov.tw/pageView.jsp?ID=9)\"}]],\"markups\":[],\"sections\":[[10,0],[1,\"p\",[]]],\"ghostVersion\":\"3.0\"}","lexical":null,"html":"<!--kg-card-begin: markdown--><p>有次嘗試要使用筆劃排序中文姓名時，直接使用sort包進行排序，但發現結果並不是照著筆劃排序，查了點資料發現原來和UTF-8、Big5兩種編碼有極大的關係</p>\n<h2 id=\"\">環境</h2>\n<ul>\n<li>Windows 10 x64</li>\n<li>go 1.15</li>\n<li>golang.org/x/text v0.3.3</li>\n</ul>\n<h2 id=\"utf8big5\">UTF-8和Big5的排序</h2>\n<h3 id=\"big5\">Big5</h3>\n<p>從全字庫查詢到Big5的編碼原則</p>\n<blockquote>\n<p>以國家標準CNS11643及國際標準ISO10646漢字集為字源範圍，並依CNS11643之序編碼。</p>\n</blockquote>\n<p>而CNS11643的字碼編排原則又是如何呢?以下是定義</p>\n<blockquote>\n<p>依<strong>先筆畫後部首</strong>排列順序編碼。 說明： 每一字面均以文字總筆畫數為首序、部首為次序、筆順為末序編訂字碼，使用者只需以書寫之實際筆畫數即可查尋到國標碼。</p>\n</blockquote>\n<p>所以我們可以得知Big5以&quot;<strong>筆畫-&gt;部首-&gt;筆順</strong>&quot;為排列順序</p>\n<h3 id=\"utf8\">UTF-8</h3>\n<p>而全字庫裡對於UTF-8的說明如下</p>\n<blockquote>\n<p>在I區的中日韓漢字部份，最當初進行編碼時，因各國漢字型體不盡相同，必須先進行認同(unify)整理工作，SC2/WG2因此邀集有關各國指派專家組成CJK/JRG(中日韓聯合研究工作組，即IRG前身)，進行字集的總整理。CJK/JRG歷經五次會議完成此項艱鉅工作，所整理的「中日韓認同表意文字」(CJK Unified Ideographs)參考了我國75年版CNS 11643之第1、2、14字面(T欄)，大陸的GB 2312、GB 12345、GB 7589、GB 17590、GB 8565(G欄)，日本的JIS X 0208、JIS X 0212(J欄)及南韓的KS C 5601、KSC 5667(K欄)等標準字符集，可說已包含這四地所常用的字。其字序主要是參考康熙字典、大漢和詞典、漢語大詞典及大字源字典，以<strong>先部首後筆劃</strong>的順序排列。</p>\n</blockquote>\n<p>所以我們可以得知UTF-8以&quot;<strong>部首-&gt;筆畫</strong>&quot;為排列順序</p>\n<h2 id=\"golang\">Golang的預設編碼</h2>\n<p>golang預設使用UTF-8作為編碼格式，所以若直接使用sort包進行排序得出的結果會是依照先部首後筆畫的順序排序</p>\n<h2 id=\"big5\">轉為Big5排序</h2>\n<p>若想得到以先筆畫後部首的方式排序，其中一個方法是將預設的UTF-8轉為Big5，使用Big5排序過後依照需求再轉換回UTF-8</p>\n<h2 id=\"\">程式碼</h2>\n<p>以&quot;<strong>毛隆青,劉雅君,陳嘉鴻,王育如,郭苡良,楊宗穎,李玉全,劉玉合,姚昶民,林欣麟</strong>&quot;十個姓名作為測試資料輸入，結果應為[<strong>毛隆青 王育如 李玉全 林欣麟 姚昶民 郭苡良 陳嘉鴻 楊宗穎 劉玉合 劉雅君</strong>]</p>\n<p>此處須注意若筆劃數量相同，則會比對完部首後再比對下一個字，例如:<br>\n<strong>毛隆青</strong>和<strong>王育如</strong>姓氏都是四劃，但是比對過筆劃後結果是'<strong>毛</strong>'先於'<strong>王</strong>'所以'<strong>毛</strong>'才會排在'<strong>王</strong>'前面</p>\n<p><strong>main.go</strong></p>\n<pre><code class=\"language-go\">package main\n\nimport (\n\t&quot;fmt&quot;\n\t&quot;sort&quot;\n\n\t&quot;golang.org/x/text/encoding/traditionalchinese&quot;\n\t&quot;golang.org/x/text/transform&quot;\n)\n\nfunc main() {\n\n\ts := []string{&quot;毛隆青&quot;, &quot;劉雅君&quot;, &quot;陳嘉鴻&quot;, &quot;王育如&quot;, &quot;郭苡良&quot;, &quot;楊宗穎&quot;, &quot;李玉全&quot;, &quot;劉玉合&quot;, &quot;姚昶民&quot;, &quot;林欣麟&quot;}\n\n\ts1 := sortByStroke(s)\n\tfmt.Println(s1)\n}\n\nfunc sortByStroke(input []string) (output []string) {\n\toutput = make([]string, 0)\n    \n\t//建立Encoder和Decoder\n\tutf8ToBig5 := traditionalchinese.Big5.NewEncoder()\n\tbig5ToUtf8 := traditionalchinese.Big5.NewDecoder()\n\n\t//將UTF-8轉換為Big5\n\tfor index := range input {\n\t\tbig5, _, _ := transform.String(utf8ToBig5, input[index])\n\t\tinput[index] = big5\n\t}\n\n\t//使用轉換成Big5的編碼進行排序\n\tsort.Strings(input)\n\n\t//將排序過後的Big5碼轉回UTF-8並放入output slice\n\tfor _, value := range input {\n\t\tutf8, _, _ := transform.String(big5ToUtf8, value)\n\t\toutput = append(output, utf8)\n\t}\n\n\treturn output\n}\n</code></pre>\n<pre><code>D:\\&gt;go run main\n[毛隆青 王育如 李玉全 林欣麟 姚昶民 郭苡良 陳嘉鴻 楊宗穎 劉玉合 劉雅君]\n</code></pre>\n<h2 id=\"\">參考資料</h2>\n<p><a href=\"https://www.cns11643.gov.tw/pageView.jsp?ID=9\">全字庫-中文碼介紹</a></p>\n<!--kg-card-end: markdown-->","comment_id":"5f4e5a4978355806f01eea76","plaintext":"有次嘗試要使用筆劃排序中文姓名時，直接使用sort包進行排序，但發現結果並不是照著筆劃排序，查了點資料發現原來和UTF-8、Big5兩種編碼有極大的關係\n\n\n\n環境\n\n\n * Windows 10 x64\n * go 1.15\n * golang.org/x/text v0.3.3\n\n\n\nUTF-8和Big5的排序\n\n\n\nBig5\n\n\n從全字庫查詢到Big5的編碼原則\n\n\n\n\n\n以國家標準CNS11643及國際標準ISO10646漢字集為字源範圍，並依CNS11643之序編碼。\n\n\n\n而CNS11643的字碼編排原則又是如何呢?以下是定義\n\n\n\n\n\n依先筆畫後部首排列順序編碼。 說明： 每一字面均以文字總筆畫數為首序、部首為次序、筆順為末序編訂字碼，使用者只需以書寫之實際筆畫數即可查尋到國標碼。\n\n\n\n所以我們可以得知Big5以\"筆畫->部首->筆順\"為排列順序\n\n\n\nUTF-8\n\n\n而全字庫裡對於UTF-8的說明如下\n\n\n\n\n\n在I區的中日韓漢字部份，最當初進行編碼時，因各國漢字型體不盡相同，必須先進行認同(unify)整理工作，SC2/WG2因此邀集有關各國指派專家組成CJK/JRG(中日韓聯合研究工作組，即IRG前身)，進行字集的總整理。CJK/JRG歷經五次會議完成此項艱鉅工作，所整理的「中日韓認同表意文字」(CJK Unified Ideographs)參考了我國75年版CNS 11643之第1、2、14字面(T欄)，大陸的GB 2312、GB 12345、GB 7589、GB 17590、GB 8565(G欄)，日本的JIS X 0208、JIS X 0212(J欄)及南韓的KS C 5601、KSC 5667(K欄)等標準字符集，可說已包含這四地所常用的字。其字序主要是參考康熙字典、大漢和詞典、漢語大詞典及大字源字典，以先部首後筆劃的順序排列。\n\n\n\n所以我們可以得知UTF-8以\"部首->筆畫\"為排列順序\n\n\n\nGolang的預設編碼\n\n\ngolang預設使用UTF-8作為編碼格式，所以若直接使用sort包進行排序得出的結果會是依照先部首後筆畫的順序排序\n\n\n\n轉為Big5排序\n\n\n若想得到以先筆畫後部首的方式排序，其中一個方法是將預設的UTF-8轉為Big5，使用Big5排序過後依照需求再轉換回UTF-8\n\n\n\n程式碼\n\n\n以\"毛隆青,劉雅君,陳嘉鴻,王育如,郭苡良,楊宗穎,李玉全,劉玉合,姚昶民,林欣麟\"十個姓名作為測試資料輸入，結果應為[毛隆青 王育如 李玉全 林欣麟 姚昶民 郭苡良 陳嘉鴻 楊宗穎 劉玉合 劉雅君]\n\n\n此處須注意若筆劃數量相同，則會比對完部首後再比對下一個字，例如:\n\n毛隆青和王育如姓氏都是四劃，但是比對過筆劃後結果是'毛'先於'王'所以'毛'才會排在'王'前面\n\n\nmain.go\n\n\npackage main\n\nimport (\n\t\"fmt\"\n\t\"sort\"\n\n\t\"golang.org/x/text/encoding/traditionalchinese\"\n\t\"golang.org/x/text/transform\"\n)\n\nfunc main() {\n\n\ts := []string{\"毛隆青\", \"劉雅君\", \"陳嘉鴻\", \"王育如\", \"郭苡良\", \"楊宗穎\", \"李玉全\", \"劉玉合\", \"姚昶民\", \"林欣麟\"}\n\n\ts1 := sortByStroke(s)\n\tfmt.Println(s1)\n}\n\nfunc sortByStroke(input []string) (output []string) {\n\toutput = make([]string, 0)\n    \n\t//建立Encoder和Decoder\n\tutf8ToBig5 := traditionalchinese.Big5.NewEncoder()\n\tbig5ToUtf8 := traditionalchinese.Big5.NewDecoder()\n\n\t//將UTF-8轉換為Big5\n\tfor index := range input {\n\t\tbig5, _, _ := transform.String(utf8ToBig5, input[index])\n\t\tinput[index] = big5\n\t}\n\n\t//使用轉換成Big5的編碼進行排序\n\tsort.Strings(input)\n\n\t//將排序過後的Big5碼轉回UTF-8並放入output slice\n\tfor _, value := range input {\n\t\tutf8, _, _ := transform.String(big5ToUtf8, value)\n\t\toutput = append(output, utf8)\n\t}\n\n\treturn output\n}\n\n\n\nD:\\>go run main\n[毛隆青 王育如 李玉全 林欣麟 姚昶民 郭苡良 陳嘉鴻 楊宗穎 劉玉合 劉雅君]\n\n\n\n\n參考資料\n\n\n全字庫-中文碼介紹\n","feature_image":"__GHOST_URL__/content/images/2020/09/golang-long.jpeg","featured":0,"type":"post","status":"published","locale":null,"visibility":"public","email_recipient_filter":"none","created_at":"2020-09-01 14:27:21","created_by":"1","updated_at":"2020-09-01 15:55:54","updated_by":null,"published_at":"2020-09-01 14:33:48","published_by":"1","custom_excerpt":"有次嘗試要使用筆劃排序中文姓名時，直接使用sort包進行排序，但發現結果並不是照著筆劃排序，查了點資料發現原來和UTF-8、Big5兩種編碼有極大的關係","codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null,"newsletter_id":null},{"id":"635a816a57207246b927a8b0","uuid":"deb6fde9-4235-452b-9fd4-7aa6fc33faa7","title":"[C#]使用Npgsql連接到PostgreSQL server","slug":"csharp-connect-to-postgresql","mobiledoc":"{\"version\":\"0.3.1\",\"atoms\":[],\"cards\":[[\"markdown\",{\"markdown\":\"## 環境\\n- Windows 10 x64\\n- Visual Studio Community 2019 v16.2.2\\n- Npgsql v4.1.4\\n\\n## 安裝\\n開啟visual studio後點選\\\"**工具**->**NuGet套件管理員**->**管理方案的NuGet套件**\\\"  \\n![1](__GHOST_URL__/content/images/2020/09/1.png)\\n點選Npgsql，勾選右方會執行到此套件的專案，再點選安裝\\n![2](__GHOST_URL__/content/images/2020/09/2.png)\\n按確定進行安裝\\n![3](__GHOST_URL__/content/images/2020/09/3.png)\\n\\n## 建立連線\\n設定好`host` `post` `username` `password` `database`等連線資訊後，使用`NpgsqlConnection`建立一個新連線，再使用Open()方法開啟連線\\n``` csharp\\nclass Program\\n{\\n    \\n    static void Main(string[] args)\\n    {\\n        string host = \\\"localhost\\\";\\n        string port = \\\"5432\\\";\\n        string username = \\\"postgres\\\";\\n        string password = \\\"password\\\";\\n        string database = \\\"postgis\\\";\\n        string connStr = $\\\"Host={host};Port={port};Username={username};Password={password};Database={database};\\\";\\n        using (NpgsqlConnection pgconn = new NpgsqlConnection(connStr))\\n        {\\n            pgconn.Open();\\n        }\\n\\n    }\\n}\\n```\\n\\n## 執行查詢\\n### 方法一：使用NpgsqlDataReader讀取資料\\n執行查詢必須用到先前建立好的連線和即將要執行的查詢式\\n```csharp\\nclass Program\\n{\\n    static void Main(string[] args)\\n    {\\n        ExecuteQuery(\\\"SELECT id,x,y FROM users;\\\");\\n    }\\n    \\n    public static void ExecuteQuery(string sqlstr)\\n    {\\n        using (var pgconn = new NpgsqlConnection(connStr))\\n        {\\n            pgconn.Open();\\n            using (var cmd = new NpgsqlCommand(sqlstr, pgconn))\\n            {\\n                using (var reader = cmd.ExecuteReader())//使用NpgsqlDataReader讀取資料\\n                {\\n                    while (reader.Read())//讀取下一列直到沒有數值\\n                    {\\n                        Console.Write(reader.GetInt32(0));//0代表該列第0行的值，也就是對應到查詢式中的id\\n                        Console.Write(reader.GetDouble(1));//1代表該列第1行的值，也就是對應到查詢式中的x\\n                        Console.WriteLine(reader.GetDouble(2));//2代表該列第2行的值，也就是對應到查詢式中的y\\n                    }\\n                }\\n            }\\n        }\\n    }\\n    private static string host = \\\"localhost\\\";\\n    private static string port = \\\"5432\\\";\\n    private static string username = \\\"postgres\\\";\\n    private static string password = \\\"password\\\";\\n    private static string database = \\\"postgis\\\";\\n    private static string connStr = $\\\"Host={host};Port={port};Username={username};Password={password};Database={database};\\\";\\n}\\n```\\n\\n### 方法二：使用NpgsqlDataAdapter將資料放入DataTable\\n```csharp\\nclass Program\\n{\\n    static void Main(string[] args)\\n    {\\n        DataTable dt = ExecuteQuery(\\\"SELECT id,x,y FROM sptable;\\\");\\n\\n        foreach (DataRow row in dt.Rows)\\n        {\\n            Console.WriteLine(\\\"{0} {1} {2}\\\", row[0], row[1], row[2]);//輸出該行的0,1,2個值，分別為id,x,y的值\\n        }\\n    }\\n    public static DataTable ExecuteQuery(string sqlstr)\\n    {\\n        using (NpgsqlConnection pgconn = new NpgsqlConnection(connStr))\\n        {\\n            pgconn.Open();\\n\\n            DataTable dt = new DataTable();//建立一個DataTable\\n\\n            try\\n            {\\n                using (NpgsqlDataAdapter sqladap = new NpgsqlDataAdapter(sqlstr, pgconn))\\n                {\\n                    sqladap.Fill(dt);//使用NpgsqlDataAdapter將資料放入DataTable中\\n                }\\n                return dt;//返回DataTable\\n            }\\n            catch (Exception ex)\\n            {\\n                Console.WriteLine(ex.ToString());\\n                return dt;\\n            }\\n        }\\n    }\\n    private static string host = \\\"localhost\\\";\\n    private static string port = \\\"5432\\\";\\n    private static string username = \\\"postgres\\\";\\n    private static string password = \\\"password\\\";\\n    private static string database = \\\"postgis\\\";\\n    private static string connStr = $\\\"Host={host};Port={port};Username={username};Password={password};Database={database};\\\";\\n}\\n```\"}]],\"markups\":[],\"sections\":[[10,0],[1,\"p\",[]]],\"ghostVersion\":\"3.0\"}","lexical":null,"html":"<!--kg-card-begin: markdown--><h2 id=\"\">環境</h2>\n<ul>\n<li>Windows 10 x64</li>\n<li>Visual Studio Community 2019 v16.2.2</li>\n<li>Npgsql v4.1.4</li>\n</ul>\n<h2 id=\"\">安裝</h2>\n<p>開啟visual studio後點選&quot;<strong>工具</strong>-&gt;<strong>NuGet套件管理員</strong>-&gt;<strong>管理方案的NuGet套件</strong>&quot;<br>\n<img src=\"__GHOST_URL__/content/images/2020/09/1.png\" alt=\"1\" loading=\"lazy\"><br>\n點選Npgsql，勾選右方會執行到此套件的專案，再點選安裝<br>\n<img src=\"__GHOST_URL__/content/images/2020/09/2.png\" alt=\"2\" loading=\"lazy\"><br>\n按確定進行安裝<br>\n<img src=\"__GHOST_URL__/content/images/2020/09/3.png\" alt=\"3\" loading=\"lazy\"></p>\n<h2 id=\"\">建立連線</h2>\n<p>設定好<code>host</code> <code>post</code> <code>username</code> <code>password</code> <code>database</code>等連線資訊後，使用<code>NpgsqlConnection</code>建立一個新連線，再使用Open()方法開啟連線</p>\n<pre><code class=\"language-csharp\">class Program\n{\n    \n    static void Main(string[] args)\n    {\n        string host = &quot;localhost&quot;;\n        string port = &quot;5432&quot;;\n        string username = &quot;postgres&quot;;\n        string password = &quot;password&quot;;\n        string database = &quot;postgis&quot;;\n        string connStr = $&quot;Host={host};Port={port};Username={username};Password={password};Database={database};&quot;;\n        using (NpgsqlConnection pgconn = new NpgsqlConnection(connStr))\n        {\n            pgconn.Open();\n        }\n\n    }\n}\n</code></pre>\n<h2 id=\"\">執行查詢</h2>\n<h3 id=\"npgsqldatareader\">方法一：使用NpgsqlDataReader讀取資料</h3>\n<p>執行查詢必須用到先前建立好的連線和即將要執行的查詢式</p>\n<pre><code class=\"language-csharp\">class Program\n{\n    static void Main(string[] args)\n    {\n        ExecuteQuery(&quot;SELECT id,x,y FROM users;&quot;);\n    }\n    \n    public static void ExecuteQuery(string sqlstr)\n    {\n        using (var pgconn = new NpgsqlConnection(connStr))\n        {\n            pgconn.Open();\n            using (var cmd = new NpgsqlCommand(sqlstr, pgconn))\n            {\n                using (var reader = cmd.ExecuteReader())//使用NpgsqlDataReader讀取資料\n                {\n                    while (reader.Read())//讀取下一列直到沒有數值\n                    {\n                        Console.Write(reader.GetInt32(0));//0代表該列第0行的值，也就是對應到查詢式中的id\n                        Console.Write(reader.GetDouble(1));//1代表該列第1行的值，也就是對應到查詢式中的x\n                        Console.WriteLine(reader.GetDouble(2));//2代表該列第2行的值，也就是對應到查詢式中的y\n                    }\n                }\n            }\n        }\n    }\n    private static string host = &quot;localhost&quot;;\n    private static string port = &quot;5432&quot;;\n    private static string username = &quot;postgres&quot;;\n    private static string password = &quot;password&quot;;\n    private static string database = &quot;postgis&quot;;\n    private static string connStr = $&quot;Host={host};Port={port};Username={username};Password={password};Database={database};&quot;;\n}\n</code></pre>\n<h3 id=\"npgsqldataadapterdatatable\">方法二：使用NpgsqlDataAdapter將資料放入DataTable</h3>\n<pre><code class=\"language-csharp\">class Program\n{\n    static void Main(string[] args)\n    {\n        DataTable dt = ExecuteQuery(&quot;SELECT id,x,y FROM sptable;&quot;);\n\n        foreach (DataRow row in dt.Rows)\n        {\n            Console.WriteLine(&quot;{0} {1} {2}&quot;, row[0], row[1], row[2]);//輸出該行的0,1,2個值，分別為id,x,y的值\n        }\n    }\n    public static DataTable ExecuteQuery(string sqlstr)\n    {\n        using (NpgsqlConnection pgconn = new NpgsqlConnection(connStr))\n        {\n            pgconn.Open();\n\n            DataTable dt = new DataTable();//建立一個DataTable\n\n            try\n            {\n                using (NpgsqlDataAdapter sqladap = new NpgsqlDataAdapter(sqlstr, pgconn))\n                {\n                    sqladap.Fill(dt);//使用NpgsqlDataAdapter將資料放入DataTable中\n                }\n                return dt;//返回DataTable\n            }\n            catch (Exception ex)\n            {\n                Console.WriteLine(ex.ToString());\n                return dt;\n            }\n        }\n    }\n    private static string host = &quot;localhost&quot;;\n    private static string port = &quot;5432&quot;;\n    private static string username = &quot;postgres&quot;;\n    private static string password = &quot;password&quot;;\n    private static string database = &quot;postgis&quot;;\n    private static string connStr = $&quot;Host={host};Port={port};Username={username};Password={password};Database={database};&quot;;\n}\n</code></pre>\n<!--kg-card-end: markdown-->","comment_id":"5f4ffba3a1fe94288c940dc2","plaintext":"環境\n\n\n * Windows 10 x64\n * Visual Studio Community 2019 v16.2.2\n * Npgsql v4.1.4\n\n\n\n安裝\n\n\n開啟visual studio後點選\"工具->NuGet套件管理員->管理方案的NuGet套件\"\n\n\n\n點選Npgsql，勾選右方會執行到此套件的專案，再點選安裝\n\n\n\n按確定進行安裝\n\n\n\n\n\n建立連線\n\n\n設定好host post username password database等連線資訊後，使用NpgsqlConnection建立一個新連線，再使用Open()方法開啟連線\n\n\nclass Program\n{\n    \n    static void Main(string[] args)\n    {\n        string host = \"localhost\";\n        string port = \"5432\";\n        string username = \"postgres\";\n        string password = \"password\";\n        string database = \"postgis\";\n        string connStr = $\"Host={host};Port={port};Username={username};Password={password};Database={database};\";\n        using (NpgsqlConnection pgconn = new NpgsqlConnection(connStr))\n        {\n            pgconn.Open();\n        }\n\n    }\n}\n\n\n\n\n執行查詢\n\n\n\n方法一：使用NpgsqlDataReader讀取資料\n\n\n執行查詢必須用到先前建立好的連線和即將要執行的查詢式\n\n\nclass Program\n{\n    static void Main(string[] args)\n    {\n        ExecuteQuery(\"SELECT id,x,y FROM users;\");\n    }\n    \n    public static void ExecuteQuery(string sqlstr)\n    {\n        using (var pgconn = new NpgsqlConnection(connStr))\n        {\n            pgconn.Open();\n            using (var cmd = new NpgsqlCommand(sqlstr, pgconn))\n            {\n                using (var reader = cmd.ExecuteReader())//使用NpgsqlDataReader讀取資料\n                {\n                    while (reader.Read())//讀取下一列直到沒有數值\n                    {\n                        Console.Write(reader.GetInt32(0));//0代表該列第0行的值，也就是對應到查詢式中的id\n                        Console.Write(reader.GetDouble(1));//1代表該列第1行的值，也就是對應到查詢式中的x\n                        Console.WriteLine(reader.GetDouble(2));//2代表該列第2行的值，也就是對應到查詢式中的y\n                    }\n                }\n            }\n        }\n    }\n    private static string host = \"localhost\";\n    private static string port = \"5432\";\n    private static string username = \"postgres\";\n    private static string password = \"password\";\n    private static string database = \"postgis\";\n    private static string connStr = $\"Host={host};Port={port};Username={username};Password={password};Database={database};\";\n}\n\n\n\n\n方法二：使用NpgsqlDataAdapter將資料放入DataTable\n\n\nclass Program\n{\n    static void Main(string[] args)\n    {\n        DataTable dt = ExecuteQuery(\"SELECT id,x,y FROM sptable;\");\n\n        foreach (DataRow row in dt.Rows)\n        {\n            Console.WriteLine(\"{0} {1} {2}\", row[0], row[1], row[2]);//輸出該行的0,1,2個值，分別為id,x,y的值\n        }\n    }\n    public static DataTable ExecuteQuery(string sqlstr)\n    {\n        using (NpgsqlConnection pgconn = new NpgsqlConnection(connStr))\n        {\n            pgconn.Open();\n\n            DataTable dt = new DataTable();//建立一個DataTable\n\n            try\n            {\n                using (NpgsqlDataAdapter sqladap = new NpgsqlDataAdapter(sqlstr, pgconn))\n                {\n                    sqladap.Fill(dt);//使用NpgsqlDataAdapter將資料放入DataTable中\n                }\n                return dt;//返回DataTable\n            }\n            catch (Exception ex)\n            {\n                Console.WriteLine(ex.ToString());\n                return dt;\n            }\n        }\n    }\n    private static string host = \"localhost\";\n    private static string port = \"5432\";\n    private static string username = \"postgres\";\n    private static string password = \"password\";\n    private static string database = \"postgis\";\n    private static string connStr = $\"Host={host};Port={port};Username={username};Password={password};Database={database};\";\n}\n\n","feature_image":"__GHOST_URL__/content/images/2023/08/dotNET_purple-1.png","featured":0,"type":"post","status":"published","locale":null,"visibility":"public","email_recipient_filter":"none","created_at":"2020-09-02 20:08:03","created_by":"1","updated_at":"2023-08-08 17:37:34","updated_by":"1","published_at":"2020-09-02 20:21:06","published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null,"newsletter_id":null},{"id":"635a816a57207246b927a8b1","uuid":"daf77d74-b103-4171-a71f-53b0363f403b","title":"[Vue]使用Vue CLI建立專案","slug":"vue-vuecli-init","mobiledoc":"{\"version\":\"0.3.1\",\"atoms\":[],\"cards\":[[\"markdown\",{\"markdown\":\"## 環境\\n- Windows10 x64 2004\\n- Node.js - v12.19.0\\n- Vue - @vue/cli 4.5.8\\n\\n## 下載並安裝VueCLI\\n開啟終端機並輸入指令進行安裝\\n```shell=cmd\\nnpm install -g @vue/cli\\n```\\n輸入指令驗證VueCLI版本\\n```shell=cmd\\nvue -V\\n```\\n## 建立Vue專案\\n![1](__GHOST_URL__/content/images/2020/10/1.png)\\n開啟終端機並輸入指令開啟建立專案程式，指令中的`<name>`使用自行定義的專案名稱替換掉\\n```shell=cmd\\nvue create <name>\\n```\\n\\n![2](__GHOST_URL__/content/images/2020/10/2.png)\\n選擇要使用哪項模式建立專案，我們使用Manually select features進行自定義設定\\n\\n![3](__GHOST_URL__/content/images/2020/10/3.png)\\n預設會有三個選項已被勾選，為了防止一直報錯，我們按下方向鍵移動選項到Linter / Formatter並按下空白鍵，暫時將此選項取消勾選\\n\\n接著移動到Choose Vue version並按下Enter鍵選擇Vue版本\\n\\n![4](__GHOST_URL__/content/images/2020/10/4.png)\\n這裡我們選擇使用Vue3的版本\\n\\n![5](__GHOST_URL__/content/images/2020/10/5.png)\\n接著選擇In dedicated config files選項\\n\\n![6](__GHOST_URL__/content/images/2020/10/6.png)\\n輸入y後按下Enter確認以上安裝資訊\\n\\n![7](__GHOST_URL__/content/images/2020/10/7.png)\\n若要將本次的選擇儲存成預設設定可填入名稱紀錄本次設定，下次在下vue create指令時就可以選擇此次的設定建立專案\\n![8](__GHOST_URL__/content/images/2020/10/8.png)\\n\\n![9](__GHOST_URL__/content/images/2020/10/9.png)\\n建立好專案後就可以在目錄內看到Vue的專案檔案了\\n\\n## 設定Vue專案\\n為了確保可以正確讀取assets的內容，我們需要修改@vue/cli-serve/lib/option.js內的參數或是以新增vue.config.js檔案的方式進行設定\\n[Vue配置参考](https://cli.vuejs.org/zh/config) [VueCli設定](http://wm.dyu.edu.tw/testweb/myWeb/)\\n- 於Public資料夾下新增tools資料夾\\n- 在專案**根目錄**新增vue.config.js檔案，並輸入以下內容\\n```javascript\\nmodule.exports = {\\n    productionSourceMap:false,\\n    indexPath: 'index.html',\\n    assetsDir: 'tools',\\n    publicPath : ''\\n}\\n```\\n\\n## 啟動開發者模式伺服器\\n開啟終端機並輸入指令\\n```shell\\nnpm run serve\\n```\\n![10](__GHOST_URL__/content/images/2020/10/10.png)\\n出現Done就代表完成了，點選下方網址便可以使用瀏覽器觀看專案內網頁的狀態囉\\n\\n## 打包檔案\\n當我們寫好網頁之後，我們可以使用build指令將檔案打包，便可以部屬到伺服器上了\\n```shell=cmd\\nnpm run build\\n```\\n執行之後在根目錄裡面出現dist資料夾就是已經打包好的檔案囉\"}]],\"markups\":[],\"sections\":[[1,\"p\",[[0,[],0,\"在之前的課堂裡，我們都是直接開一個html檔案然後把vue寫在裡頭，這次助教介紹了Vue CLI，Vue CLI是一個官方出的工具，可以直接開一個測試用的伺服器，讓開發更方便，並且可以將程式碼打包，方便某些情況下的部屬\"]]],[10,0],[1,\"p\",[]]],\"ghostVersion\":\"3.0\"}","lexical":null,"html":"<p>在之前的課堂裡，我們都是直接開一個html檔案然後把vue寫在裡頭，這次助教介紹了Vue CLI，Vue CLI是一個官方出的工具，可以直接開一個測試用的伺服器，讓開發更方便，並且可以將程式碼打包，方便某些情況下的部屬</p><!--kg-card-begin: markdown--><h2 id=\"\">環境</h2>\n<ul>\n<li>Windows10 x64 2004</li>\n<li>Node.js - v12.19.0</li>\n<li>Vue - @vue/cli 4.5.8</li>\n</ul>\n<h2 id=\"vuecli\">下載並安裝VueCLI</h2>\n<p>開啟終端機並輸入指令進行安裝</p>\n<pre><code class=\"language-shell=cmd\">npm install -g @vue/cli\n</code></pre>\n<p>輸入指令驗證VueCLI版本</p>\n<pre><code class=\"language-shell=cmd\">vue -V\n</code></pre>\n<h2 id=\"vue\">建立Vue專案</h2>\n<p><img src=\"__GHOST_URL__/content/images/2020/10/1.png\" alt=\"1\" loading=\"lazy\"><br>\n開啟終端機並輸入指令開啟建立專案程式，指令中的<code>&lt;name&gt;</code>使用自行定義的專案名稱替換掉</p>\n<pre><code class=\"language-shell=cmd\">vue create &lt;name&gt;\n</code></pre>\n<p><img src=\"__GHOST_URL__/content/images/2020/10/2.png\" alt=\"2\" loading=\"lazy\"><br>\n選擇要使用哪項模式建立專案，我們使用Manually select features進行自定義設定</p>\n<p><img src=\"__GHOST_URL__/content/images/2020/10/3.png\" alt=\"3\" loading=\"lazy\"><br>\n預設會有三個選項已被勾選，為了防止一直報錯，我們按下方向鍵移動選項到Linter / Formatter並按下空白鍵，暫時將此選項取消勾選</p>\n<p>接著移動到Choose Vue version並按下Enter鍵選擇Vue版本</p>\n<p><img src=\"__GHOST_URL__/content/images/2020/10/4.png\" alt=\"4\" loading=\"lazy\"><br>\n這裡我們選擇使用Vue3的版本</p>\n<p><img src=\"__GHOST_URL__/content/images/2020/10/5.png\" alt=\"5\" loading=\"lazy\"><br>\n接著選擇In dedicated config files選項</p>\n<p><img src=\"__GHOST_URL__/content/images/2020/10/6.png\" alt=\"6\" loading=\"lazy\"><br>\n輸入y後按下Enter確認以上安裝資訊</p>\n<p><img src=\"__GHOST_URL__/content/images/2020/10/7.png\" alt=\"7\" loading=\"lazy\"><br>\n若要將本次的選擇儲存成預設設定可填入名稱紀錄本次設定，下次在下vue create指令時就可以選擇此次的設定建立專案<br>\n<img src=\"__GHOST_URL__/content/images/2020/10/8.png\" alt=\"8\" loading=\"lazy\"></p>\n<p><img src=\"__GHOST_URL__/content/images/2020/10/9.png\" alt=\"9\" loading=\"lazy\"><br>\n建立好專案後就可以在目錄內看到Vue的專案檔案了</p>\n<h2 id=\"vue\">設定Vue專案</h2>\n<p>為了確保可以正確讀取assets的內容，我們需要修改@vue/cli-serve/lib/option.js內的參數或是以新增vue.config.js檔案的方式進行設定<br>\n<a href=\"https://cli.vuejs.org/zh/config\">Vue配置参考</a> <a href=\"http://wm.dyu.edu.tw/testweb/myWeb/\">VueCli設定</a></p>\n<ul>\n<li>於Public資料夾下新增tools資料夾</li>\n<li>在專案<strong>根目錄</strong>新增vue.config.js檔案，並輸入以下內容</li>\n</ul>\n<pre><code class=\"language-javascript\">module.exports = {\n    productionSourceMap:false,\n    indexPath: 'index.html',\n    assetsDir: 'tools',\n    publicPath : ''\n}\n</code></pre>\n<h2 id=\"\">啟動開發者模式伺服器</h2>\n<p>開啟終端機並輸入指令</p>\n<pre><code class=\"language-shell\">npm run serve\n</code></pre>\n<p><img src=\"__GHOST_URL__/content/images/2020/10/10.png\" alt=\"10\" loading=\"lazy\"><br>\n出現Done就代表完成了，點選下方網址便可以使用瀏覽器觀看專案內網頁的狀態囉</p>\n<h2 id=\"\">打包檔案</h2>\n<p>當我們寫好網頁之後，我們可以使用build指令將檔案打包，便可以部屬到伺服器上了</p>\n<pre><code class=\"language-shell=cmd\">npm run build\n</code></pre>\n<p>執行之後在根目錄裡面出現dist資料夾就是已經打包好的檔案囉</p>\n<!--kg-card-end: markdown-->","comment_id":"5f986050c88dfb30b47715dc","plaintext":"在之前的課堂裡，我們都是直接開一個html檔案然後把vue寫在裡頭，這次助教介紹了Vue CLI，Vue CLI是一個官方出的工具，可以直接開一個測試用的伺服器，讓開發更方便，並且可以將程式碼打包，方便某些情況下的部屬\n\n\n環境\n\n\n * Windows10 x64 2004\n * Node.js - v12.19.0\n * Vue - @vue/cli 4.5.8\n\n\n\n下載並安裝VueCLI\n\n\n開啟終端機並輸入指令進行安裝\n\n\nnpm install -g @vue/cli\n\n\n\n輸入指令驗證VueCLI版本\n\n\nvue -V\n\n\n\n\n建立Vue專案\n\n\n\n\n開啟終端機並輸入指令開啟建立專案程式，指令中的<name>使用自行定義的專案名稱替換掉\n\n\nvue create <name>\n\n\n\n\n\n選擇要使用哪項模式建立專案，我們使用Manually select features進行自定義設定\n\n\n\n\n預設會有三個選項已被勾選，為了防止一直報錯，我們按下方向鍵移動選項到Linter / Formatter並按下空白鍵，暫時將此選項取消勾選\n\n\n接著移動到Choose Vue version並按下Enter鍵選擇Vue版本\n\n\n\n\n這裡我們選擇使用Vue3的版本\n\n\n\n\n接著選擇In dedicated config files選項\n\n\n\n\n輸入y後按下Enter確認以上安裝資訊\n\n\n\n\n若要將本次的選擇儲存成預設設定可填入名稱紀錄本次設定，下次在下vue create指令時就可以選擇此次的設定建立專案\n\n\n\n\n\n\n建立好專案後就可以在目錄內看到Vue的專案檔案了\n\n\n\n設定Vue專案\n\n\n為了確保可以正確讀取assets的內容，我們需要修改@vue/cli-serve/lib/option.js內的參數或是以新增vue.config.js檔案的方式進行設定\n\nVue配置参考 VueCli設定\n\n\n * 於Public資料夾下新增tools資料夾\n * 在專案根目錄新增vue.config.js檔案，並輸入以下內容\n\n\nmodule.exports = {\n    productionSourceMap:false,\n    indexPath: 'index.html',\n    assetsDir: 'tools',\n    publicPath : ''\n}\n\n\n\n\n啟動開發者模式伺服器\n\n\n開啟終端機並輸入指令\n\n\nnpm run serve\n\n\n\n\n\n出現Done就代表完成了，點選下方網址便可以使用瀏覽器觀看專案內網頁的狀態囉\n\n\n\n打包檔案\n\n\n當我們寫好網頁之後，我們可以使用build指令將檔案打包，便可以部屬到伺服器上了\n\n\nnpm run build\n\n\n\n執行之後在根目錄裡面出現dist資料夾就是已經打包好的檔案囉\n","feature_image":"__GHOST_URL__/content/images/2020/10/vue.jpg","featured":0,"type":"post","status":"published","locale":null,"visibility":"public","email_recipient_filter":"none","created_at":"2020-10-27 18:00:48","created_by":"1","updated_at":"2020-10-27 18:17:14","updated_by":null,"published_at":"2020-10-27 18:13:25","published_by":"1","custom_excerpt":"在之前的課堂裡，我們都是直接開一個html檔案然後把vue寫在裡頭，這次助教介紹了Vue CLI，Vue CLI是一個官方出的工具，可以直接開一個測試用的伺服器，讓開發更方便，並且可以將程式碼打包，方便某些情況下的部屬","codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null,"newsletter_id":null},{"id":"635a816a57207246b927a8b2","uuid":"d37ee044-41fa-4234-9d1f-ab7b789f1006","title":"[Vue]Vuetify安裝與使用","slug":"vue-vuetify-init","mobiledoc":"{\"version\":\"0.3.1\",\"atoms\":[],\"cards\":[[\"markdown\",{\"markdown\":\"## 環境\\n- Windows10 x64 2004\\n- Node.js - 6.12.1\\n- Vue - @vue/cli 4.5.8\\n- vue-cli-plugin-vuetify@2.0.7\\n\\n## 建立Vue專案\\n在使用Vuetify之前必須先建立Vue專案，建立專案的方法請參考[[Vue]使用Vue CLI建立專案](https://vincent87720.github.io/Blog/vue-vuecli-init/index.html)\\n\\n## 將Vuetify加入到專案\\n切換到專案根目錄，並開啟終端機輸入指令，將Vuetify加入到專案\\n```shell\\nvue add vuetify\\n```\\n![1](__GHOST_URL__/content/images/2020/11/1.png)\\n選擇`Default (recommended)`\\n![2](__GHOST_URL__/content/images/2020/11/2.png)\\n安裝完成後在終端機輸入指令啟動開發者模式\\n```shell\\nnpm run serve\\n```\\n![3](__GHOST_URL__/content/images/2020/11/3.png)\\n成功啟動後會顯示網址，在瀏覽器網址列輸入網址即可瀏覽目前專案的狀態\\n在瀏覽器輸入網址執行後，若出現以下畫面代表安裝成功\\n![4](__GHOST_URL__/content/images/2020/11/4.png)\"}]],\"markups\":[],\"sections\":[[1,\"p\",[[0,[],0,\"Vuetify是一個Vue的UI框架，有許多精美和現成的組件可讓我們快速進行網頁排版及呈現，由於這篇文章撰寫時vuetify尚未支援Vue3，所以本篇文章以Vue2為例，示範如何將vuetify加入到Vue2專案中\"]]],[10,0],[1,\"p\",[]]],\"ghostVersion\":\"3.0\"}","lexical":null,"html":"<p>Vuetify是一個Vue的UI框架，有許多精美和現成的組件可讓我們快速進行網頁排版及呈現，由於這篇文章撰寫時vuetify尚未支援Vue3，所以本篇文章以Vue2為例，示範如何將vuetify加入到Vue2專案中</p><!--kg-card-begin: markdown--><h2 id=\"\">環境</h2>\n<ul>\n<li>Windows10 x64 2004</li>\n<li>Node.js - 6.12.1</li>\n<li>Vue - @vue/cli 4.5.8</li>\n<li>vue-cli-plugin-vuetify@2.0.7</li>\n</ul>\n<h2 id=\"vue\">建立Vue專案</h2>\n<p>在使用Vuetify之前必須先建立Vue專案，建立專案的方法請參考<a href=\"https://vincent87720.github.io/Blog/vue-vuecli-init/index.html\">[Vue]使用Vue CLI建立專案</a></p>\n<h2 id=\"vuetify\">將Vuetify加入到專案</h2>\n<p>切換到專案根目錄，並開啟終端機輸入指令，將Vuetify加入到專案</p>\n<pre><code class=\"language-shell\">vue add vuetify\n</code></pre>\n<p><img src=\"__GHOST_URL__/content/images/2020/11/1.png\" alt=\"1\" loading=\"lazy\"><br>\n選擇<code>Default (recommended)</code><br>\n<img src=\"__GHOST_URL__/content/images/2020/11/2.png\" alt=\"2\" loading=\"lazy\"><br>\n安裝完成後在終端機輸入指令啟動開發者模式</p>\n<pre><code class=\"language-shell\">npm run serve\n</code></pre>\n<p><img src=\"__GHOST_URL__/content/images/2020/11/3.png\" alt=\"3\" loading=\"lazy\"><br>\n成功啟動後會顯示網址，在瀏覽器網址列輸入網址即可瀏覽目前專案的狀態<br>\n在瀏覽器輸入網址執行後，若出現以下畫面代表安裝成功<br>\n<img src=\"__GHOST_URL__/content/images/2020/11/4.png\" alt=\"4\" loading=\"lazy\"></p>\n<!--kg-card-end: markdown-->","comment_id":"5fa82780420dbd31a087d3d1","plaintext":"Vuetify是一個Vue的UI框架，有許多精美和現成的組件可讓我們快速進行網頁排版及呈現，由於這篇文章撰寫時vuetify尚未支援Vue3，所以本篇文章以Vue2為例，示範如何將vuetify加入到Vue2專案中\n\n\n環境\n\n\n * Windows10 x64 2004\n * Node.js - 6.12.1\n * Vue - @vue/cli 4.5.8\n * vue-cli-plugin-vuetify@2.0.7\n\n\n\n建立Vue專案\n\n\n在使用Vuetify之前必須先建立Vue專案，建立專案的方法請參考[Vue]使用Vue CLI建立專案\n\n\n\n將Vuetify加入到專案\n\n\n切換到專案根目錄，並開啟終端機輸入指令，將Vuetify加入到專案\n\n\nvue add vuetify\n\n\n\n\n\n選擇Default (recommended)\n\n\n\n安裝完成後在終端機輸入指令啟動開發者模式\n\n\nnpm run serve\n\n\n\n\n\n成功啟動後會顯示網址，在瀏覽器網址列輸入網址即可瀏覽目前專案的狀態\n\n在瀏覽器輸入網址執行後，若出現以下畫面代表安裝成功\n\n\n","feature_image":"__GHOST_URL__/content/images/2020/11/vue.jpg","featured":0,"type":"post","status":"published","locale":null,"visibility":"public","email_recipient_filter":"none","created_at":"2020-11-08 17:14:40","created_by":"1","updated_at":"2020-11-08 17:25:21","updated_by":null,"published_at":"2020-11-08 17:18:40","published_by":"1","custom_excerpt":"Vuetify是一個Vue的UI框架，有許多精美和現成的組件可讓我們快速進行網頁排版及呈現，由於這篇文章撰寫時vuetify尚未支援Vue3，所以本篇文章以Vue2為例，示範如何將vuetify加入到Vue2專案中","codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null,"newsletter_id":null},{"id":"635a816a57207246b927a8b3","uuid":"b8866358-70e4-4b06-a7c0-b393e317b690","title":"[Vue]將Vue-Router加入到專案中","slug":"vue-vuerouter-init","mobiledoc":"{\"version\":\"0.3.1\",\"atoms\":[],\"cards\":[[\"markdown\",{\"markdown\":\"## 環境\\n- Windows10 x64 2004\\n- Node.js - v12.19.0\\n- Vue - @vue/cli 4.5.8\\n- vue-router@3.4.9\\n\\n## 安裝Vue-Router\\n要將Vue-Router加入到專案可使用CDN嵌入，或是使用npm安裝\\n\\n### CDN\\n在`<head></head>`標籤中加入下面這行標籤即可將Vue-Router加入到專案\\n```htmlmixed\\n<head>\\n    <script src=\\\"https://unpkg.com/vue-router/dist/vue-router.js\\\"></script>\\n</head>\\n```\\n\\n### npm\\n開啟終端機，並輸入以下指令，即可安裝Vue-Router\\n```shell\\nnpm install vue-router\\n```\\n\\n## 建立Vue專案\\n在使用Vue-Router之前建議先建立Vue專案，建立專案的方法請參考[[Vue]使用Vue CLI建立專案](https://vincent87720.github.io/Blog/vue-vuecli-init/index.html)\\n\\n## 加入component\\n在已建立好的專案中尋找src資料夾，並在src目錄下新增views目錄\\n![1-1](__GHOST_URL__/content/images/2020/11/1-1.png)\\n在views目錄中放入想要進行切換的component，這邊以Home.vue和About.vue進行示範\\n![2-1](__GHOST_URL__/content/images/2020/11/2-1.png)\\n**Home.vue**\\n```htmlmixed\\n<template>\\n  <div class=\\\"home\\\">\\n    <h1>Home page</h1>\\n  </div>\\n</template>\\n\\n<script>\\nexport default {\\n\\n}\\n</script>\\n\\n```\\n\\n**About.vue**\\n```htmlmixed\\n<template>\\n  <div class=\\\"about\\\">\\n    <h1>About page</h1>\\n  </div>\\n</template>\\n\\n<script>\\nexport default {\\n\\n}\\n</script>\\n\\n```\\n\\n## 建立路由目錄與檔案\\n接著在src目錄下新增router資料夾，並新增index.js檔案\\n![3-1](__GHOST_URL__/content/images/2020/11/3-1.png)\\n在檔案中可自由新增或刪除component，並配置component對應的路由\\n\\n**index.js**\\n```javascript\\nimport Vue from 'vue'\\nimport VueRouter from 'vue-router'\\n\\n//這裡可以自行import需要的component\\nimport Home from '../views/Home.vue'\\nimport About from '../views/About.vue'\\n\\nVue.use(VueRouter)\\n\\n//建立路由routes\\nconst routes = [\\n    {\\n        path: '/',\\n        component: Home\\n    },\\n    {\\n        path: '/About',\\n        component: About\\n    }\\n]\\n\\n//建立Vue-Router的instance，並將routes的配置帶入\\nconst router = new VueRouter({\\n    mode: 'hash',\\n    routes\\n})\\n//匯出成模組給Vue使用\\nexport default router\\n\\n```\\n\\n## 匯入路由\\n![4-1](__GHOST_URL__/content/images/2020/11/4-1.png)\\n在`main.js`中加入以下指令載入router模組\\n```javascript\\nimport router from './router'\\n```\\n並在new Vue中加入router\\n```javascript\\nnew Vue({\\n  router,\\n  render: h => h(App)\\n}).$mount('#app')\\n```\\n\\n**main.js**\\n```javascript\\nimport Vue from 'vue'\\nimport App from './App.vue'\\nimport router from './router'\\n\\nVue.config.productionTip = false\\n\\nnew Vue({\\n  router,\\n  render: h => h(App)\\n}).$mount('#app')\\n\\n```\\n\\n## 加入路由連結\\n在`App.vue`中加入Home和About的連結\\n![5](__GHOST_URL__/content/images/2020/11/5.png)\\n```javascript\\n<router-link to=\\\"/\\\">Home</router-link>|\\n<router-link to=\\\"/About\\\">About</router-link>\\n<router-view></router-view>\\n```\\n\\n**App.vue**\\n```htmlmixed\\n<template>\\n  <v-app>\\n    <v-main>\\n      <router-link to=\\\"/\\\">Home</router-link>|\\n      <router-link to=\\\"/About\\\">About</router-link>\\n      <router-view></router-view>\\n    </v-main>\\n  </v-app>\\n</template>\\n\\n<script>\\n\\nexport default {\\n  name: 'App',\\n\\n  components: {\\n  },\\n\\n  data: () => ({\\n    //\\n  }),\\n};\\n</script>\\n```\\n到這裡我們已經建立好路由了，接著我們使用開發者模式查看成果\\n\\n## 啟動開發者模式\\n在終端機輸入命令啟動開發者模式\\n```shell\\nnpm run serve\\n```\\n![6](__GHOST_URL__/content/images/2020/11/6.png)\\n依照指示在瀏覽器輸入網址\\n\\n## 完成\\n現在已可使用連結切換component!\\n![7](__GHOST_URL__/content/images/2020/11/7.png)\\n![8](__GHOST_URL__/content/images/2020/11/8.png)\"}]],\"markups\":[],\"sections\":[[1,\"p\",[[0,[],0,\"在使用vue時，有時會需要在畫面中切換component，這時vue-router就派上用場啦，vue-router常常被用在single-page application中，這次的期中專題因為要將舊網頁變成single-page app，所以必須先了解如何將vue-router加入到專案中，方便後續使用\"]]],[10,0],[1,\"p\",[]]],\"ghostVersion\":\"3.0\"}","lexical":null,"html":"<p>在使用vue時，有時會需要在畫面中切換component，這時vue-router就派上用場啦，vue-router常常被用在single-page application中，這次的期中專題因為要將舊網頁變成single-page app，所以必須先了解如何將vue-router加入到專案中，方便後續使用</p><!--kg-card-begin: markdown--><h2 id=\"\">環境</h2>\n<ul>\n<li>Windows10 x64 2004</li>\n<li>Node.js - v12.19.0</li>\n<li>Vue - @vue/cli 4.5.8</li>\n<li>vue-router@3.4.9</li>\n</ul>\n<h2 id=\"vuerouter\">安裝Vue-Router</h2>\n<p>要將Vue-Router加入到專案可使用CDN嵌入，或是使用npm安裝</p>\n<h3 id=\"cdn\">CDN</h3>\n<p>在<code>&lt;head&gt;&lt;/head&gt;</code>標籤中加入下面這行標籤即可將Vue-Router加入到專案</p>\n<pre><code class=\"language-htmlmixed\">&lt;head&gt;\n    &lt;script src=&quot;https://unpkg.com/vue-router/dist/vue-router.js&quot;&gt;&lt;/script&gt;\n&lt;/head&gt;\n</code></pre>\n<h3 id=\"npm\">npm</h3>\n<p>開啟終端機，並輸入以下指令，即可安裝Vue-Router</p>\n<pre><code class=\"language-shell\">npm install vue-router\n</code></pre>\n<h2 id=\"vue\">建立Vue專案</h2>\n<p>在使用Vue-Router之前建議先建立Vue專案，建立專案的方法請參考<a href=\"https://vincent87720.github.io/Blog/vue-vuecli-init/index.html\">[Vue]使用Vue CLI建立專案</a></p>\n<h2 id=\"component\">加入component</h2>\n<p>在已建立好的專案中尋找src資料夾，並在src目錄下新增views目錄<br>\n<img src=\"__GHOST_URL__/content/images/2020/11/1-1.png\" alt=\"1-1\" loading=\"lazy\"><br>\n在views目錄中放入想要進行切換的component，這邊以Home.vue和About.vue進行示範<br>\n<img src=\"__GHOST_URL__/content/images/2020/11/2-1.png\" alt=\"2-1\" loading=\"lazy\"><br>\n<strong>Home.vue</strong></p>\n<pre><code class=\"language-htmlmixed\">&lt;template&gt;\n  &lt;div class=&quot;home&quot;&gt;\n    &lt;h1&gt;Home page&lt;/h1&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nexport default {\n\n}\n&lt;/script&gt;\n\n</code></pre>\n<p><strong>About.vue</strong></p>\n<pre><code class=\"language-htmlmixed\">&lt;template&gt;\n  &lt;div class=&quot;about&quot;&gt;\n    &lt;h1&gt;About page&lt;/h1&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nexport default {\n\n}\n&lt;/script&gt;\n\n</code></pre>\n<h2 id=\"\">建立路由目錄與檔案</h2>\n<p>接著在src目錄下新增router資料夾，並新增index.js檔案<br>\n<img src=\"__GHOST_URL__/content/images/2020/11/3-1.png\" alt=\"3-1\" loading=\"lazy\"><br>\n在檔案中可自由新增或刪除component，並配置component對應的路由</p>\n<p><strong>index.js</strong></p>\n<pre><code class=\"language-javascript\">import Vue from 'vue'\nimport VueRouter from 'vue-router'\n\n//這裡可以自行import需要的component\nimport Home from '../views/Home.vue'\nimport About from '../views/About.vue'\n\nVue.use(VueRouter)\n\n//建立路由routes\nconst routes = [\n    {\n        path: '/',\n        component: Home\n    },\n    {\n        path: '/About',\n        component: About\n    }\n]\n\n//建立Vue-Router的instance，並將routes的配置帶入\nconst router = new VueRouter({\n    mode: 'hash',\n    routes\n})\n//匯出成模組給Vue使用\nexport default router\n\n</code></pre>\n<h2 id=\"\">匯入路由</h2>\n<p><img src=\"__GHOST_URL__/content/images/2020/11/4-1.png\" alt=\"4-1\" loading=\"lazy\"><br>\n在<code>main.js</code>中加入以下指令載入router模組</p>\n<pre><code class=\"language-javascript\">import router from './router'\n</code></pre>\n<p>並在new Vue中加入router</p>\n<pre><code class=\"language-javascript\">new Vue({\n  router,\n  render: h =&gt; h(App)\n}).$mount('#app')\n</code></pre>\n<p><strong>main.js</strong></p>\n<pre><code class=\"language-javascript\">import Vue from 'vue'\nimport App from './App.vue'\nimport router from './router'\n\nVue.config.productionTip = false\n\nnew Vue({\n  router,\n  render: h =&gt; h(App)\n}).$mount('#app')\n\n</code></pre>\n<h2 id=\"\">加入路由連結</h2>\n<p>在<code>App.vue</code>中加入Home和About的連結<br>\n<img src=\"__GHOST_URL__/content/images/2020/11/5.png\" alt=\"5\" loading=\"lazy\"></p>\n<pre><code class=\"language-javascript\">&lt;router-link to=&quot;/&quot;&gt;Home&lt;/router-link&gt;|\n&lt;router-link to=&quot;/About&quot;&gt;About&lt;/router-link&gt;\n&lt;router-view&gt;&lt;/router-view&gt;\n</code></pre>\n<p><strong>App.vue</strong></p>\n<pre><code class=\"language-htmlmixed\">&lt;template&gt;\n  &lt;v-app&gt;\n    &lt;v-main&gt;\n      &lt;router-link to=&quot;/&quot;&gt;Home&lt;/router-link&gt;|\n      &lt;router-link to=&quot;/About&quot;&gt;About&lt;/router-link&gt;\n      &lt;router-view&gt;&lt;/router-view&gt;\n    &lt;/v-main&gt;\n  &lt;/v-app&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\n\nexport default {\n  name: 'App',\n\n  components: {\n  },\n\n  data: () =&gt; ({\n    //\n  }),\n};\n&lt;/script&gt;\n</code></pre>\n<p>到這裡我們已經建立好路由了，接著我們使用開發者模式查看成果</p>\n<h2 id=\"\">啟動開發者模式</h2>\n<p>在終端機輸入命令啟動開發者模式</p>\n<pre><code class=\"language-shell\">npm run serve\n</code></pre>\n<p><img src=\"__GHOST_URL__/content/images/2020/11/6.png\" alt=\"6\" loading=\"lazy\"><br>\n依照指示在瀏覽器輸入網址</p>\n<h2 id=\"\">完成</h2>\n<p>現在已可使用連結切換component!<br>\n<img src=\"__GHOST_URL__/content/images/2020/11/7.png\" alt=\"7\" loading=\"lazy\"><br>\n<img src=\"__GHOST_URL__/content/images/2020/11/8.png\" alt=\"8\" loading=\"lazy\"></p>\n<!--kg-card-end: markdown-->","comment_id":"5faab3648214a931cca9350d","plaintext":"在使用vue時，有時會需要在畫面中切換component，這時vue-router就派上用場啦，vue-router常常被用在single-page application中，這次的期中專題因為要將舊網頁變成single-page app，所以必須先了解如何將vue-router加入到專案中，方便後續使用\n\n\n環境\n\n\n * Windows10 x64 2004\n * Node.js - v12.19.0\n * Vue - @vue/cli 4.5.8\n * vue-router@3.4.9\n\n\n\n安裝Vue-Router\n\n\n要將Vue-Router加入到專案可使用CDN嵌入，或是使用npm安裝\n\n\n\nCDN\n\n\n在<head></head>標籤中加入下面這行標籤即可將Vue-Router加入到專案\n\n\n<head>\n    <script src=\"https://unpkg.com/vue-router/dist/vue-router.js\"></script>\n</head>\n\n\n\n\nnpm\n\n\n開啟終端機，並輸入以下指令，即可安裝Vue-Router\n\n\nnpm install vue-router\n\n\n\n\n建立Vue專案\n\n\n在使用Vue-Router之前建議先建立Vue專案，建立專案的方法請參考[Vue]使用Vue CLI建立專案\n\n\n\n加入component\n\n\n在已建立好的專案中尋找src資料夾，並在src目錄下新增views目錄\n\n\n\n在views目錄中放入想要進行切換的component，這邊以Home.vue和About.vue進行示範\n\n\n\nHome.vue\n\n\n<template>\n  <div class=\"home\">\n    <h1>Home page</h1>\n  </div>\n</template>\n\n<script>\nexport default {\n\n}\n</script>\n\n\n\n\nAbout.vue\n\n\n<template>\n  <div class=\"about\">\n    <h1>About page</h1>\n  </div>\n</template>\n\n<script>\nexport default {\n\n}\n</script>\n\n\n\n\n\n建立路由目錄與檔案\n\n\n接著在src目錄下新增router資料夾，並新增index.js檔案\n\n\n\n在檔案中可自由新增或刪除component，並配置component對應的路由\n\n\nindex.js\n\n\nimport Vue from 'vue'\nimport VueRouter from 'vue-router'\n\n//這裡可以自行import需要的component\nimport Home from '../views/Home.vue'\nimport About from '../views/About.vue'\n\nVue.use(VueRouter)\n\n//建立路由routes\nconst routes = [\n    {\n        path: '/',\n        component: Home\n    },\n    {\n        path: '/About',\n        component: About\n    }\n]\n\n//建立Vue-Router的instance，並將routes的配置帶入\nconst router = new VueRouter({\n    mode: 'hash',\n    routes\n})\n//匯出成模組給Vue使用\nexport default router\n\n\n\n\n\n匯入路由\n\n\n\n\n在main.js中加入以下指令載入router模組\n\n\nimport router from './router'\n\n\n\n並在new Vue中加入router\n\n\nnew Vue({\n  router,\n  render: h => h(App)\n}).$mount('#app')\n\n\n\nmain.js\n\n\nimport Vue from 'vue'\nimport App from './App.vue'\nimport router from './router'\n\nVue.config.productionTip = false\n\nnew Vue({\n  router,\n  render: h => h(App)\n}).$mount('#app')\n\n\n\n\n\n加入路由連結\n\n\n在App.vue中加入Home和About的連結\n\n\n\n\n<router-link to=\"/\">Home</router-link>|\n<router-link to=\"/About\">About</router-link>\n<router-view></router-view>\n\n\n\nApp.vue\n\n\n<template>\n  <v-app>\n    <v-main>\n      <router-link to=\"/\">Home</router-link>|\n      <router-link to=\"/About\">About</router-link>\n      <router-view></router-view>\n    </v-main>\n  </v-app>\n</template>\n\n<script>\n\nexport default {\n  name: 'App',\n\n  components: {\n  },\n\n  data: () => ({\n    //\n  }),\n};\n</script>\n\n\n\n到這裡我們已經建立好路由了，接著我們使用開發者模式查看成果\n\n\n\n啟動開發者模式\n\n\n在終端機輸入命令啟動開發者模式\n\n\nnpm run serve\n\n\n\n\n\n依照指示在瀏覽器輸入網址\n\n\n\n完成\n\n\n現在已可使用連結切換component!\n\n\n\n\n","feature_image":"__GHOST_URL__/content/images/2020/11/vue-1.jpg","featured":0,"type":"post","status":"published","locale":null,"visibility":"public","email_recipient_filter":"none","created_at":"2020-11-10 15:36:04","created_by":"1","updated_at":"2020-11-10 15:39:37","updated_by":null,"published_at":"2020-11-10 15:39:37","published_by":"1","custom_excerpt":"在使用vue時，有時會需要在畫面中切換component，這時vue-router就派上用場啦，vue-router常常被用在single-page application中，這次的期中專題因為要將舊網頁變成single-page app，所以必須先了解如何將vue-router加入到專案中，方便後續使用","codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null,"newsletter_id":null},{"id":"635a816a57207246b927a8b5","uuid":"33469502-846c-4501-ad31-859c4942a123","title":"[MQTT]Mosquitto Server 安裝與啟動","slug":"mqtt-mosquitto-server-init","mobiledoc":"{\"version\":\"0.3.1\",\"atoms\":[],\"cards\":[[\"markdown\",{\"markdown\":\"## 環境\\n- Windows10 x64 2004\\n- mosquitto-1.6.12a\\n\\n## 下載\\n進入[Mosquitto-Download](https://mosquitto.org/download/)下載頁面進行下載\\n![1-2](__GHOST_URL__/content/images/2020/11/1-2.png)\\n\\n## 安裝\\n點擊已下載完成的安裝檔進行安裝\\n![2-2](__GHOST_URL__/content/images/2020/11/2-2.png)\\n![3-2](__GHOST_URL__/content/images/2020/11/3-2.png)\\n可選擇安裝路徑\\n![4-2](__GHOST_URL__/content/images/2020/11/4-2.png)\\n安裝完成\\n![5-1](__GHOST_URL__/content/images/2020/11/5-1.png)\\n\\n## 啟動\\n使用**工作管理員**或**執行**開啟**服務**功能\\n\\n### 使用工作管理員開啟服務\\n在開始列點選右鍵，點擊\\\"工作管理員\\\"以開啟\\n![6-1](__GHOST_URL__/content/images/2020/11/6-1.png)\\n### 使用執行開啟服務\\n按下快捷鍵`windows+R`並輸入services.msc開啟服務功能\\n![7-1](__GHOST_URL__/content/images/2020/11/7-1.png)\\n\\n尋找mosquitto並點選右鍵啟動服務\\n![8-1](__GHOST_URL__/content/images/2020/11/8-1.png)\\n![9](__GHOST_URL__/content/images/2020/11/9.png)\\n\\n## 查看伺服器狀態\\n在終端機輸入`netstat -an`查看作用中的連線，以檢查伺服器是否正常運行\\n![10](__GHOST_URL__/content/images/2020/11/10.png)\\n\\n## 在防火牆中開啟連接埠\\n進入控制台 > 系統及安全性 > Windows Defender防火牆 > 進階設定，或直接按下快捷鍵`windows+R`並輸入WF.msc，開啟**具有進階安全性的 Windows Defender 防火牆**\\n\\n在**輸入規則**中點選新增規則\\n![11](__GHOST_URL__/content/images/2020/11/11.png)\\n建立指定連接埠的規則\\n![12](__GHOST_URL__/content/images/2020/11/12.png)\\n輸入1883連接埠進行設定\\n![13](__GHOST_URL__/content/images/2020/11/13.png)\\n![14](__GHOST_URL__/content/images/2020/11/14.png)\\n![15](__GHOST_URL__/content/images/2020/11/15.png)\\n指定規則名稱\\n![16](__GHOST_URL__/content/images/2020/11/16.png)\\n\\n## 安裝完成\\n完成以上設定後就可以透過1883連接埠對MQTT Server進行連線啦\"}]],\"markups\":[],\"sections\":[[1,\"p\",[[0,[],0,\"在使用MQTT進行資料傳遞時，會需要一個代理人，也就是MQTT Broker，作為訂閱/發布的橋樑，Mosquitto Server是一個開源的MQTT的Server，本篇筆記紀錄在Windows下如何安裝並開啟MQTT Server\"]]],[10,0],[1,\"p\",[]]],\"ghostVersion\":\"3.0\"}","lexical":null,"html":"<p>在使用MQTT進行資料傳遞時，會需要一個代理人，也就是MQTT Broker，作為訂閱/發布的橋樑，Mosquitto Server是一個開源的MQTT的Server，本篇筆記紀錄在Windows下如何安裝並開啟MQTT Server</p><!--kg-card-begin: markdown--><h2 id=\"\">環境</h2>\n<ul>\n<li>Windows10 x64 2004</li>\n<li>mosquitto-1.6.12a</li>\n</ul>\n<h2 id=\"\">下載</h2>\n<p>進入<a href=\"https://mosquitto.org/download/\">Mosquitto-Download</a>下載頁面進行下載<br>\n<img src=\"__GHOST_URL__/content/images/2020/11/1-2.png\" alt=\"1-2\" loading=\"lazy\"></p>\n<h2 id=\"\">安裝</h2>\n<p>點擊已下載完成的安裝檔進行安裝<br>\n<img src=\"__GHOST_URL__/content/images/2020/11/2-2.png\" alt=\"2-2\" loading=\"lazy\"><br>\n<img src=\"__GHOST_URL__/content/images/2020/11/3-2.png\" alt=\"3-2\" loading=\"lazy\"><br>\n可選擇安裝路徑<br>\n<img src=\"__GHOST_URL__/content/images/2020/11/4-2.png\" alt=\"4-2\" loading=\"lazy\"><br>\n安裝完成<br>\n<img src=\"__GHOST_URL__/content/images/2020/11/5-1.png\" alt=\"5-1\" loading=\"lazy\"></p>\n<h2 id=\"\">啟動</h2>\n<p>使用<strong>工作管理員</strong>或<strong>執行</strong>開啟<strong>服務</strong>功能</p>\n<h3 id=\"\">使用工作管理員開啟服務</h3>\n<p>在開始列點選右鍵，點擊&quot;工作管理員&quot;以開啟<br>\n<img src=\"__GHOST_URL__/content/images/2020/11/6-1.png\" alt=\"6-1\" loading=\"lazy\"></p>\n<h3 id=\"\">使用執行開啟服務</h3>\n<p>按下快捷鍵<code>windows+R</code>並輸入services.msc開啟服務功能<br>\n<img src=\"__GHOST_URL__/content/images/2020/11/7-1.png\" alt=\"7-1\" loading=\"lazy\"></p>\n<p>尋找mosquitto並點選右鍵啟動服務<br>\n<img src=\"__GHOST_URL__/content/images/2020/11/8-1.png\" alt=\"8-1\" loading=\"lazy\"><br>\n<img src=\"__GHOST_URL__/content/images/2020/11/9.png\" alt=\"9\" loading=\"lazy\"></p>\n<h2 id=\"\">查看伺服器狀態</h2>\n<p>在終端機輸入<code>netstat -an</code>查看作用中的連線，以檢查伺服器是否正常運行<br>\n<img src=\"__GHOST_URL__/content/images/2020/11/10.png\" alt=\"10\" loading=\"lazy\"></p>\n<h2 id=\"\">在防火牆中開啟連接埠</h2>\n<p>進入控制台 &gt; 系統及安全性 &gt; Windows Defender防火牆 &gt; 進階設定，或直接按下快捷鍵<code>windows+R</code>並輸入WF.msc，開啟<strong>具有進階安全性的 Windows Defender 防火牆</strong></p>\n<p>在<strong>輸入規則</strong>中點選新增規則<br>\n<img src=\"__GHOST_URL__/content/images/2020/11/11.png\" alt=\"11\" loading=\"lazy\"><br>\n建立指定連接埠的規則<br>\n<img src=\"__GHOST_URL__/content/images/2020/11/12.png\" alt=\"12\" loading=\"lazy\"><br>\n輸入1883連接埠進行設定<br>\n<img src=\"__GHOST_URL__/content/images/2020/11/13.png\" alt=\"13\" loading=\"lazy\"><br>\n<img src=\"__GHOST_URL__/content/images/2020/11/14.png\" alt=\"14\" loading=\"lazy\"><br>\n<img src=\"__GHOST_URL__/content/images/2020/11/15.png\" alt=\"15\" loading=\"lazy\"><br>\n指定規則名稱<br>\n<img src=\"__GHOST_URL__/content/images/2020/11/16.png\" alt=\"16\" loading=\"lazy\"></p>\n<h2 id=\"\">安裝完成</h2>\n<p>完成以上設定後就可以透過1883連接埠對MQTT Server進行連線啦</p>\n<!--kg-card-end: markdown-->","comment_id":"5fbd476923e6d4238ca4b81e","plaintext":"在使用MQTT進行資料傳遞時，會需要一個代理人，也就是MQTT Broker，作為訂閱/發布的橋樑，Mosquitto Server是一個開源的MQTT的Server，本篇筆記紀錄在Windows下如何安裝並開啟MQTT Server\n\n\n環境\n\n\n * Windows10 x64 2004\n * mosquitto-1.6.12a\n\n\n\n下載\n\n\n進入Mosquitto-Download下載頁面進行下載\n\n\n\n\n\n安裝\n\n\n點擊已下載完成的安裝檔進行安裝\n\n\n\n\n\n可選擇安裝路徑\n\n\n\n安裝完成\n\n\n\n\n\n啟動\n\n\n使用工作管理員或執行開啟服務功能\n\n\n\n使用工作管理員開啟服務\n\n\n在開始列點選右鍵，點擊\"工作管理員\"以開啟\n\n\n\n\n\n使用執行開啟服務\n\n\n按下快捷鍵windows+R並輸入services.msc開啟服務功能\n\n\n\n\n尋找mosquitto並點選右鍵啟動服務\n\n\n\n\n\n\n\n查看伺服器狀態\n\n\n在終端機輸入netstat -an查看作用中的連線，以檢查伺服器是否正常運行\n\n\n\n\n\n在防火牆中開啟連接埠\n\n\n進入控制台 > 系統及安全性 > Windows Defender防火牆 > 進階設定，或直接按下快捷鍵windows+R並輸入WF.msc，開啟具有進階安全性的 Windows Defender 防火牆\n\n\n在輸入規則中點選新增規則\n\n\n\n建立指定連接埠的規則\n\n\n\n輸入1883連接埠進行設定\n\n\n\n\n\n\n\n指定規則名稱\n\n\n\n\n\n安裝完成\n\n\n完成以上設定後就可以透過1883連接埠對MQTT Server進行連線啦\n","feature_image":"__GHOST_URL__/content/images/2020/11/MQTT.png","featured":0,"type":"post","status":"published","locale":null,"visibility":"public","email_recipient_filter":"none","created_at":"2020-11-24 17:48:25","created_by":"1","updated_at":"2020-11-24 18:53:17","updated_by":null,"published_at":"2020-11-24 18:53:17","published_by":"1","custom_excerpt":"在使用MQTT進行資料傳遞時，會需要一個代理人，也就是MQTT Broker，作為訂閱/發布的橋樑，Mosquitto Server是一個開源的MQTT的Server，本篇筆記紀錄在Windows下如何安裝並開啟MQTT Server","codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null,"newsletter_id":null},{"id":"635a816a57207246b927a8b6","uuid":"4467cc8e-35f2-492d-bc4c-d0251bb4f3c4","title":"[IDE]在Visual Studio Code中使用MSYS作為終端機","slug":"ide-vscode-terminal-using-msys","mobiledoc":"{\"version\":\"0.3.1\",\"atoms\":[],\"cards\":[[\"markdown\",{\"markdown\":\"因為需要用到Makefile的緣故，而windows沒有提供相關的功能，所以希望能夠把Visual studio code預設的powershell改為MSYS作為終端機，便於make指令的操作\\n\\n## 環境\\n- Windows10 x64 2004\\n- MSYS2\\n- Visual Studio Code 1.52.1\\n\\n## 開啟Visual studio code的settings.json\\n### 開啟設定介面\\n#### 方法1 : 使用選單開啟\\n點選左上角的File > Preferences > Settings\\n![1](__GHOST_URL__/content/images/2021/01/1.png)\\n#### 方法2 : 使用快捷鍵開啟\\n點擊空白處並按下快捷鍵`ctrl`+`,`\\n\\n### 設定settings.json\\n點選右上角的OpenSettings(JSON)按鈕\\n![2](__GHOST_URL__/content/images/2021/01/2.png)\\n\\n### 在大括號中加入以下設定\\n```json\\n    \\\"terminal.integrated.shell.windows\\\": \\\"C:\\\\\\\\msys64\\\\\\\\usr\\\\\\\\bin\\\\\\\\bash.exe\\\",\\n    \\\"terminal.integrated.shellArgs.windows\\\": [\\\"--login\\\", \\\"-i\\\"],\\n```\\n*注意! \\\"terminal.integrated.shell.windows\\\"設定的路徑需依照自己電腦上MSYS的路徑進行設定*\\n![3](__GHOST_URL__/content/images/2021/01/3.png)\\n\\n### 完成\\n修改後重新開啟終端機就可以使用MSYS2作為終端機了\\n![4](__GHOST_URL__/content/images/2021/01/4.png)\"}]],\"markups\":[],\"sections\":[[10,0],[1,\"p\",[]]],\"ghostVersion\":\"3.0\"}","lexical":null,"html":"<!--kg-card-begin: markdown--><p>因為需要用到Makefile的緣故，而windows沒有提供相關的功能，所以希望能夠把Visual studio code預設的powershell改為MSYS作為終端機，便於make指令的操作</p>\n<h2 id=\"\">環境</h2>\n<ul>\n<li>Windows10 x64 2004</li>\n<li>MSYS2</li>\n<li>Visual Studio Code 1.52.1</li>\n</ul>\n<h2 id=\"visualstudiocodesettingsjson\">開啟Visual studio code的settings.json</h2>\n<h3 id=\"\">開啟設定介面</h3>\n<h4 id=\"1\">方法1 : 使用選單開啟</h4>\n<p>點選左上角的File &gt; Preferences &gt; Settings<br>\n<img src=\"__GHOST_URL__/content/images/2021/01/1.png\" alt=\"1\" loading=\"lazy\"></p>\n<h4 id=\"2\">方法2 : 使用快捷鍵開啟</h4>\n<p>點擊空白處並按下快捷鍵<code>ctrl</code>+<code>,</code></p>\n<h3 id=\"settingsjson\">設定settings.json</h3>\n<p>點選右上角的OpenSettings(JSON)按鈕<br>\n<img src=\"__GHOST_URL__/content/images/2021/01/2.png\" alt=\"2\" loading=\"lazy\"></p>\n<h3 id=\"\">在大括號中加入以下設定</h3>\n<pre><code class=\"language-json\">    &quot;terminal.integrated.shell.windows&quot;: &quot;C:\\\\msys64\\\\usr\\\\bin\\\\bash.exe&quot;,\n    &quot;terminal.integrated.shellArgs.windows&quot;: [&quot;--login&quot;, &quot;-i&quot;],\n</code></pre>\n<p><em>注意! &quot;terminal.integrated.shell.windows&quot;設定的路徑需依照自己電腦上MSYS的路徑進行設定</em><br>\n<img src=\"__GHOST_URL__/content/images/2021/01/3.png\" alt=\"3\" loading=\"lazy\"></p>\n<h3 id=\"\">完成</h3>\n<p>修改後重新開啟終端機就可以使用MSYS2作為終端機了<br>\n<img src=\"__GHOST_URL__/content/images/2021/01/4.png\" alt=\"4\" loading=\"lazy\"></p>\n<!--kg-card-end: markdown-->","comment_id":"60095c7f31b2a401081db783","plaintext":"因為需要用到Makefile的緣故，而windows沒有提供相關的功能，所以希望能夠把Visual studio code預設的powershell改為MSYS作為終端機，便於make指令的操作\n\n\n\n環境\n\n\n * Windows10 x64 2004\n * MSYS2\n * Visual Studio Code 1.52.1\n\n\n\n開啟Visual studio code的settings.json\n\n\n\n開啟設定介面\n\n\n方法1 : 使用選單開啟\n\n\n點選左上角的File > Preferences > Settings\n\n\n\n\n方法2 : 使用快捷鍵開啟\n\n\n點擊空白處並按下快捷鍵ctrl+,\n\n\n\n設定settings.json\n\n\n點選右上角的OpenSettings(JSON)按鈕\n\n\n\n\n\n在大括號中加入以下設定\n\n\n    \"terminal.integrated.shell.windows\": \"C:\\\\msys64\\\\usr\\\\bin\\\\bash.exe\",\n    \"terminal.integrated.shellArgs.windows\": [\"--login\", \"-i\"],\n\n\n\n注意! \"terminal.integrated.shell.windows\"設定的路徑需依照自己電腦上MSYS的路徑進行設定\n\n\n\n\n\n完成\n\n\n修改後重新開啟終端機就可以使用MSYS2作為終端機了\n\n\n","feature_image":"__GHOST_URL__/content/images/2021/01/visualStudioCode.png","featured":0,"type":"post","status":"published","locale":null,"visibility":"public","email_recipient_filter":"none","created_at":"2021-01-21 10:50:39","created_by":"1","updated_at":"2021-01-21 11:04:37","updated_by":null,"published_at":"2021-01-21 10:59:50","published_by":"1","custom_excerpt":"因為需要用到Makefile的緣故，而windows沒有提供相關的功能，所以希望能夠把Visual studio code預設的powershell改為MSYS作為終端機，便於make指令的操作","codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null,"newsletter_id":null},{"id":"635a816a57207246b927a8b7","uuid":"32131f9e-2bcd-4102-aae0-e5d2bd6e4473","title":"[ESP8266]ESP-01韌體燒錄","slug":"flash-firmware-on-esp01","mobiledoc":"{\"version\":\"0.3.1\",\"atoms\":[],\"cards\":[[\"markdown\",{\"markdown\":\"## 材料\\n### 硬體\\n- ESP-01s\\n- ESP-01燒錄器\\n\\n### 軟體\\n- Flash Download Tools (ESP8266 & ESP32 & ESP32-S2) V3.8.5\\n- RealTerm 2.0.0.70\\n\\n### SDK\\n- ESP8266 NONOS SDK V3.0.4\\n\\n### AT指令集(含韌體燒錄位址說明)\\n- ESP8266 Non-OS AT Instruction Set V3.0.3\\n\\n## 準備所需軟體及韌體\\n點擊下方連結下載燒錄工具、韌體及指令集\\n- [ESP8266 NONOS SDK](https://www.espressif.com/en/support/download/sdks-demos)\\n- [Flash Download Tools](https://www.espressif.com/en/support/download/other-tools)\\n- [ESP8266 Non-OS AT Instruction Set](https://www.espressif.com/en/support/documents/technical-documents)\\n\\n## 連接ESP-01\\n將ESP-01插在燒錄器上，並將燒錄器插入USB Port\\n接著按下`Windows鍵+R`，輸入**devmgmt.msc**按下確定，進入裝置管理員查看燒錄器的COM Port(範例為COM7)\\n![1](__GHOST_URL__/content/images/2021/02/1.png)\\n\\n\\n## 設定燒錄資訊\\n點擊`flash_download_tool_3.8.5.exe`執行燒錄程式\\n![2](__GHOST_URL__/content/images/2021/02/2.png)\\n\\n選擇`Developer Mode`\\n![3](__GHOST_URL__/content/images/2021/02/3.png)\\n\\n選擇`ESP8266 DownloadTool`\\n![4](__GHOST_URL__/content/images/2021/02/4.png)\\n\\n韌體燒錄位址表在`AT指令集`裡可以找到，在**1.2. Downloading AT Firmware into the Flash**裡的**1.2.4. 8 Mbit Flash**有詳細說明\\n![5](__GHOST_URL__/content/images/2021/02/5.png)\\n\\n![6](__GHOST_URL__/content/images/2021/02/6.png)\\n\\n\\n解壓縮已經下載好的`ESP8266_NONOS_SDK-3.0.4`檔案，在裡面尋找bin資料夾，裡面的檔案就是燒錄所需的檔案，依照韌體燒錄位址表進行設定，將特定檔案對上相對的位址，並將左邊方格打勾\\n\\n`FLASH SIZE`記得要改為8Mbit(ESP-01的Flash size為1MB，也就是8Mbit)\\n\\n右下角的COM選單選擇剛才在裝置管理員看到的COM Port編號\\n\\nBAUD設為**115200**\\n\\n![7](__GHOST_URL__/content/images/2021/02/7.png)\\n\\n## 執行韌體燒錄程式\\n\\n設定完成之後按下`START`按鈕便可開始進行燒錄\\n\\n若有抓到ESP-01會顯示**Download下載中...**，後面的方格也會顯示ESP-01的MAC位址\\n\\n![8](__GHOST_URL__/content/images/2021/02/8.png)\\n\\n若燒錄成功會顯示**FINISH完成**\\n\\n![9](__GHOST_URL__/content/images/2021/02/9.png)\\n\\n\\n\\n## 檢查燒錄狀態\\n開啟RealTerm終端機程式\\n\\n在**Display**頁籤設定Display As **Ansi**\\n![10](__GHOST_URL__/content/images/2021/02/10.png)\\n\\n\\n在**Port**頁籤設定\\n- Baud為**115200**(若無回應可嘗試其他BaudRate)\\n- Port為USB燒錄器的COM Port編號(可至裝置管理員確認，或移除裝置後重新插上以便確認)\\n- 重新按壓Open按鈕，確認為壓下狀態(有任何更改都可以重新按壓，確保狀態有被改變)\\n- 確認右下角狀態是否正確\\n\\n![11](__GHOST_URL__/content/images/2021/02/11.png)\\n\\n在**Send**頁籤**勾選EOL的前兩個**，輸入要傳送的指令後按下Send ASCII即可傳送指令\\n- AT - 測試AT是否已啟動\\n- AT+GMR - 查詢AT及SDK的版本資訊\\n\\n![12](__GHOST_URL__/content/images/2021/02/12.png)\\n\\n![13](__GHOST_URL__/content/images/2021/02/13.png)\\n\\n若送出指令AT有返回OK，且送出指令AT+GMR有返回版本資訊便可開始使用ESP-01了\\n\\n\\n## 參考資料\\n[ESPRESSIF](https://www.espressif.com/en)\\n[ESP8266 NONOS SDK](https://www.espressif.com/en/support/download/sdks-demos)\\n[Flash Download Tools](https://www.espressif.com/en/support/download/other-tools)\\n[ESP8266 Non-OS AT Instruction Set](https://www.espressif.com/en/support/documents/technical-documents)\\n[ESP8266 ESP-01s測試(01)利用USB 轉TTL模組](https://laoweizz.blogspot.com/2017/02/esp8266-esp-01s-01-usb-ttl-esp6288-wifi.html)\"}]],\"markups\":[],\"sections\":[[1,\"p\",[[0,[],0,\"在使用ESP8266有時會遇到兩種情況，原廠出貨的韌體怪怪的導致無法使用AT指令跟ESP8266溝通，或是已經把自己的程式燒進去之後又想重新使用AT指令的功能，這時候就需要重新燒錄韌體，這篇筆記紀錄使用ESP-01作為範例的韌體燒錄及AT指令驗證步驟\"]]],[10,0],[1,\"p\",[]]],\"ghostVersion\":\"3.0\"}","lexical":null,"html":"<p>在使用ESP8266有時會遇到兩種情況，原廠出貨的韌體怪怪的導致無法使用AT指令跟ESP8266溝通，或是已經把自己的程式燒進去之後又想重新使用AT指令的功能，這時候就需要重新燒錄韌體，這篇筆記紀錄使用ESP-01作為範例的韌體燒錄及AT指令驗證步驟</p><!--kg-card-begin: markdown--><h2 id=\"\">材料</h2>\n<h3 id=\"\">硬體</h3>\n<ul>\n<li>ESP-01s</li>\n<li>ESP-01燒錄器</li>\n</ul>\n<h3 id=\"\">軟體</h3>\n<ul>\n<li>Flash Download Tools (ESP8266 &amp; ESP32 &amp; ESP32-S2) V3.8.5</li>\n<li>RealTerm 2.0.0.70</li>\n</ul>\n<h3 id=\"sdk\">SDK</h3>\n<ul>\n<li>ESP8266 NONOS SDK V3.0.4</li>\n</ul>\n<h3 id=\"at\">AT指令集(含韌體燒錄位址說明)</h3>\n<ul>\n<li>ESP8266 Non-OS AT Instruction Set V3.0.3</li>\n</ul>\n<h2 id=\"\">準備所需軟體及韌體</h2>\n<p>點擊下方連結下載燒錄工具、韌體及指令集</p>\n<ul>\n<li><a href=\"https://www.espressif.com/en/support/download/sdks-demos\">ESP8266 NONOS SDK</a></li>\n<li><a href=\"https://www.espressif.com/en/support/download/other-tools\">Flash Download Tools</a></li>\n<li><a href=\"https://www.espressif.com/en/support/documents/technical-documents\">ESP8266 Non-OS AT Instruction Set</a></li>\n</ul>\n<h2 id=\"esp01\">連接ESP-01</h2>\n<p>將ESP-01插在燒錄器上，並將燒錄器插入USB Port<br>\n接著按下<code>Windows鍵+R</code>，輸入<strong>devmgmt.msc</strong>按下確定，進入裝置管理員查看燒錄器的COM Port(範例為COM7)<br>\n<img src=\"__GHOST_URL__/content/images/2021/02/1.png\" alt=\"1\" loading=\"lazy\"></p>\n<h2 id=\"\">設定燒錄資訊</h2>\n<p>點擊<code>flash_download_tool_3.8.5.exe</code>執行燒錄程式<br>\n<img src=\"__GHOST_URL__/content/images/2021/02/2.png\" alt=\"2\" loading=\"lazy\"></p>\n<p>選擇<code>Developer Mode</code><br>\n<img src=\"__GHOST_URL__/content/images/2021/02/3.png\" alt=\"3\" loading=\"lazy\"></p>\n<p>選擇<code>ESP8266 DownloadTool</code><br>\n<img src=\"__GHOST_URL__/content/images/2021/02/4.png\" alt=\"4\" loading=\"lazy\"></p>\n<p>韌體燒錄位址表在<code>AT指令集</code>裡可以找到，在<strong>1.2. Downloading AT Firmware into the Flash</strong>裡的<strong>1.2.4. 8 Mbit Flash</strong>有詳細說明<br>\n<img src=\"__GHOST_URL__/content/images/2021/02/5.png\" alt=\"5\" loading=\"lazy\"></p>\n<p><img src=\"__GHOST_URL__/content/images/2021/02/6.png\" alt=\"6\" loading=\"lazy\"></p>\n<p>解壓縮已經下載好的<code>ESP8266_NONOS_SDK-3.0.4</code>檔案，在裡面尋找bin資料夾，裡面的檔案就是燒錄所需的檔案，依照韌體燒錄位址表進行設定，將特定檔案對上相對的位址，並將左邊方格打勾</p>\n<p><code>FLASH SIZE</code>記得要改為8Mbit(ESP-01的Flash size為1MB，也就是8Mbit)</p>\n<p>右下角的COM選單選擇剛才在裝置管理員看到的COM Port編號</p>\n<p>BAUD設為<strong>115200</strong></p>\n<p><img src=\"__GHOST_URL__/content/images/2021/02/7.png\" alt=\"7\" loading=\"lazy\"></p>\n<h2 id=\"\">執行韌體燒錄程式</h2>\n<p>設定完成之後按下<code>START</code>按鈕便可開始進行燒錄</p>\n<p>若有抓到ESP-01會顯示<strong>Download下載中...</strong>，後面的方格也會顯示ESP-01的MAC位址</p>\n<p><img src=\"__GHOST_URL__/content/images/2021/02/8.png\" alt=\"8\" loading=\"lazy\"></p>\n<p>若燒錄成功會顯示<strong>FINISH完成</strong></p>\n<p><img src=\"__GHOST_URL__/content/images/2021/02/9.png\" alt=\"9\" loading=\"lazy\"></p>\n<h2 id=\"\">檢查燒錄狀態</h2>\n<p>開啟RealTerm終端機程式</p>\n<p>在<strong>Display</strong>頁籤設定Display As <strong>Ansi</strong><br>\n<img src=\"__GHOST_URL__/content/images/2021/02/10.png\" alt=\"10\" loading=\"lazy\"></p>\n<p>在<strong>Port</strong>頁籤設定</p>\n<ul>\n<li>Baud為<strong>115200</strong>(若無回應可嘗試其他BaudRate)</li>\n<li>Port為USB燒錄器的COM Port編號(可至裝置管理員確認，或移除裝置後重新插上以便確認)</li>\n<li>重新按壓Open按鈕，確認為壓下狀態(有任何更改都可以重新按壓，確保狀態有被改變)</li>\n<li>確認右下角狀態是否正確</li>\n</ul>\n<p><img src=\"__GHOST_URL__/content/images/2021/02/11.png\" alt=\"11\" loading=\"lazy\"></p>\n<p>在<strong>Send</strong>頁籤<strong>勾選EOL的前兩個</strong>，輸入要傳送的指令後按下Send ASCII即可傳送指令</p>\n<ul>\n<li>AT - 測試AT是否已啟動</li>\n<li>AT+GMR - 查詢AT及SDK的版本資訊</li>\n</ul>\n<p><img src=\"__GHOST_URL__/content/images/2021/02/12.png\" alt=\"12\" loading=\"lazy\"></p>\n<p><img src=\"__GHOST_URL__/content/images/2021/02/13.png\" alt=\"13\" loading=\"lazy\"></p>\n<p>若送出指令AT有返回OK，且送出指令AT+GMR有返回版本資訊便可開始使用ESP-01了</p>\n<h2 id=\"\">參考資料</h2>\n<p><a href=\"https://www.espressif.com/en\">ESPRESSIF</a><br>\n<a href=\"https://www.espressif.com/en/support/download/sdks-demos\">ESP8266 NONOS SDK</a><br>\n<a href=\"https://www.espressif.com/en/support/download/other-tools\">Flash Download Tools</a><br>\n<a href=\"https://www.espressif.com/en/support/documents/technical-documents\">ESP8266 Non-OS AT Instruction Set</a><br>\n<a href=\"https://laoweizz.blogspot.com/2017/02/esp8266-esp-01s-01-usb-ttl-esp6288-wifi.html\">ESP8266 ESP-01s測試(01)利用USB 轉TTL模組</a></p>\n<!--kg-card-end: markdown-->","comment_id":"6033ae12b40e5a0c5c7b4eac","plaintext":"在使用ESP8266有時會遇到兩種情況，原廠出貨的韌體怪怪的導致無法使用AT指令跟ESP8266溝通，或是已經把自己的程式燒進去之後又想重新使用AT指令的功能，這時候就需要重新燒錄韌體，這篇筆記紀錄使用ESP-01作為範例的韌體燒錄及AT指令驗證步驟\n\n\n材料\n\n\n\n硬體\n\n\n * ESP-01s\n * ESP-01燒錄器\n\n\n\n軟體\n\n\n * Flash Download Tools (ESP8266 & ESP32 & ESP32-S2) V3.8.5\n * RealTerm 2.0.0.70\n\n\n\nSDK\n\n\n * ESP8266 NONOS SDK V3.0.4\n\n\n\nAT指令集(含韌體燒錄位址說明)\n\n\n * ESP8266 Non-OS AT Instruction Set V3.0.3\n\n\n\n準備所需軟體及韌體\n\n\n點擊下方連結下載燒錄工具、韌體及指令集\n\n\n * ESP8266 NONOS SDK\n * Flash Download Tools\n * ESP8266 Non-OS AT Instruction Set\n\n\n\n連接ESP-01\n\n\n將ESP-01插在燒錄器上，並將燒錄器插入USB Port\n\n接著按下Windows鍵+R，輸入devmgmt.msc按下確定，進入裝置管理員查看燒錄器的COM Port(範例為COM7)\n\n\n\n\n\n設定燒錄資訊\n\n\n點擊flash_download_tool_3.8.5.exe執行燒錄程式\n\n\n\n\n選擇Developer Mode\n\n\n\n\n選擇ESP8266 DownloadTool\n\n\n\n\n韌體燒錄位址表在AT指令集裡可以找到，在1.2. Downloading AT Firmware into the Flash裡的1.2.4. 8 Mbit Flash有詳細說明\n\n\n\n\n\n\n\n解壓縮已經下載好的ESP8266_NONOS_SDK-3.0.4檔案，在裡面尋找bin資料夾，裡面的檔案就是燒錄所需的檔案，依照韌體燒錄位址表進行設定，將特定檔案對上相對的位址，並將左邊方格打勾\n\n\nFLASH SIZE記得要改為8Mbit(ESP-01的Flash size為1MB，也就是8Mbit)\n\n\n右下角的COM選單選擇剛才在裝置管理員看到的COM Port編號\n\n\nBAUD設為115200\n\n\n\n\n\n\n執行韌體燒錄程式\n\n\n設定完成之後按下START按鈕便可開始進行燒錄\n\n\n若有抓到ESP-01會顯示Download下載中...，後面的方格也會顯示ESP-01的MAC位址\n\n\n\n\n\n若燒錄成功會顯示FINISH完成\n\n\n\n\n\n\n檢查燒錄狀態\n\n\n開啟RealTerm終端機程式\n\n\n在Display頁籤設定Display As Ansi\n\n\n\n\n在Port頁籤設定\n\n\n * Baud為115200(若無回應可嘗試其他BaudRate)\n * Port為USB燒錄器的COM Port編號(可至裝置管理員確認，或移除裝置後重新插上以便確認)\n * 重新按壓Open按鈕，確認為壓下狀態(有任何更改都可以重新按壓，確保狀態有被改變)\n * 確認右下角狀態是否正確\n\n\n\n\n\n在Send頁籤勾選EOL的前兩個，輸入要傳送的指令後按下Send ASCII即可傳送指令\n\n\n * AT - 測試AT是否已啟動\n * AT+GMR - 查詢AT及SDK的版本資訊\n\n\n\n\n\n\n\n\n若送出指令AT有返回OK，且送出指令AT+GMR有返回版本資訊便可開始使用ESP-01了\n\n\n\n參考資料\n\n\nESPRESSIF\n\nESP8266 NONOS SDK\n\nFlash Download Tools\n\nESP8266 Non-OS AT Instruction Set\n\nESP8266 ESP-01s測試(01)利用USB 轉TTL模組\n","feature_image":"__GHOST_URL__/content/images/2021/02/pexels-skitterphoto-1448561.jpg","featured":0,"type":"post","status":"published","locale":null,"visibility":"public","email_recipient_filter":"none","created_at":"2021-02-22 13:13:54","created_by":"1","updated_at":"2021-02-22 13:51:29","updated_by":null,"published_at":"2021-02-22 13:42:24","published_by":"1","custom_excerpt":"在使用ESP8266有時會遇到兩種情況，原廠出貨的韌體怪怪的導致無法使用AT指令跟ESP8266溝通，或是已經把自己的程式燒進去之後又想重新使用AT指令的功能，這時候就需要重新燒錄韌體，這篇筆記紀錄使用ESP-01作為範例的韌體燒錄及AT指令驗證步驟","codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null,"newsletter_id":null},{"id":"635a816a57207246b927a8b8","uuid":"0d206f1e-5738-429c-87f0-6e26d2bac94b","title":"[Zsh]更改Ubuntu終端機樣式","slug":"zsh-ubuntu-init","mobiledoc":"{\"version\":\"0.3.1\",\"atoms\":[],\"cards\":[[\"markdown\",{\"markdown\":\"近期無意間在網路上發現[Bullet Train](https://github.com/caiogondim/bullet-train.zsh)這個theme，一下子就被燒到了，覺得非常好看，於是決定來將自己的terminal也改成那樣子，提昇~~爽度~~工作效率\\n\\n## 環境\\n- Ubuntu 20.04.2LTS\\n\\n\\n## 安裝\\n\\n更新套件清單\\n```shell\\n$ sudo apt-get update #更新套件清單\\n$ sudo apt-get upgrade #根據已經更新的套件清單，比對是否更新套件\\n```\\n\\n安裝Zsh\\n```shell\\n$ sudo apt-get install zsh\\n```\\n\\n查看Zsh是否成功安裝\\n```shell\\n$ cat /etc/shells\\n```\\n\\n安裝oh-my-zsh\\n```shell\\n$ sh -c \\\"$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)\\\"\\n```\\n\\n安裝完會顯示oh-my-zsh的歡迎畫面\\n\\n## 修改設定\\n目前預設的還是Bash Shell，要將它改成Zsh\\n```shell\\n$ chsh -s /bin/zsh\\n```\\n修改完成後須重新登入\\n\\n## 安裝Theme\\n前往[Bullet train](https://github.com/caiogondim/bullet-train.zsh)下載[主題](https://raw.githubusercontent.com/caiogondim/bullet-train-oh-my-zsh-theme/master/bullet-train.zsh-theme)\\n\\n將下載好的主題**bullet-train.zsh-theme**放入`.oh-my-zsh/themes`目錄內\\n\\n接著編輯`~/.zshrc`，將**ZSH_THEME**設定為\\\"bullet-train\\\"\\n\\n## 安裝powerline\\n\\n```shell\\n$ sudo apt-get install powerline\\n$ sudo apt-get install fonts-powerline\\n```\\n\\n## 安裝Melso字型\\n```shell\\n$ git clone https://github.com/powerline/fonts.git --depth=1\\n$ cd fonts \\n$ ./install.sh\\n```\\n\\n右鍵點選Terminal>偏好設定>文字>自訂字型，選擇**Meslo LG S for Powerline Bold**更改字型\\n\\n\\n## 參考資料\\n\\n- [在 Ubuntu 18.04 LTS / 16.04 LTS 中安裝使用 Oh-My-Zsh](https://medium.com/@wifferlin0505/%E5%9C%A8-ubuntu-16-04-lts-%E4%B8%AD%E5%AE%89%E8%A3%9D%E4%BD%BF%E7%94%A8-oh-my-zsh-cf92203ca8a2)\\n- [用Oh My Zsh把iTerm變美美](https://medium.com/@hazelwu/%E7%94%A8oh-my-zsh%E6%8A%8Aiterm%E8%AE%8A%E7%BE%8E%E7%BE%8E-8a18daa8eac)\\n- [Github - Bullet Train for oh-my-zsh](https://github.com/caiogondim/bullet-train.zsh)\\n- [Github - Powerline fonts](https://github.com/powerline/fonts)\\n- [agnoster.zsh-theme](https://github.com/agnoster/agnoster-zsh-theme)\"}]],\"markups\":[],\"sections\":[[10,0],[1,\"p\",[]]],\"ghostVersion\":\"3.0\"}","lexical":null,"html":"<!--kg-card-begin: markdown--><p>近期無意間在網路上發現<a href=\"https://github.com/caiogondim/bullet-train.zsh\">Bullet Train</a>這個theme，一下子就被燒到了，覺得非常好看，於是決定來將自己的terminal也改成那樣子，提昇<s>爽度</s>工作效率</p>\n<h2 id=\"\">環境</h2>\n<ul>\n<li>Ubuntu 20.04.2LTS</li>\n</ul>\n<h2 id=\"\">安裝</h2>\n<p>更新套件清單</p>\n<pre><code class=\"language-shell\">$ sudo apt-get update #更新套件清單\n$ sudo apt-get upgrade #根據已經更新的套件清單，比對是否更新套件\n</code></pre>\n<p>安裝Zsh</p>\n<pre><code class=\"language-shell\">$ sudo apt-get install zsh\n</code></pre>\n<p>查看Zsh是否成功安裝</p>\n<pre><code class=\"language-shell\">$ cat /etc/shells\n</code></pre>\n<p>安裝oh-my-zsh</p>\n<pre><code class=\"language-shell\">$ sh -c &quot;$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)&quot;\n</code></pre>\n<p>安裝完會顯示oh-my-zsh的歡迎畫面</p>\n<h2 id=\"\">修改設定</h2>\n<p>目前預設的還是Bash Shell，要將它改成Zsh</p>\n<pre><code class=\"language-shell\">$ chsh -s /bin/zsh\n</code></pre>\n<p>修改完成後須重新登入</p>\n<h2 id=\"theme\">安裝Theme</h2>\n<p>前往<a href=\"https://github.com/caiogondim/bullet-train.zsh\">Bullet train</a>下載<a href=\"https://raw.githubusercontent.com/caiogondim/bullet-train-oh-my-zsh-theme/master/bullet-train.zsh-theme\">主題</a></p>\n<p>將下載好的主題<strong>bullet-train.zsh-theme</strong>放入<code>.oh-my-zsh/themes</code>目錄內</p>\n<p>接著編輯<code>~/.zshrc</code>，將<strong>ZSH_THEME</strong>設定為&quot;bullet-train&quot;</p>\n<h2 id=\"powerline\">安裝powerline</h2>\n<pre><code class=\"language-shell\">$ sudo apt-get install powerline\n$ sudo apt-get install fonts-powerline\n</code></pre>\n<h2 id=\"melso\">安裝Melso字型</h2>\n<pre><code class=\"language-shell\">$ git clone https://github.com/powerline/fonts.git --depth=1\n$ cd fonts \n$ ./install.sh\n</code></pre>\n<p>右鍵點選Terminal&gt;偏好設定&gt;文字&gt;自訂字型，選擇<strong>Meslo LG S for Powerline Bold</strong>更改字型</p>\n<h2 id=\"\">參考資料</h2>\n<ul>\n<li><a href=\"https://medium.com/@wifferlin0505/%E5%9C%A8-ubuntu-16-04-lts-%E4%B8%AD%E5%AE%89%E8%A3%9D%E4%BD%BF%E7%94%A8-oh-my-zsh-cf92203ca8a2\">在 Ubuntu 18.04 LTS / 16.04 LTS 中安裝使用 Oh-My-Zsh</a></li>\n<li><a href=\"https://medium.com/@hazelwu/%E7%94%A8oh-my-zsh%E6%8A%8Aiterm%E8%AE%8A%E7%BE%8E%E7%BE%8E-8a18daa8eac\">用Oh My Zsh把iTerm變美美</a></li>\n<li><a href=\"https://github.com/caiogondim/bullet-train.zsh\">Github - Bullet Train for oh-my-zsh</a></li>\n<li><a href=\"https://github.com/powerline/fonts\">Github - Powerline fonts</a></li>\n<li><a href=\"https://github.com/agnoster/agnoster-zsh-theme\">agnoster.zsh-theme</a></li>\n</ul>\n<!--kg-card-end: markdown-->","comment_id":"60ba55154b0bccce2a8deb75","plaintext":"近期無意間在網路上發現Bullet Train這個theme，一下子就被燒到了，覺得非常好看，於是決定來將自己的terminal也改成那樣子，提昇爽度工作效率\n\n\n\n環境\n\n\n * Ubuntu 20.04.2LTS\n\n\n\n安裝\n\n\n更新套件清單\n\n\n$ sudo apt-get update #更新套件清單\n$ sudo apt-get upgrade #根據已經更新的套件清單，比對是否更新套件\n\n\n\n安裝Zsh\n\n\n$ sudo apt-get install zsh\n\n\n\n查看Zsh是否成功安裝\n\n\n$ cat /etc/shells\n\n\n\n安裝oh-my-zsh\n\n\n$ sh -c \"$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)\"\n\n\n\n安裝完會顯示oh-my-zsh的歡迎畫面\n\n\n\n修改設定\n\n\n目前預設的還是Bash Shell，要將它改成Zsh\n\n\n$ chsh -s /bin/zsh\n\n\n\n修改完成後須重新登入\n\n\n\n安裝Theme\n\n\n前往Bullet train下載主題\n\n\n將下載好的主題bullet-train.zsh-theme放入.oh-my-zsh/themes目錄內\n\n\n接著編輯~/.zshrc，將ZSH_THEME設定為\"bullet-train\"\n\n\n\n安裝powerline\n\n\n$ sudo apt-get install powerline\n$ sudo apt-get install fonts-powerline\n\n\n\n\n安裝Melso字型\n\n\n$ git clone https://github.com/powerline/fonts.git --depth=1\n$ cd fonts \n$ ./install.sh\n\n\n\n右鍵點選Terminal>偏好設定>文字>自訂字型，選擇Meslo LG S for Powerline Bold更改字型\n\n\n\n參考資料\n\n\n * 在 Ubuntu 18.04 LTS / 16.04 LTS 中安裝使用 Oh-My-Zsh\n * 用Oh My Zsh把iTerm變美美\n * Github - Bullet Train for oh-my-zsh\n * Github - Powerline fonts\n * agnoster.zsh-theme\n","feature_image":"__GHOST_URL__/content/images/2021/06/2021-06-05-00-26-14-------1.png","featured":0,"type":"post","status":"published","locale":null,"visibility":"public","email_recipient_filter":"none","created_at":"2021-06-04 16:30:13","created_by":"1","updated_at":"2021-06-04 16:33:34","updated_by":null,"published_at":"2021-06-04 16:32:31","published_by":"1","custom_excerpt":"近期無意間在網路上發現Bullet Train這個theme，一下子就被燒到了，覺得非常好看，於是決定來將自己的terminal也改成那樣子，提昇~~爽度~~工作效率","codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null,"newsletter_id":null},{"id":"635a816a57207246b927a8b9","uuid":"93df952c-70ce-40c0-93c7-2d8374e59b9a","title":"[Golang]MySQL Error 1040: Too Many Connections 錯誤處理","slug":"golang-mysql-error-1040","mobiledoc":"{\"version\":\"0.3.1\",\"atoms\":[],\"cards\":[[\"markdown\",{\"markdown\":\"前陣子寫了一個golang程式用來上傳資料到MySQL，起初程式運作都非常良好，過了一陣子開始出現代號為1040的Too Many Connections錯誤，我們一起來看看發生了甚麼事。\\n\\n## 查看MySQL的連線數量\\n在MySQL下SQL查詢\\n\\n```sql\\nSHOW STATUS LIKE '%connected';\\n```\\n查詢結果如下\\n| Variable_name     | Value |\\n| ----------------- |:----- |\\n| Slaves_connected  | 0     |\\n| Threads_connected | 151   |\\n\\n我們可以發現到Threads_connected已經到達151了，MySQL預設的最大允許連線數量為151，可以使用以下指令查詢最大允許連線數量\\n```sql\\nSHOW VARIABLES LIKE 'max_connections';\\n```\\n\\n## 檢查程式碼\\n\\n後來檢查程式碼發現在database/sql這個package有兩個struct，一個是DB，另一個是Conn，我將DB物件的連線關掉而沒有關閉Conn物件的，導致連線數一直增加，造成1040錯誤。\\n\\n### 錯誤程式碼範例\\n```go\\ndb, err := sql.Open(\\\"mysql\\\", \\\"user:password@tcp(127.0.0.1)/testdb?charset=utf8\\\")\\nif err != nil {\\n    fmt.Println(err)\\n}\\ndefer db.Close()\\n\\n_, err = db.Query(\\\"call SP(?,?,?,?)\\\", \\\"A\\\", \\\"B\\\", \\\"C\\\", \\\"D\\\")\\nif err != nil {\\n    fmt.Println(err)\\n}\\n```\\n\\n我們可以看到上面關閉的是db.Close()，這樣並不能正確關閉連線，必須關閉db.Query的連線才能正確的降低連線卡住的數量\\n\\n### 修正程式碼範例\\n```go\\ndb, err := sql.Open(\\\"mysql\\\", \\\"user:password@tcp(127.0.0.1)/testdb?charset=utf8\\\")\\nif err != nil {\\n    fmt.Println(err)\\n}\\ndefer db.Close()\\n\\nconn, err := db.Query(\\\"call SP(?,?,?,?)\\\", \\\"A\\\", \\\"B\\\", \\\"C\\\", \\\"D\\\")\\nif err != nil {\\n    fmt.Println(err)\\n}\\ndefer conn.Close()\\n\\n```\\n\\n## 參考資料\\n- [stackoverflow - Is it normal to have these many connections in MySQL?](https://stackoverflow.com/questions/39452555/is-it-normal-to-have-these-many-connections-in-mysql)\"}]],\"markups\":[],\"sections\":[[10,0],[1,\"p\",[]]],\"ghostVersion\":\"3.0\"}","lexical":null,"html":"<!--kg-card-begin: markdown--><p>前陣子寫了一個golang程式用來上傳資料到MySQL，起初程式運作都非常良好，過了一陣子開始出現代號為1040的Too Many Connections錯誤，我們一起來看看發生了甚麼事。</p>\n<h2 id=\"mysql\">查看MySQL的連線數量</h2>\n<p>在MySQL下SQL查詢</p>\n<pre><code class=\"language-sql\">SHOW STATUS LIKE '%connected';\n</code></pre>\n<p>查詢結果如下</p>\n<table>\n<thead>\n<tr>\n<th>Variable_name</th>\n<th style=\"text-align:left\">Value</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Slaves_connected</td>\n<td style=\"text-align:left\">0</td>\n</tr>\n<tr>\n<td>Threads_connected</td>\n<td style=\"text-align:left\">151</td>\n</tr>\n</tbody>\n</table>\n<p>我們可以發現到Threads_connected已經到達151了，MySQL預設的最大允許連線數量為151，可以使用以下指令查詢最大允許連線數量</p>\n<pre><code class=\"language-sql\">SHOW VARIABLES LIKE 'max_connections';\n</code></pre>\n<h2 id=\"\">檢查程式碼</h2>\n<p>後來檢查程式碼發現在database/sql這個package有兩個struct，一個是DB，另一個是Conn，我將DB物件的連線關掉而沒有關閉Conn物件的，導致連線數一直增加，造成1040錯誤。</p>\n<h3 id=\"\">錯誤程式碼範例</h3>\n<pre><code class=\"language-go\">db, err := sql.Open(&quot;mysql&quot;, &quot;user:password@tcp(127.0.0.1)/testdb?charset=utf8&quot;)\nif err != nil {\n    fmt.Println(err)\n}\ndefer db.Close()\n\n_, err = db.Query(&quot;call SP(?,?,?,?)&quot;, &quot;A&quot;, &quot;B&quot;, &quot;C&quot;, &quot;D&quot;)\nif err != nil {\n    fmt.Println(err)\n}\n</code></pre>\n<p>我們可以看到上面關閉的是db.Close()，這樣並不能正確關閉連線，必須關閉db.Query的連線才能正確的降低連線卡住的數量</p>\n<h3 id=\"\">修正程式碼範例</h3>\n<pre><code class=\"language-go\">db, err := sql.Open(&quot;mysql&quot;, &quot;user:password@tcp(127.0.0.1)/testdb?charset=utf8&quot;)\nif err != nil {\n    fmt.Println(err)\n}\ndefer db.Close()\n\nconn, err := db.Query(&quot;call SP(?,?,?,?)&quot;, &quot;A&quot;, &quot;B&quot;, &quot;C&quot;, &quot;D&quot;)\nif err != nil {\n    fmt.Println(err)\n}\ndefer conn.Close()\n\n</code></pre>\n<h2 id=\"\">參考資料</h2>\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/39452555/is-it-normal-to-have-these-many-connections-in-mysql\">stackoverflow - Is it normal to have these many connections in MySQL?</a></li>\n</ul>\n<!--kg-card-end: markdown-->","comment_id":"60bf95efd94d554e3a9b2b57","plaintext":"前陣子寫了一個golang程式用來上傳資料到MySQL，起初程式運作都非常良好，過了一陣子開始出現代號為1040的Too Many Connections錯誤，我們一起來看看發生了甚麼事。\n\n\n\n查看MySQL的連線數量\n\n\n在MySQL下SQL查詢\n\n\nSHOW STATUS LIKE '%connected';\n\n\n\n查詢結果如下\n\n\n\n\n\nVariable_name\nValue\n\n\n\n\nSlaves_connected\n0\n\n\nThreads_connected\n151\n\n\n\n\n\n我們可以發現到Threads_connected已經到達151了，MySQL預設的最大允許連線數量為151，可以使用以下指令查詢最大允許連線數量\n\n\nSHOW VARIABLES LIKE 'max_connections';\n\n\n\n\n檢查程式碼\n\n\n後來檢查程式碼發現在database/sql這個package有兩個struct，一個是DB，另一個是Conn，我將DB物件的連線關掉而沒有關閉Conn物件的，導致連線數一直增加，造成1040錯誤。\n\n\n\n錯誤程式碼範例\n\n\ndb, err := sql.Open(\"mysql\", \"user:password@tcp(127.0.0.1)/testdb?charset=utf8\")\nif err != nil {\n    fmt.Println(err)\n}\ndefer db.Close()\n\n_, err = db.Query(\"call SP(?,?,?,?)\", \"A\", \"B\", \"C\", \"D\")\nif err != nil {\n    fmt.Println(err)\n}\n\n\n\n我們可以看到上面關閉的是db.Close()，這樣並不能正確關閉連線，必須關閉db.Query的連線才能正確的降低連線卡住的數量\n\n\n\n修正程式碼範例\n\n\ndb, err := sql.Open(\"mysql\", \"user:password@tcp(127.0.0.1)/testdb?charset=utf8\")\nif err != nil {\n    fmt.Println(err)\n}\ndefer db.Close()\n\nconn, err := db.Query(\"call SP(?,?,?,?)\", \"A\", \"B\", \"C\", \"D\")\nif err != nil {\n    fmt.Println(err)\n}\ndefer conn.Close()\n\n\n\n\n\n參考資料\n\n\n * stackoverflow - Is it normal to have these many connections in MySQL?\n","feature_image":"__GHOST_URL__/content/images/2021/06/golang-long.jpeg","featured":0,"type":"post","status":"published","locale":null,"visibility":"public","email_recipient_filter":"none","created_at":"2021-06-08 16:08:15","created_by":"1","updated_at":"2021-06-08 16:09:52","updated_by":null,"published_at":"2021-06-08 16:09:52","published_by":"1","custom_excerpt":"前陣子寫了一個golang程式用來上傳資料到MySQL，起初程式運作都非常良好，過了一陣子開始出現代號為1040的Too Many Connections錯誤，我們一起來看看發生了甚麼事。","codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null,"newsletter_id":null},{"id":"635a816a57207246b927a8ba","uuid":"6603ed36-3ff9-4055-b534-db166aa5dc16","title":"[Pattern]REST API 設計規範","slug":"pattern-rest-api-design","mobiledoc":"{\"version\":\"0.3.1\",\"atoms\":[],\"cards\":[[\"markdown\",{\"markdown\":\"REST是一種架構風格，類似設計模式，使用一些原則規範應用程式的設計，以下為REST風格的一些特徵\\n\\n## 使用名詞而非動詞\\n當我們想要設計一個學生的API時，應使用名詞進行定義 \\n```javascript\\n//這是對的\\n/students/1\\n```\\n而非使用動詞定義\\n```javascript\\n//這是錯的\\n/getStudent/1\\n```\\n\\n## 使用複數名詞\\n不區分單複數，全部使用複數定義\\n```javascript\\n//這是對的\\n/students\\n```\\n不使用單數定義\\n```javascript\\n//這是錯的\\n/student\\n```\\n\\n## 使用子資源表達資源間的關係\\n以取得所有資源與特定資源為例\\n```javascript\\n//這是對的\\n/students //取得所有學生\\n/students/1 //取得特定學生\\n```\\n呼應到使用複數名詞定義API，取得特定資源時不使用單數表達，而是使用子資源方式定義\\n```javascript\\n//這是錯的\\n/students //取得所有學生\\n/student/1 //取得特定學生\\n```\\n\\n\\n## 使用GET以外的方法改變資源狀態\\n要改變資源狀態應使用GET以外的方法，例如POST、PUT或DELETE等\\n```javascript\\n//這是對的\\nPOST /students/1/activate\\n```\\n不使用GET進行修改\\n```javascript\\n//這是錯的\\nGET /students/1/activate\\n```\\n\\n## 使用HTTP header定義格式\\n- Content-Type定義請求格式\\n- Accept定義接收對應的格式列表\\n\\n## 使用HATEOAS約束\\n用戶端可以在伺服器返回的內容中動態的取得URI的資訊，再使用取得的URI資訊送出請求\\n\\n\\n## 提供過濾、排序、欄位選擇、分頁\\n### 過濾\\n```javascript\\nGET /students?gender=male\\nGET /students?age<=18\\n```\\n\\n### 排序\\n```javascript\\nGET /students?sort=-age,+id\\n```\\n\\n### 欄位選擇\\n```javascript\\nGET /students?fields=id,name,age,gender\\n```\\n\\n### 分頁\\n```javascript\\nGET /students?offset=10&limit=5 //取得學生第20個之後的5個學生\\n```\\n\\n## 使用版本\\n使用版本編號將API版本化，提供彈性\\n```javascript\\n/yourService/api/v1\\n```\\n\\n## 使用HTTP Status Code進行錯誤處理\\n每個錯誤都須返回一個payload，不可僅返回錯誤狀態碼(500 Internal Server Error)\\n\\n```json\\n{\\n    \\\"errors\\\":[\\n        {\\n            \\\"userMessage\\\":\\\"Sorry, the requested resource dose not exists.\\\",\\n            \\\"internalMessage\\\":\\\"Student not found\\\",\\n            \\\"code\\\":\\\"34\\\"\\n        }\\n    ]\\n}\\n```\\n\\n## 參考資料\\n- 巨型公司的網路架構：分散是系統內部解密/柳偉衛\"}]],\"markups\":[],\"sections\":[[10,0],[1,\"p\",[]]],\"ghostVersion\":\"3.0\"}","lexical":null,"html":"<!--kg-card-begin: markdown--><p>REST是一種架構風格，類似設計模式，使用一些原則規範應用程式的設計，以下為REST風格的一些特徵</p>\n<h2 id=\"\">使用名詞而非動詞</h2>\n<p>當我們想要設計一個學生的API時，應使用名詞進行定義</p>\n<pre><code class=\"language-javascript\">//這是對的\n/students/1\n</code></pre>\n<p>而非使用動詞定義</p>\n<pre><code class=\"language-javascript\">//這是錯的\n/getStudent/1\n</code></pre>\n<h2 id=\"\">使用複數名詞</h2>\n<p>不區分單複數，全部使用複數定義</p>\n<pre><code class=\"language-javascript\">//這是對的\n/students\n</code></pre>\n<p>不使用單數定義</p>\n<pre><code class=\"language-javascript\">//這是錯的\n/student\n</code></pre>\n<h2 id=\"\">使用子資源表達資源間的關係</h2>\n<p>以取得所有資源與特定資源為例</p>\n<pre><code class=\"language-javascript\">//這是對的\n/students //取得所有學生\n/students/1 //取得特定學生\n</code></pre>\n<p>呼應到使用複數名詞定義API，取得特定資源時不使用單數表達，而是使用子資源方式定義</p>\n<pre><code class=\"language-javascript\">//這是錯的\n/students //取得所有學生\n/student/1 //取得特定學生\n</code></pre>\n<h2 id=\"get\">使用GET以外的方法改變資源狀態</h2>\n<p>要改變資源狀態應使用GET以外的方法，例如POST、PUT或DELETE等</p>\n<pre><code class=\"language-javascript\">//這是對的\nPOST /students/1/activate\n</code></pre>\n<p>不使用GET進行修改</p>\n<pre><code class=\"language-javascript\">//這是錯的\nGET /students/1/activate\n</code></pre>\n<h2 id=\"httpheader\">使用HTTP header定義格式</h2>\n<ul>\n<li>Content-Type定義請求格式</li>\n<li>Accept定義接收對應的格式列表</li>\n</ul>\n<h2 id=\"hateoas\">使用HATEOAS約束</h2>\n<p>用戶端可以在伺服器返回的內容中動態的取得URI的資訊，再使用取得的URI資訊送出請求</p>\n<h2 id=\"\">提供過濾、排序、欄位選擇、分頁</h2>\n<h3 id=\"\">過濾</h3>\n<pre><code class=\"language-javascript\">GET /students?gender=male\nGET /students?age&lt;=18\n</code></pre>\n<h3 id=\"\">排序</h3>\n<pre><code class=\"language-javascript\">GET /students?sort=-age,+id\n</code></pre>\n<h3 id=\"\">欄位選擇</h3>\n<pre><code class=\"language-javascript\">GET /students?fields=id,name,age,gender\n</code></pre>\n<h3 id=\"\">分頁</h3>\n<pre><code class=\"language-javascript\">GET /students?offset=10&amp;limit=5 //取得學生第20個之後的5個學生\n</code></pre>\n<h2 id=\"\">使用版本</h2>\n<p>使用版本編號將API版本化，提供彈性</p>\n<pre><code class=\"language-javascript\">/yourService/api/v1\n</code></pre>\n<h2 id=\"httpstatuscode\">使用HTTP Status Code進行錯誤處理</h2>\n<p>每個錯誤都須返回一個payload，不可僅返回錯誤狀態碼(500 Internal Server Error)</p>\n<pre><code class=\"language-json\">{\n    &quot;errors&quot;:[\n        {\n            &quot;userMessage&quot;:&quot;Sorry, the requested resource dose not exists.&quot;,\n            &quot;internalMessage&quot;:&quot;Student not found&quot;,\n            &quot;code&quot;:&quot;34&quot;\n        }\n    ]\n}\n</code></pre>\n<h2 id=\"\">參考資料</h2>\n<ul>\n<li>巨型公司的網路架構：分散是系統內部解密/柳偉衛</li>\n</ul>\n<!--kg-card-end: markdown-->","comment_id":"60c7188467f493abc689cd41","plaintext":"REST是一種架構風格，類似設計模式，使用一些原則規範應用程式的設計，以下為REST風格的一些特徵\n\n\n\n使用名詞而非動詞\n\n\n當我們想要設計一個學生的API時，應使用名詞進行定義\n\n\n//這是對的\n/students/1\n\n\n\n而非使用動詞定義\n\n\n//這是錯的\n/getStudent/1\n\n\n\n\n使用複數名詞\n\n\n不區分單複數，全部使用複數定義\n\n\n//這是對的\n/students\n\n\n\n不使用單數定義\n\n\n//這是錯的\n/student\n\n\n\n\n使用子資源表達資源間的關係\n\n\n以取得所有資源與特定資源為例\n\n\n//這是對的\n/students //取得所有學生\n/students/1 //取得特定學生\n\n\n\n呼應到使用複數名詞定義API，取得特定資源時不使用單數表達，而是使用子資源方式定義\n\n\n//這是錯的\n/students //取得所有學生\n/student/1 //取得特定學生\n\n\n\n\n使用GET以外的方法改變資源狀態\n\n\n要改變資源狀態應使用GET以外的方法，例如POST、PUT或DELETE等\n\n\n//這是對的\nPOST /students/1/activate\n\n\n\n不使用GET進行修改\n\n\n//這是錯的\nGET /students/1/activate\n\n\n\n\n使用HTTP header定義格式\n\n\n * Content-Type定義請求格式\n * Accept定義接收對應的格式列表\n\n\n\n使用HATEOAS約束\n\n\n用戶端可以在伺服器返回的內容中動態的取得URI的資訊，再使用取得的URI資訊送出請求\n\n\n\n提供過濾、排序、欄位選擇、分頁\n\n\n\n過濾\n\n\nGET /students?gender=male\nGET /students?age<=18\n\n\n\n\n排序\n\n\nGET /students?sort=-age,+id\n\n\n\n\n欄位選擇\n\n\nGET /students?fields=id,name,age,gender\n\n\n\n\n分頁\n\n\nGET /students?offset=10&limit=5 //取得學生第20個之後的5個學生\n\n\n\n\n使用版本\n\n\n使用版本編號將API版本化，提供彈性\n\n\n/yourService/api/v1\n\n\n\n\n使用HTTP Status Code進行錯誤處理\n\n\n每個錯誤都須返回一個payload，不可僅返回錯誤狀態碼(500 Internal Server Error)\n\n\n{\n    \"errors\":[\n        {\n            \"userMessage\":\"Sorry, the requested resource dose not exists.\",\n            \"internalMessage\":\"Student not found\",\n            \"code\":\"34\"\n        }\n    ]\n}\n\n\n\n\n參考資料\n\n\n * 巨型公司的網路架構：分散是系統內部解密/柳偉衛\n","feature_image":"__GHOST_URL__/content/images/2023/08/shapelined-_JBKdviweXI-unsplash-1.jpg","featured":0,"type":"post","status":"published","locale":null,"visibility":"public","email_recipient_filter":"none","created_at":"2021-06-14 08:51:16","created_by":"1","updated_at":"2023-08-16 13:59:10","updated_by":"1","published_at":"2021-06-14 09:20:00","published_by":"1","custom_excerpt":"REST是一種架構風格，類似設計模式，使用一些原則規範應用程式的設計","codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null,"newsletter_id":null},{"id":"635a816a57207246b927a8bb","uuid":"bd934ada-b08a-4a91-91f3-71018df9343f","title":"[Network]TCP 三方交握","slug":"tcp-three-way-handshake","mobiledoc":"{\"version\":\"0.3.1\",\"atoms\":[],\"cards\":[[\"markdown\",{\"markdown\":\"三方交握(Three-Way Handshake)是TCP(Transmission Control Protocol)在傳送資料前的一個儀式，用來確認雙方都有收到訊息並建立連線\\n\\n而在解釋三方交握之前，先來看看三方交握會用到的三個概念：請求、確認和同步\\n\\n## 請求/確認\\n假設有A和B兩台電腦，A電腦要傳送封包給B電腦，為了確認B電腦是否收到封包，B電腦在收到A傳過來的封包之後會返回一個確認(Acknowledgment,ACK)封包，以告知A電腦已經有收到封包了，步驟如下：\\n1. A電腦傳送封包給B電腦\\n2. B電腦回傳一個帶有ACK欄位資訊的封包給A電腦\\n\\n這可以使TCP變成可靠的傳輸，但是另外一個問題出現了，若A電腦向B電腦發送多個封包，B電腦照樣送回多個ACK封包給A電腦，A電腦將會無法得知這些ACK是對應到哪個已發送的封包，就會不知道哪個對方已經收到，而哪個對方沒收到，這時我們可以用序列號(sequence number,SEQ)來解決這個問題。\\n\\n## 序列號\\n但是這邊又遇到一個問題了，因為A電腦和B電腦的起始序列號不一定會一樣，所以A電腦發送出去的封包的序列號不等於B電腦發送出去的封包的ACK的序號，例如A電腦初始序列號為7，B電腦初始序列號為1000。所以在開始傳送封包前AB雙方會進行同步(synchronization)來確認彼此的初始序列號(Initial Sequence Number,ISN)是多少，以作為後續在收到請求後要發送確認封包時，可以確認對方的序號是否正確。\\n\\n## 同步\\n同步為同步序列號(Synchronize sequence numbers,SYN)，用意就是在於確認彼此的初始序列號，假設A電腦的初始序列號是7，B電腦的初始序列號是1000，同步的步驟如下：\\n1. A電腦傳送SYN為7的封包給B\\n2. B電腦收到A電腦傳送SYN為7的封包，回傳ACK為8(7+1=8)的封包給A電腦\\n3. B電腦傳送SYN為1000的封包給A\\n4. A電腦收到B電腦傳送SYN為1000的封包，A電腦回傳ACK為1001(1000+1)的封包給B電腦\\n\\n## 三方交握\\n如此一來雙方便知道彼此的初始序列號了，而將四個步驟中的2和3合併成一個封包便是我們俗稱的三方交握\\n\\n1. A電腦傳送SYN給B電腦\\n2. B電腦收到A電腦傳送的SYN，傳回SYN+ACK給A電腦\\n3. A電腦送回ACK給B電腦\\n\"}]],\"markups\":[],\"sections\":[[10,0],[1,\"p\",[]]],\"ghostVersion\":\"3.0\"}","lexical":null,"html":"<!--kg-card-begin: markdown--><p>三方交握(Three-Way Handshake)是TCP(Transmission Control Protocol)在傳送資料前的一個儀式，用來確認雙方都有收到訊息並建立連線</p>\n<p>而在解釋三方交握之前，先來看看三方交握會用到的三個概念：請求、確認和同步</p>\n<h2 id=\"\">請求/確認</h2>\n<p>假設有A和B兩台電腦，A電腦要傳送封包給B電腦，為了確認B電腦是否收到封包，B電腦在收到A傳過來的封包之後會返回一個確認(Acknowledgment,ACK)封包，以告知A電腦已經有收到封包了，步驟如下：</p>\n<ol>\n<li>A電腦傳送封包給B電腦</li>\n<li>B電腦回傳一個帶有ACK欄位資訊的封包給A電腦</li>\n</ol>\n<p>這可以使TCP變成可靠的傳輸，但是另外一個問題出現了，若A電腦向B電腦發送多個封包，B電腦照樣送回多個ACK封包給A電腦，A電腦將會無法得知這些ACK是對應到哪個已發送的封包，就會不知道哪個對方已經收到，而哪個對方沒收到，這時我們可以用序列號(sequence number,SEQ)來解決這個問題。</p>\n<h2 id=\"\">序列號</h2>\n<p>但是這邊又遇到一個問題了，因為A電腦和B電腦的起始序列號不一定會一樣，所以A電腦發送出去的封包的序列號不等於B電腦發送出去的封包的ACK的序號，例如A電腦初始序列號為7，B電腦初始序列號為1000。所以在開始傳送封包前AB雙方會進行同步(synchronization)來確認彼此的初始序列號(Initial Sequence Number,ISN)是多少，以作為後續在收到請求後要發送確認封包時，可以確認對方的序號是否正確。</p>\n<h2 id=\"\">同步</h2>\n<p>同步為同步序列號(Synchronize sequence numbers,SYN)，用意就是在於確認彼此的初始序列號，假設A電腦的初始序列號是7，B電腦的初始序列號是1000，同步的步驟如下：</p>\n<ol>\n<li>A電腦傳送SYN為7的封包給B</li>\n<li>B電腦收到A電腦傳送SYN為7的封包，回傳ACK為8(7+1=8)的封包給A電腦</li>\n<li>B電腦傳送SYN為1000的封包給A</li>\n<li>A電腦收到B電腦傳送SYN為1000的封包，A電腦回傳ACK為1001(1000+1)的封包給B電腦</li>\n</ol>\n<h2 id=\"\">三方交握</h2>\n<p>如此一來雙方便知道彼此的初始序列號了，而將四個步驟中的2和3合併成一個封包便是我們俗稱的三方交握</p>\n<ol>\n<li>A電腦傳送SYN給B電腦</li>\n<li>B電腦收到A電腦傳送的SYN，傳回SYN+ACK給A電腦</li>\n<li>A電腦送回ACK給B電腦</li>\n</ol>\n<!--kg-card-end: markdown-->","comment_id":"60f98e1812844678e7108e33","plaintext":"三方交握(Three-Way Handshake)是TCP(Transmission Control Protocol)在傳送資料前的一個儀式，用來確認雙方都有收到訊息並建立連線\n\n\n而在解釋三方交握之前，先來看看三方交握會用到的三個概念：請求、確認和同步\n\n\n\n請求/確認\n\n\n假設有A和B兩台電腦，A電腦要傳送封包給B電腦，為了確認B電腦是否收到封包，B電腦在收到A傳過來的封包之後會返回一個確認(Acknowledgment,ACK)封包，以告知A電腦已經有收到封包了，步驟如下：\n\n\n 1. A電腦傳送封包給B電腦\n 2. B電腦回傳一個帶有ACK欄位資訊的封包給A電腦\n\n\n這可以使TCP變成可靠的傳輸，但是另外一個問題出現了，若A電腦向B電腦發送多個封包，B電腦照樣送回多個ACK封包給A電腦，A電腦將會無法得知這些ACK是對應到哪個已發送的封包，就會不知道哪個對方已經收到，而哪個對方沒收到，這時我們可以用序列號(sequence number,SEQ)來解決這個問題。\n\n\n\n序列號\n\n\n但是這邊又遇到一個問題了，因為A電腦和B電腦的起始序列號不一定會一樣，所以A電腦發送出去的封包的序列號不等於B電腦發送出去的封包的ACK的序號，例如A電腦初始序列號為7，B電腦初始序列號為1000。所以在開始傳送封包前AB雙方會進行同步(synchronization)來確認彼此的初始序列號(Initial Sequence Number,ISN)是多少，以作為後續在收到請求後要發送確認封包時，可以確認對方的序號是否正確。\n\n\n\n同步\n\n\n同步為同步序列號(Synchronize sequence numbers,SYN)，用意就是在於確認彼此的初始序列號，假設A電腦的初始序列號是7，B電腦的初始序列號是1000，同步的步驟如下：\n\n\n 1. A電腦傳送SYN為7的封包給B\n 2. B電腦收到A電腦傳送SYN為7的封包，回傳ACK為8(7+1=8)的封包給A電腦\n 3. B電腦傳送SYN為1000的封包給A\n 4. A電腦收到B電腦傳送SYN為1000的封包，A電腦回傳ACK為1001(1000+1)的封包給B電腦\n\n\n\n三方交握\n\n\n如此一來雙方便知道彼此的初始序列號了，而將四個步驟中的2和3合併成一個封包便是我們俗稱的三方交握\n\n\n 1. A電腦傳送SYN給B電腦\n 2. B電腦收到A電腦傳送的SYN，傳回SYN+ACK給A電腦\n 3. A電腦送回ACK給B電腦\n","feature_image":"__GHOST_URL__/content/images/2021/07/communication-4871245.jpg","featured":0,"type":"post","status":"published","locale":null,"visibility":"public","email_recipient_filter":"none","created_at":"2021-07-22 15:26:16","created_by":"1","updated_at":"2021-07-22 15:29:27","updated_by":null,"published_at":"2021-07-22 15:29:27","published_by":"1","custom_excerpt":"三方交握(Three-Way Handshake)是TCP(Transmission Control Protocol)在傳送資料前的一個儀式，用來確認雙方都有收到訊息並建立連線","codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null,"newsletter_id":null},{"id":"635a816a57207246b927a8bc","uuid":"ae12c21b-3c06-4b70-86bc-0d17d6693f2b","title":"[Python]使用Pyinstaller打包Django專案發生\"RuntimeError: Script runserver does not exist.\"錯誤","slug":"python-pyinstaller-django-runserver-does-not-exist-error","mobiledoc":"{\"version\":\"0.3.1\",\"atoms\":[],\"cards\":[[\"markdown\",{\"markdown\":\"![0.0](__GHOST_URL__/content/images/2021/11/0.0.png)\\n使用pyinstaller將manage.py打包後會產生manage.exe可執行檔，在執行`manage.exe runserver`指令時發生*RuntimeError: Script runserver does not exist.* 錯誤\\n\\n\\n## 環境\\n- Windows10 x64 20H2\\n- Python 3.9.7\\n- Django 3.2.7\\n- pyinstaller 4.7\\n\\n## 解決方法\\n將指令加上 `--noreload` 參數，使用指令`manage.exe runserver --noreload`即可解決這個錯誤\\n\\n![0.1](__GHOST_URL__/content/images/2021/11/0.1.png)\"}]],\"markups\":[],\"sections\":[[10,0],[1,\"p\",[]]],\"ghostVersion\":\"3.0\"}","lexical":null,"html":"<!--kg-card-begin: markdown--><p><img src=\"__GHOST_URL__/content/images/2021/11/0.0.png\" alt=\"0.0\" loading=\"lazy\"><br>\n使用pyinstaller將manage.py打包後會產生manage.exe可執行檔，在執行<code>manage.exe runserver</code>指令時發生<em>RuntimeError: Script runserver does not exist.</em> 錯誤</p>\n<h2 id=\"\">環境</h2>\n<ul>\n<li>Windows10 x64 20H2</li>\n<li>Python 3.9.7</li>\n<li>Django 3.2.7</li>\n<li>pyinstaller 4.7</li>\n</ul>\n<h2 id=\"\">解決方法</h2>\n<p>將指令加上 <code>--noreload</code> 參數，使用指令<code>manage.exe runserver --noreload</code>即可解決這個錯誤</p>\n<p><img src=\"__GHOST_URL__/content/images/2021/11/0.1.png\" alt=\"0.1\" loading=\"lazy\"></p>\n<!--kg-card-end: markdown-->","comment_id":"619e5aedbfa2143800faf491","plaintext":"\n\n使用pyinstaller將manage.py打包後會產生manage.exe可執行檔，在執行manage.exe runserver指令時發生RuntimeError: Script runserver does not exist. 錯誤\n\n\n\n環境\n\n\n * Windows10 x64 20H2\n * Python 3.9.7\n * Django 3.2.7\n * pyinstaller 4.7\n\n\n\n解決方法\n\n\n將指令加上 --noreload 參數，使用指令manage.exe runserver --noreload即可解決這個錯誤\n\n\n\n","feature_image":"__GHOST_URL__/content/images/2021/11/python-logo.jpg","featured":0,"type":"post","status":"published","locale":null,"visibility":"public","email_recipient_filter":"none","created_at":"2021-11-24 15:31:57","created_by":"1","updated_at":"2021-11-24 15:35:58","updated_by":null,"published_at":"2021-11-24 15:35:58","published_by":"1","custom_excerpt":"使用pyinstaller將manage.py打包後會產生manage.exe可執行檔，在執行`manage.exe runserver`指令時發生*RuntimeError: Script runserver does not exist.* 錯誤","codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null,"newsletter_id":null},{"id":"635a816a57207246b927a8bd","uuid":"518c7d4e-dab3-498f-a224-2a3d780c878f","title":"[Python]使用Pyinstaller打包Django專案發生ModuleNotFoundError: No module named 'XXX'.錯誤","slug":"python-shi-yong-pyinstallerda-bao-djangozhuan-an-fa-sheng-modulenotfounderror-no-module-named-xxx-cuo-wu","mobiledoc":"{\"version\":\"0.3.1\",\"atoms\":[],\"cards\":[[\"markdown\",{\"markdown\":\"\\n![0.0-1](__GHOST_URL__/content/images/2021/11/0.0-1.png)\\n\\n使用pyinstaller將manage.py打包後會產生manage.exe可執行檔，在執行`manage.exe runserver --noreload`指令時發生*ModuleNotFoundError: No module named 'XXX'.* 錯誤\\n\\n\\n## 環境\\n- Windows10 x64 20H2\\n- Python 3.9.7\\n- Django 3.2.7\\n- pyinstaller 4.7\\n\\n## 解決方法\\n先前使用`pyinstaller -F .\\\\manage.py`直接打包產生exe檔案，但是因為錯誤訊息提示缺少模組，其中一個解決方法是將錯誤訊息顯示的模組手動加入到hiddenimports中\\n\\n首先使用`pyi-makespec -F .\\\\manage.py`指令產生spec檔，在檔案裡的hiddenimports中加入錯誤訊息所提示的模組名稱\\n![0.1-1](__GHOST_URL__/content/images/2021/11/0.1-1.png)\\n\\n![0.2](__GHOST_URL__/content/images/2021/11/0.2.png)\\n\\n接著使用`pyinstaller -F .\\\\manage.spec`指令將spec檔案打包成exe檔，再次使用`manage.exe runserver --noreload`指令執行顯示已可正常運作\\n\\n![0.3](__GHOST_URL__/content/images/2021/11/0.3.png)\\n\\n\"}]],\"markups\":[],\"sections\":[[10,0],[1,\"p\",[]]],\"ghostVersion\":\"3.0\"}","lexical":null,"html":"<!--kg-card-begin: markdown--><p><img src=\"__GHOST_URL__/content/images/2021/11/0.0-1.png\" alt=\"0.0-1\" loading=\"lazy\"></p>\n<p>使用pyinstaller將manage.py打包後會產生manage.exe可執行檔，在執行<code>manage.exe runserver --noreload</code>指令時發生<em>ModuleNotFoundError: No module named 'XXX'.</em> 錯誤</p>\n<h2 id=\"\">環境</h2>\n<ul>\n<li>Windows10 x64 20H2</li>\n<li>Python 3.9.7</li>\n<li>Django 3.2.7</li>\n<li>pyinstaller 4.7</li>\n</ul>\n<h2 id=\"\">解決方法</h2>\n<p>先前使用<code>pyinstaller -F .\\manage.py</code>直接打包產生exe檔案，但是因為錯誤訊息提示缺少模組，其中一個解決方法是將錯誤訊息顯示的模組手動加入到hiddenimports中</p>\n<p>首先使用<code>pyi-makespec -F .\\manage.py</code>指令產生spec檔，在檔案裡的hiddenimports中加入錯誤訊息所提示的模組名稱<br>\n<img src=\"__GHOST_URL__/content/images/2021/11/0.1-1.png\" alt=\"0.1-1\" loading=\"lazy\"></p>\n<p><img src=\"__GHOST_URL__/content/images/2021/11/0.2.png\" alt=\"0.2\" loading=\"lazy\"></p>\n<p>接著使用<code>pyinstaller -F .\\manage.spec</code>指令將spec檔案打包成exe檔，再次使用<code>manage.exe runserver --noreload</code>指令執行顯示已可正常運作</p>\n<p><img src=\"__GHOST_URL__/content/images/2021/11/0.3.png\" alt=\"0.3\" loading=\"lazy\"></p>\n<!--kg-card-end: markdown-->","comment_id":"619e5c60bfa2143800faf4a8","plaintext":"\n\n\n使用pyinstaller將manage.py打包後會產生manage.exe可執行檔，在執行manage.exe runserver --noreload指令時發生ModuleNotFoundError: No module named 'XXX'. 錯誤\n\n\n\n環境\n\n\n * Windows10 x64 20H2\n * Python 3.9.7\n * Django 3.2.7\n * pyinstaller 4.7\n\n\n\n解決方法\n\n\n先前使用pyinstaller -F .\\manage.py直接打包產生exe檔案，但是因為錯誤訊息提示缺少模組，其中一個解決方法是將錯誤訊息顯示的模組手動加入到hiddenimports中\n\n\n首先使用pyi-makespec -F .\\manage.py指令產生spec檔，在檔案裡的hiddenimports中加入錯誤訊息所提示的模組名稱\n\n\n\n\n\n\n\n接著使用pyinstaller -F .\\manage.spec指令將spec檔案打包成exe檔，再次使用manage.exe runserver --noreload指令執行顯示已可正常運作\n\n\n\n","feature_image":"__GHOST_URL__/content/images/2021/11/python-logo-1.jpg","featured":0,"type":"post","status":"published","locale":null,"visibility":"public","email_recipient_filter":"none","created_at":"2021-11-24 15:38:08","created_by":"1","updated_at":"2021-11-24 15:39:29","updated_by":null,"published_at":"2021-11-24 15:39:29","published_by":"1","custom_excerpt":"使用pyinstaller將manage.py打包後會產生manage.exe可執行檔，在執行`manage.exe runserver --noreload`指令時發生*ModuleNotFoundError: No module named 'XXX'.* 錯誤","codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null,"newsletter_id":null},{"id":"635a9a038162df0fda69a49f","uuid":"3e6efe74-4a1f-4d13-b038-eea15013a462","title":"Tags","slug":"tags","mobiledoc":"{\"version\":\"0.3.1\",\"ghostVersion\":\"4.0\",\"markups\":[],\"atoms\":[],\"cards\":[],\"sections\":[[1,\"p\",[[0,[],0,\"\"]]]]}","lexical":null,"html":null,"comment_id":"635a9a038162df0fda69a49f","plaintext":null,"feature_image":"__GHOST_URL__/content/images/2022/10/IMG_8174-1.jpg","featured":0,"type":"page","status":"published","locale":null,"visibility":"public","email_recipient_filter":"all","created_at":"2022-10-27 14:47:31","created_by":"1","updated_at":"2022-10-27 14:47:50","updated_by":"1","published_at":"2022-10-27 14:47:50","published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null,"newsletter_id":null},{"id":"635cf0c86c901d4844747e39","uuid":"f84a17a3-0b6f-40d9-8ec5-f1c703bfa954","title":"[PostgreSQL]執行UPDATE時自動記錄更新時間","slug":"postgresql-write-timestamp-on-update","mobiledoc":"{\"version\":\"0.3.1\",\"atoms\":[],\"cards\":[[\"markdown\",{\"markdown\":\"若需要用到「依照更新順序排列資料」功能時，則會需要在表格被變動時在某個欄位紀錄該筆資料的變更時間以進行排序，這篇筆記在table中新增update_at欄位並使用TRIGGER及FUNCTION對其進行更新，以達成在更新紀錄時自動記錄更新時間的功能\\n\\n\\n## 環境\\n- macOS Big Sur 11.6.5\\n- PostgreSQL 14\\n\\n## 建立更新函式\\n\\n要更新時間欄位就必須有一個函式負責此工作，新增一個函式，當被呼叫時就會返回目前的時間，以達成更新時間的目的\\n\\n```sql\\nCREATE OR REPLACE FUNCTION update_modified_column()\\nRETURNS TRIGGER AS $$\\nBEGIN\\n    NEW.update_at = now();\\n    RETURN NEW;\\nEND;\\n$$ language 'plpgsql';\\n```\\n\\n## 建立資料表\\n\\n在建立資料表時需要在資料表中新增一個update_at記錄更新時間，如果需要知道建立時間也可以建立一個create_at欄位順便記錄建立時間\\n\\n```sql\\nCREATE TABLE product (\\n    product_id BIGSERIAL PRIMARY KEY,--商品編號\\n    product_name VARCHAR(256) NOT NULL,--商品名稱\\n    stocks INTEGER NOT NULL,--庫存\\n    create_at timestamp(6) default current_timestamp,--建立時間\\n    update_at timestamp(6) default current_timestamp,--更新時間\\n);\\n```\\n以product資料表為例，需在資料表中新增資料型態為`timestamp(6)`的create_at及update_at欄位。後面的`default current_timestamp`參數可以在資料表新增資料時就寫入目前的時間，以正確記錄create_at的數值，而update_at則會在更新資料時被改變\\n\\n## 建立觸發器\\n當函式及欄位都準備好後，需要在執行UPDATE語句時觸發剛才建立好的update_modified_column函式。建立一個名稱為product_update_at的TRIGGER，當product資料表的某個資料被更新時就自動執行update_modified_column函式，自動更新該筆資料的update_at欄位。\\n\\n```sql\\nCREATE TRIGGER product_update_at BEFORE UPDATE ON product FOR EACH ROW EXECUTE PROCEDURE update_modified_column();\\n```\"}]],\"markups\":[],\"sections\":[[10,0],[1,\"p\",[]]],\"ghostVersion\":\"4.0\"}","lexical":null,"html":"<!--kg-card-begin: markdown--><p>若需要用到「依照更新順序排列資料」功能時，則會需要在表格被變動時在某個欄位紀錄該筆資料的變更時間以進行排序，這篇筆記在table中新增update_at欄位並使用TRIGGER及FUNCTION對其進行更新，以達成在更新紀錄時自動記錄更新時間的功能</p>\n<h2 id=\"%E7%92%B0%E5%A2%83\">環境</h2>\n<ul>\n<li>macOS Big Sur 11.6.5</li>\n<li>PostgreSQL 14</li>\n</ul>\n<h2 id=\"%E5%BB%BA%E7%AB%8B%E6%9B%B4%E6%96%B0%E5%87%BD%E5%BC%8F\">建立更新函式</h2>\n<p>要更新時間欄位就必須有一個函式負責此工作，新增一個函式，當被呼叫時就會返回目前的時間，以達成更新時間的目的</p>\n<pre><code class=\"language-sql\">CREATE OR REPLACE FUNCTION update_modified_column()\nRETURNS TRIGGER AS $$\nBEGIN\n    NEW.update_at = now();\n    RETURN NEW;\nEND;\n$$ language 'plpgsql';\n</code></pre>\n<h2 id=\"%E5%BB%BA%E7%AB%8B%E8%B3%87%E6%96%99%E8%A1%A8\">建立資料表</h2>\n<p>在建立資料表時需要在資料表中新增一個update_at記錄更新時間，如果需要知道建立時間也可以建立一個create_at欄位順便記錄建立時間</p>\n<pre><code class=\"language-sql\">CREATE TABLE product (\n    product_id BIGSERIAL PRIMARY KEY,--商品編號\n    product_name VARCHAR(256) NOT NULL,--商品名稱\n    stocks INTEGER NOT NULL,--庫存\n    create_at timestamp(6) default current_timestamp,--建立時間\n    update_at timestamp(6) default current_timestamp,--更新時間\n);\n</code></pre>\n<p>以product資料表為例，需在資料表中新增資料型態為<code>timestamp(6)</code>的create_at及update_at欄位。後面的<code>default current_timestamp</code>參數可以在資料表新增資料時就寫入目前的時間，以正確記錄create_at的數值，而update_at則會在更新資料時被改變</p>\n<h2 id=\"%E5%BB%BA%E7%AB%8B%E8%A7%B8%E7%99%BC%E5%99%A8\">建立觸發器</h2>\n<p>當函式及欄位都準備好後，需要在執行UPDATE語句時觸發剛才建立好的update_modified_column函式。建立一個名稱為product_update_at的TRIGGER，當product資料表的某個資料被更新時就自動執行update_modified_column函式，自動更新該筆資料的update_at欄位。</p>\n<pre><code class=\"language-sql\">CREATE TRIGGER product_update_at BEFORE UPDATE ON product FOR EACH ROW EXECUTE PROCEDURE update_modified_column();\n</code></pre>\n<!--kg-card-end: markdown-->","comment_id":"635cf0c86c901d4844747e39","plaintext":"若需要用到「依照更新順序排列資料」功能時，則會需要在表格被變動時在某個欄位紀錄該筆資料的變更時間以進行排序，這篇筆記在table中新增update_at欄位並使用TRIGGER及FUNCTION對其進行更新，以達成在更新紀錄時自動記錄更新時間的功能\n\n\n\n環境\n\n\n * macOS Big Sur 11.6.5\n * PostgreSQL 14\n\n\n\n建立更新函式\n\n\n要更新時間欄位就必須有一個函式負責此工作，新增一個函式，當被呼叫時就會返回目前的時間，以達成更新時間的目的\n\n\nCREATE OR REPLACE FUNCTION update_modified_column()\nRETURNS TRIGGER AS $$\nBEGIN\n    NEW.update_at = now();\n    RETURN NEW;\nEND;\n$$ language 'plpgsql';\n\n\n\n\n建立資料表\n\n\n在建立資料表時需要在資料表中新增一個update_at記錄更新時間，如果需要知道建立時間也可以建立一個create_at欄位順便記錄建立時間\n\n\nCREATE TABLE product (\n    product_id BIGSERIAL PRIMARY KEY,--商品編號\n    product_name VARCHAR(256) NOT NULL,--商品名稱\n    stocks INTEGER NOT NULL,--庫存\n    create_at timestamp(6) default current_timestamp,--建立時間\n    update_at timestamp(6) default current_timestamp,--更新時間\n);\n\n\n\n以product資料表為例，需在資料表中新增資料型態為timestamp(6)的create_at及update_at欄位。後面的default current_timestamp參數可以在資料表新增資料時就寫入目前的時間，以正確記錄create_at的數值，而update_at則會在更新資料時被改變\n\n\n\n建立觸發器\n\n\n當函式及欄位都準備好後，需要在執行UPDATE語句時觸發剛才建立好的update_modified_column函式。建立一個名稱為product_update_at的TRIGGER，當product資料表的某個資料被更新時就自動執行update_modified_column函式，自動更新該筆資料的update_at欄位。\n\n\nCREATE TRIGGER product_update_at BEFORE UPDATE ON product FOR EACH ROW EXECUTE PROCEDURE update_modified_column();\n\n","feature_image":"__GHOST_URL__/content/images/2022/10/jan-antonin-kolar-lRoX0shwjUQ-unsplash_database.jpeg","featured":0,"type":"post","status":"published","locale":null,"visibility":"public","email_recipient_filter":"all","created_at":"2022-10-29 09:22:16","created_by":"1","updated_at":"2022-10-29 09:35:41","updated_by":"1","published_at":"2022-07-30 09:22:00","published_by":"1","custom_excerpt":"若需要用到「依照更新順序排列資料」功能時，則會需要在表格被變動時在某個欄位紀錄該筆資料的變更時間以進行排序，這篇筆記在table中新增update_at欄位並使用TRIGGER及FUNCTION對其進行更新，以達成在更新紀錄時自動記錄更新時間的功能","codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null,"newsletter_id":null},{"id":"635cf62e6c901d4844747e4b","uuid":"1c0d9cf8-3403-425b-a931-f756c89a9681","title":"ElasticSearch簡介","slug":"elasticsearch-intro","mobiledoc":"{\"version\":\"0.3.1\",\"atoms\":[],\"cards\":[[\"markdown\",{\"markdown\":\"ElasticSearch是一個開源的且基於Lucene的全文搜尋引擎，其封裝Lucene並提供REST API，讓使用者可以更容易操作及使用。\\n\\n## 環境\\n- macOS Monterey 12.4\\n- elasticsearch 8.2.3\\n- medcl/elasticsearch-analysis-ik 8.2.3\\n\\n## 安裝\\n到[elasticsearch官網](https://www.elastic.co/downloads/elasticsearch)下載mac版本的壓縮檔，解壓縮後執行`bin/elasticsearch`檔案，elasticsearch便會啟動並在port9200提供服務\\n\\n發送GET請求到9200port測試服務狀態\\n```bash\\n$ curl localhost:9200\\n```\\n\\n### 安全性問題\\n:::warning\\n[WARN ][o.e.x.s.t.n.SecurityNetty4HttpServerTransport] [userde-MacBook-Pro.local] received plaintext http traffic on an https channel, closing connection Netty4HttpChannel{localAddress=/[0:0:0:0:0:0:0:1]:9200, remoteAddress=/[0:0:0:0:0:0:0:1]:52561}\\n:::\\n若出現以上錯誤訊息時可以先暫時先將elasticsearch.yaml中的`xpack.security.enabled`的選項設為false，測試完畢後務必恢復為true並進行正確的安全性設定\\n\\n### 完成\\n若系統正常會返回下列訊息\\n```bash\\n#返回結果\\n{\\n  \\\"name\\\" : \\\"userde-MacBook-Pro.local\\\",\\n  \\\"cluster_name\\\" : \\\"elasticsearch\\\",\\n  \\\"cluster_uuid\\\" : \\\"dx3b4E2jR_OjrKtB-ZMAlw\\\",\\n  \\\"version\\\" : {\\n    \\\"number\\\" : \\\"8.2.3\\\",\\n    \\\"build_flavor\\\" : \\\"default\\\",\\n    \\\"build_type\\\" : \\\"tar\\\",\\n    \\\"build_hash\\\" : \\\"9905bfb62a3f0b044948376b4f607f70a8a151b4\\\",\\n    \\\"build_date\\\" : \\\"2022-06-08T22:21:36.455508792Z\\\",\\n    \\\"build_snapshot\\\" : false,\\n    \\\"lucene_version\\\" : \\\"9.1.0\\\",\\n    \\\"minimum_wire_compatibility_version\\\" : \\\"7.17.0\\\",\\n    \\\"minimum_index_compatibility_version\\\" : \\\"7.0.0\\\"\\n  },\\n  \\\"tagline\\\" : \\\"You Know, for Search\\\"\\n}\\n\\n```\\n\\n## 基本概念\\nElasticSearch的最高單位是Index，相當於資料庫。在Index下會有很多Document，一個記錄稱為一個Document，Index包含了多個Document。\\n\\n### Index\\n- 為ElasticSearch中的最高單位\\n- 相當於一個資料庫\\n- Index的名稱必須是小寫\\n\\n### Document\\n- Document為一條記錄，Index下可以存放多個Document\\n- 每個Document的結構可以不同，但最好一樣，以提高搜尋速度\\n\\n## Index操作\\n\\n### 新增Index\\n```bash\\n# 新增一個名稱為customers的Index\\n$ curl -X PUT 'localhost:9200/customers'\\n```\\n```bash\\n#返回結果\\n{\\n    \\\"acknowledged\\\":true,\\n    \\\"shards_acknowledged\\\":true,\\n    \\\"index\\\":\\\"customers\\\"\\n}\\n```\\n若成功ElasticSearch會返回acknowledged為true的訊息\\n\\n### 刪除Index\\n```bash\\n# 刪除名稱為customers的Index\\n$ curl -X DELETE 'localhost:9200/customers'\\n```\\n```bash\\n#返回結果\\n{\\n    \\\"acknowledged\\\":true\\n}\\n```\\n若成功一樣會返回acknowledged為true的訊息\\n\\n## 分詞\\n\\n### 安裝分詞插件\\n在使用全文搜索時若有使用中文內容的需求，需要安裝中文分詞插件\\n:::warning\\n分詞插件的版本號必須與ElasticSearch相同，否則無法指定分詞插件並且會跳出錯誤訊息（Failed to parse mapping: analyzer [ik_max_word] has not been configured in mappings）\\n:::\\n```bash!\\n$ ./bin/elasticsearch-plugin install https://github.com/medcl/elasticsearch-analysis-ik/releases/download/v8.2.3/elasticsearch-analysis-ik-8.2.3.zip\\n```\\n將上面指令的版本號換成與ElasticSearch相對應的版本號即可安裝\\n安裝完會顯示安裝成功訊息，重新開啟ElasticSearch即可\\n![pEabu3Q](__GHOST_URL__/content/images/2022/10/pEabu3Q.png)\\n\\n```\\n-> Installed analysis-ik\\n-> Please restart Elasticsearch to activate any plugins installed\\n```\\n\\n### 設定分詞\\n在設定中文分詞（medcl/elasticsearch-analysis-ik）之前必須要先安裝插件\\n僅使用英文分詞的話不需要安裝插件，直接在`analyzer`和`search_analyzer`替換成內建的`standard`即可\\n```bash\\n$ curl \\\\\\n-H \\\"Content-Type: application/json\\\" \\\\\\n-X PUT 'localhost:9200/customers' \\\\\\n-d '\\n{\\n    \\\"mappings\\\": \\n    {\\n        \\\"properties\\\": {\\n            \\\"name\\\": \\n            {\\n                \\\"type\\\": \\\"text\\\", \\n                \\\"analyzer\\\": \\\"ik_max_word\\\",\\n                \\\"search_analyzer\\\": \\\"ik_max_word\\\"\\n            },\\n            \\\"address\\\": \\n            {\\n                \\\"type\\\":\\\"text\\\", \\n                \\\"analyzer\\\": \\\"ik_max_word\\\",\\n                \\\"search_analyzer\\\": \\\"ik_max_word\\\"\\n            },\\n            \\\"room\\\": \\n            {\\n                \\\"type\\\": \\\"text\\\", \\n                \\\"analyzer\\\": \\\"ik_max_word\\\",\\n                \\\"search_analyzer\\\": \\\"ik_max_word\\\"\\n            }\\n        }\\n    }\\n}'\\n```\\n\\n```bash\\n# 返回結果\\n{\\\"acknowledged\\\":true,\\\"shards_acknowledged\\\":true,\\\"index\\\":\\\"customers\\\"}\\n```\\n\\n## Document操作\\n\\n### 新增Document\\n```bash\\n$ curl \\\\\\n-H \\\"Content-Type: application/json\\\" \\\\\\n-X POST 'localhost:9200/customers/_doc/1' \\\\\\n-d '\\n{\\n  \\\"name\\\": \\\"田中太郎2\\\",\\n  \\\"address\\\": \\\"北海道室蘭市水元町57-8\\\",\\n  \\\"room\\\": \\\"A303\\\"\\n}'\\n```\\n\\n```bash\\n# 返回結果\\n{\\n    \\\"_index\\\":\\\"customers\\\",\\n    \\\"_id\\\":\\\"1\\\",\\n    \\\"_version\\\":1,\\n    \\\"result\\\":\\\"created\\\",\\n    \\\"_shards\\\":{\\\"total\\\":2,\\\"successful\\\":1,\\\"failed\\\":0},\\n    \\\"_seq_no\\\":0,\\n    \\\"_primary_term\\\":1\\n}\\n```\\n\\n### 刪除Document\\n```bash\\n# 刪除名稱為customers的Index\\n$ curl -X DELETE 'localhost:9200/customers/_doc/1'\\n```\\n```bash\\n#返回結果\\n{\\n    \\\"_index\\\":\\\"customers\\\",\\n    \\\"_id\\\":\\\"1\\\",\\\"_version\\\":2,\\n    \\\"result\\\":\\\"deleted\\\",\\n    \\\"_shards\\\":\\n    {\\n        \\\"total\\\":2,\\n        \\\"successful\\\":1,\\n        \\\"failed\\\":0\\n    },\\n    \\\"_seq_no\\\":2,\\n    \\\"_primary_term\\\":1\\n}\\n```\\n若成功一樣會返回成功訊息\\n\\n## 查詢操作\\n\\n### 查詢所有Document\\n使用GET方法並在Index後方加上_search查詢所有Document\\n```bash\\n$ curl 'localhost:9200/customers/_search'\\n```\\n\\n### 查詢特定Document\\n使用GET方法並加上Document的id，以查找特定id的資訊\\n```bash\\n$ curl 'localhost:9200/customers/_doc/1?pretty=true'\\n```\\n\\n### 全文搜索\\n使用GET方法並使用query、match等關鍵字及要查找的欄位及內容進行查詢\\n```bash\\n$ curl \\\\\\n-H \\\"Content-Type: application/json\\\" \\\\\\n-X GET 'localhost:9200/customers/_search'  -d '\\n{\\n  \\\"query\\\" : { \\\"match\\\" : { \\\"address\\\" : \\\"44\\\" }}\\n}'\\n```\\n\\n## 參考資料\\n- [全文搜索引擎 Elasticsearch 入门教程](https://www.ruanyifeng.com/blog/2017/08/elasticsearch.html)\\n- [A Practical Introduction to Elasticsearch](https://www.elastic.co/blog/a-practical-introduction-to-elasticsearch)\"}]],\"markups\":[],\"sections\":[[10,0],[1,\"p\",[]]],\"ghostVersion\":\"4.0\"}","lexical":null,"html":"<!--kg-card-begin: markdown--><p>ElasticSearch是一個開源的且基於Lucene的全文搜尋引擎，其封裝Lucene並提供REST API，讓使用者可以更容易操作及使用。</p>\n<h2 id=\"%E7%92%B0%E5%A2%83\">環境</h2>\n<ul>\n<li>macOS Monterey 12.4</li>\n<li>elasticsearch 8.2.3</li>\n<li>medcl/elasticsearch-analysis-ik 8.2.3</li>\n</ul>\n<h2 id=\"%E5%AE%89%E8%A3%9D\">安裝</h2>\n<p>到<a href=\"https://www.elastic.co/downloads/elasticsearch\">elasticsearch官網</a>下載mac版本的壓縮檔，解壓縮後執行<code>bin/elasticsearch</code>檔案，elasticsearch便會啟動並在port9200提供服務</p>\n<p>發送GET請求到9200port測試服務狀態</p>\n<pre><code class=\"language-bash\">$ curl localhost:9200\n</code></pre>\n<h3 id=\"%E5%AE%89%E5%85%A8%E6%80%A7%E5%95%8F%E9%A1%8C\">安全性問題</h3>\n<p>:::warning<br>\n[WARN ][o.e.x.s.t.n.SecurityNetty4HttpServerTransport] [userde-MacBook-Pro.local] received plaintext http traffic on an https channel, closing connection Netty4HttpChannel{localAddress=/[0:0:0:0:0:0:0:1]:9200, remoteAddress=/[0:0:0:0:0:0:0:1]:52561}<br>\n:::<br>\n若出現以上錯誤訊息時可以先暫時先將elasticsearch.yaml中的<code>xpack.security.enabled</code>的選項設為false，測試完畢後務必恢復為true並進行正確的安全性設定</p>\n<h3 id=\"%E5%AE%8C%E6%88%90\">完成</h3>\n<p>若系統正常會返回下列訊息</p>\n<pre><code class=\"language-bash\">#返回結果\n{\n  &quot;name&quot; : &quot;userde-MacBook-Pro.local&quot;,\n  &quot;cluster_name&quot; : &quot;elasticsearch&quot;,\n  &quot;cluster_uuid&quot; : &quot;dx3b4E2jR_OjrKtB-ZMAlw&quot;,\n  &quot;version&quot; : {\n    &quot;number&quot; : &quot;8.2.3&quot;,\n    &quot;build_flavor&quot; : &quot;default&quot;,\n    &quot;build_type&quot; : &quot;tar&quot;,\n    &quot;build_hash&quot; : &quot;9905bfb62a3f0b044948376b4f607f70a8a151b4&quot;,\n    &quot;build_date&quot; : &quot;2022-06-08T22:21:36.455508792Z&quot;,\n    &quot;build_snapshot&quot; : false,\n    &quot;lucene_version&quot; : &quot;9.1.0&quot;,\n    &quot;minimum_wire_compatibility_version&quot; : &quot;7.17.0&quot;,\n    &quot;minimum_index_compatibility_version&quot; : &quot;7.0.0&quot;\n  },\n  &quot;tagline&quot; : &quot;You Know, for Search&quot;\n}\n\n</code></pre>\n<h2 id=\"%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5\">基本概念</h2>\n<p>ElasticSearch的最高單位是Index，相當於資料庫。在Index下會有很多Document，一個記錄稱為一個Document，Index包含了多個Document。</p>\n<h3 id=\"index\">Index</h3>\n<ul>\n<li>為ElasticSearch中的最高單位</li>\n<li>相當於一個資料庫</li>\n<li>Index的名稱必須是小寫</li>\n</ul>\n<h3 id=\"document\">Document</h3>\n<ul>\n<li>Document為一條記錄，Index下可以存放多個Document</li>\n<li>每個Document的結構可以不同，但最好一樣，以提高搜尋速度</li>\n</ul>\n<h2 id=\"index%E6%93%8D%E4%BD%9C\">Index操作</h2>\n<h3 id=\"%E6%96%B0%E5%A2%9Eindex\">新增Index</h3>\n<pre><code class=\"language-bash\"># 新增一個名稱為customers的Index\n$ curl -X PUT 'localhost:9200/customers'\n</code></pre>\n<pre><code class=\"language-bash\">#返回結果\n{\n    &quot;acknowledged&quot;:true,\n    &quot;shards_acknowledged&quot;:true,\n    &quot;index&quot;:&quot;customers&quot;\n}\n</code></pre>\n<p>若成功ElasticSearch會返回acknowledged為true的訊息</p>\n<h3 id=\"%E5%88%AA%E9%99%A4index\">刪除Index</h3>\n<pre><code class=\"language-bash\"># 刪除名稱為customers的Index\n$ curl -X DELETE 'localhost:9200/customers'\n</code></pre>\n<pre><code class=\"language-bash\">#返回結果\n{\n    &quot;acknowledged&quot;:true\n}\n</code></pre>\n<p>若成功一樣會返回acknowledged為true的訊息</p>\n<h2 id=\"%E5%88%86%E8%A9%9E\">分詞</h2>\n<h3 id=\"%E5%AE%89%E8%A3%9D%E5%88%86%E8%A9%9E%E6%8F%92%E4%BB%B6\">安裝分詞插件</h3>\n<p>在使用全文搜索時若有使用中文內容的需求，需要安裝中文分詞插件<br>\n:::warning<br>\n分詞插件的版本號必須與ElasticSearch相同，否則無法指定分詞插件並且會跳出錯誤訊息（Failed to parse mapping: analyzer [ik_max_word] has not been configured in mappings）<br>\n:::</p>\n<pre><code class=\"language-bash!\">$ ./bin/elasticsearch-plugin install https://github.com/medcl/elasticsearch-analysis-ik/releases/download/v8.2.3/elasticsearch-analysis-ik-8.2.3.zip\n</code></pre>\n<p>將上面指令的版本號換成與ElasticSearch相對應的版本號即可安裝<br>\n安裝完會顯示安裝成功訊息，重新開啟ElasticSearch即可<br>\n<img src=\"__GHOST_URL__/content/images/2022/10/pEabu3Q.png\" alt=\"pEabu3Q\" loading=\"lazy\"></p>\n<pre><code>-&gt; Installed analysis-ik\n-&gt; Please restart Elasticsearch to activate any plugins installed\n</code></pre>\n<h3 id=\"%E8%A8%AD%E5%AE%9A%E5%88%86%E8%A9%9E\">設定分詞</h3>\n<p>在設定中文分詞（medcl/elasticsearch-analysis-ik）之前必須要先安裝插件<br>\n僅使用英文分詞的話不需要安裝插件，直接在<code>analyzer</code>和<code>search_analyzer</code>替換成內建的<code>standard</code>即可</p>\n<pre><code class=\"language-bash\">$ curl \\\n-H &quot;Content-Type: application/json&quot; \\\n-X PUT 'localhost:9200/customers' \\\n-d '\n{\n    &quot;mappings&quot;: \n    {\n        &quot;properties&quot;: {\n            &quot;name&quot;: \n            {\n                &quot;type&quot;: &quot;text&quot;, \n                &quot;analyzer&quot;: &quot;ik_max_word&quot;,\n                &quot;search_analyzer&quot;: &quot;ik_max_word&quot;\n            },\n            &quot;address&quot;: \n            {\n                &quot;type&quot;:&quot;text&quot;, \n                &quot;analyzer&quot;: &quot;ik_max_word&quot;,\n                &quot;search_analyzer&quot;: &quot;ik_max_word&quot;\n            },\n            &quot;room&quot;: \n            {\n                &quot;type&quot;: &quot;text&quot;, \n                &quot;analyzer&quot;: &quot;ik_max_word&quot;,\n                &quot;search_analyzer&quot;: &quot;ik_max_word&quot;\n            }\n        }\n    }\n}'\n</code></pre>\n<pre><code class=\"language-bash\"># 返回結果\n{&quot;acknowledged&quot;:true,&quot;shards_acknowledged&quot;:true,&quot;index&quot;:&quot;customers&quot;}\n</code></pre>\n<h2 id=\"document%E6%93%8D%E4%BD%9C\">Document操作</h2>\n<h3 id=\"%E6%96%B0%E5%A2%9Edocument\">新增Document</h3>\n<pre><code class=\"language-bash\">$ curl \\\n-H &quot;Content-Type: application/json&quot; \\\n-X POST 'localhost:9200/customers/_doc/1' \\\n-d '\n{\n  &quot;name&quot;: &quot;田中太郎2&quot;,\n  &quot;address&quot;: &quot;北海道室蘭市水元町57-8&quot;,\n  &quot;room&quot;: &quot;A303&quot;\n}'\n</code></pre>\n<pre><code class=\"language-bash\"># 返回結果\n{\n    &quot;_index&quot;:&quot;customers&quot;,\n    &quot;_id&quot;:&quot;1&quot;,\n    &quot;_version&quot;:1,\n    &quot;result&quot;:&quot;created&quot;,\n    &quot;_shards&quot;:{&quot;total&quot;:2,&quot;successful&quot;:1,&quot;failed&quot;:0},\n    &quot;_seq_no&quot;:0,\n    &quot;_primary_term&quot;:1\n}\n</code></pre>\n<h3 id=\"%E5%88%AA%E9%99%A4document\">刪除Document</h3>\n<pre><code class=\"language-bash\"># 刪除名稱為customers的Index\n$ curl -X DELETE 'localhost:9200/customers/_doc/1'\n</code></pre>\n<pre><code class=\"language-bash\">#返回結果\n{\n    &quot;_index&quot;:&quot;customers&quot;,\n    &quot;_id&quot;:&quot;1&quot;,&quot;_version&quot;:2,\n    &quot;result&quot;:&quot;deleted&quot;,\n    &quot;_shards&quot;:\n    {\n        &quot;total&quot;:2,\n        &quot;successful&quot;:1,\n        &quot;failed&quot;:0\n    },\n    &quot;_seq_no&quot;:2,\n    &quot;_primary_term&quot;:1\n}\n</code></pre>\n<p>若成功一樣會返回成功訊息</p>\n<h2 id=\"%E6%9F%A5%E8%A9%A2%E6%93%8D%E4%BD%9C\">查詢操作</h2>\n<h3 id=\"%E6%9F%A5%E8%A9%A2%E6%89%80%E6%9C%89document\">查詢所有Document</h3>\n<p>使用GET方法並在Index後方加上_search查詢所有Document</p>\n<pre><code class=\"language-bash\">$ curl 'localhost:9200/customers/_search'\n</code></pre>\n<h3 id=\"%E6%9F%A5%E8%A9%A2%E7%89%B9%E5%AE%9Adocument\">查詢特定Document</h3>\n<p>使用GET方法並加上Document的id，以查找特定id的資訊</p>\n<pre><code class=\"language-bash\">$ curl 'localhost:9200/customers/_doc/1?pretty=true'\n</code></pre>\n<h3 id=\"%E5%85%A8%E6%96%87%E6%90%9C%E7%B4%A2\">全文搜索</h3>\n<p>使用GET方法並使用query、match等關鍵字及要查找的欄位及內容進行查詢</p>\n<pre><code class=\"language-bash\">$ curl \\\n-H &quot;Content-Type: application/json&quot; \\\n-X GET 'localhost:9200/customers/_search'  -d '\n{\n  &quot;query&quot; : { &quot;match&quot; : { &quot;address&quot; : &quot;44&quot; }}\n}'\n</code></pre>\n<h2 id=\"%E5%8F%83%E8%80%83%E8%B3%87%E6%96%99\">參考資料</h2>\n<ul>\n<li><a href=\"https://www.ruanyifeng.com/blog/2017/08/elasticsearch.html\">全文搜索引擎 Elasticsearch 入门教程</a></li>\n<li><a href=\"https://www.elastic.co/blog/a-practical-introduction-to-elasticsearch\">A Practical Introduction to Elasticsearch</a></li>\n</ul>\n<!--kg-card-end: markdown-->","comment_id":"635cf62e6c901d4844747e4b","plaintext":"ElasticSearch是一個開源的且基於Lucene的全文搜尋引擎，其封裝Lucene並提供REST API，讓使用者可以更容易操作及使用。\n\n\n\n環境\n\n\n * macOS Monterey 12.4\n * elasticsearch 8.2.3\n * medcl/elasticsearch-analysis-ik 8.2.3\n\n\n\n安裝\n\n\n到elasticsearch官網下載mac版本的壓縮檔，解壓縮後執行bin/elasticsearch檔案，elasticsearch便會啟動並在port9200提供服務\n\n\n發送GET請求到9200port測試服務狀態\n\n\n$ curl localhost:9200\n\n\n\n\n安全性問題\n\n\n:::warning\n\n[WARN ][o.e.x.s.t.n.SecurityNetty4HttpServerTransport] [userde-MacBook-Pro.local] received plaintext http traffic on an https channel, closing connection Netty4HttpChannel{localAddress=/[0:0:0:0:0:0:0:1]:9200, remoteAddress=/[0:0:0:0:0:0:0:1]:52561}\n\n:::\n\n若出現以上錯誤訊息時可以先暫時先將elasticsearch.yaml中的xpack.security.enabled的選項設為false，測試完畢後務必恢復為true並進行正確的安全性設定\n\n\n\n完成\n\n\n若系統正常會返回下列訊息\n\n\n#返回結果\n{\n  \"name\" : \"userde-MacBook-Pro.local\",\n  \"cluster_name\" : \"elasticsearch\",\n  \"cluster_uuid\" : \"dx3b4E2jR_OjrKtB-ZMAlw\",\n  \"version\" : {\n    \"number\" : \"8.2.3\",\n    \"build_flavor\" : \"default\",\n    \"build_type\" : \"tar\",\n    \"build_hash\" : \"9905bfb62a3f0b044948376b4f607f70a8a151b4\",\n    \"build_date\" : \"2022-06-08T22:21:36.455508792Z\",\n    \"build_snapshot\" : false,\n    \"lucene_version\" : \"9.1.0\",\n    \"minimum_wire_compatibility_version\" : \"7.17.0\",\n    \"minimum_index_compatibility_version\" : \"7.0.0\"\n  },\n  \"tagline\" : \"You Know, for Search\"\n}\n\n\n\n\n\n基本概念\n\n\nElasticSearch的最高單位是Index，相當於資料庫。在Index下會有很多Document，一個記錄稱為一個Document，Index包含了多個Document。\n\n\n\nIndex\n\n\n * 為ElasticSearch中的最高單位\n * 相當於一個資料庫\n * Index的名稱必須是小寫\n\n\n\nDocument\n\n\n * Document為一條記錄，Index下可以存放多個Document\n * 每個Document的結構可以不同，但最好一樣，以提高搜尋速度\n\n\n\nIndex操作\n\n\n\n新增Index\n\n\n# 新增一個名稱為customers的Index\n$ curl -X PUT 'localhost:9200/customers'\n\n\n\n#返回結果\n{\n    \"acknowledged\":true,\n    \"shards_acknowledged\":true,\n    \"index\":\"customers\"\n}\n\n\n\n若成功ElasticSearch會返回acknowledged為true的訊息\n\n\n\n刪除Index\n\n\n# 刪除名稱為customers的Index\n$ curl -X DELETE 'localhost:9200/customers'\n\n\n\n#返回結果\n{\n    \"acknowledged\":true\n}\n\n\n\n若成功一樣會返回acknowledged為true的訊息\n\n\n\n分詞\n\n\n\n安裝分詞插件\n\n\n在使用全文搜索時若有使用中文內容的需求，需要安裝中文分詞插件\n\n:::warning\n\n分詞插件的版本號必須與ElasticSearch相同，否則無法指定分詞插件並且會跳出錯誤訊息（Failed to parse mapping: analyzer [ik_max_word] has not been configured in mappings）\n\n:::\n\n\n$ ./bin/elasticsearch-plugin install https://github.com/medcl/elasticsearch-analysis-ik/releases/download/v8.2.3/elasticsearch-analysis-ik-8.2.3.zip\n\n\n\n將上面指令的版本號換成與ElasticSearch相對應的版本號即可安裝\n\n安裝完會顯示安裝成功訊息，重新開啟ElasticSearch即可\n\n\n\n\n-> Installed analysis-ik\n-> Please restart Elasticsearch to activate any plugins installed\n\n\n\n\n設定分詞\n\n\n在設定中文分詞（medcl/elasticsearch-analysis-ik）之前必須要先安裝插件\n\n僅使用英文分詞的話不需要安裝插件，直接在analyzer和search_analyzer替換成內建的standard即可\n\n\n$ curl \\\n-H \"Content-Type: application/json\" \\\n-X PUT 'localhost:9200/customers' \\\n-d '\n{\n    \"mappings\": \n    {\n        \"properties\": {\n            \"name\": \n            {\n                \"type\": \"text\", \n                \"analyzer\": \"ik_max_word\",\n                \"search_analyzer\": \"ik_max_word\"\n            },\n            \"address\": \n            {\n                \"type\":\"text\", \n                \"analyzer\": \"ik_max_word\",\n                \"search_analyzer\": \"ik_max_word\"\n            },\n            \"room\": \n            {\n                \"type\": \"text\", \n                \"analyzer\": \"ik_max_word\",\n                \"search_analyzer\": \"ik_max_word\"\n            }\n        }\n    }\n}'\n\n\n\n# 返回結果\n{\"acknowledged\":true,\"shards_acknowledged\":true,\"index\":\"customers\"}\n\n\n\n\nDocument操作\n\n\n\n新增Document\n\n\n$ curl \\\n-H \"Content-Type: application/json\" \\\n-X POST 'localhost:9200/customers/_doc/1' \\\n-d '\n{\n  \"name\": \"田中太郎2\",\n  \"address\": \"北海道室蘭市水元町57-8\",\n  \"room\": \"A303\"\n}'\n\n\n\n# 返回結果\n{\n    \"_index\":\"customers\",\n    \"_id\":\"1\",\n    \"_version\":1,\n    \"result\":\"created\",\n    \"_shards\":{\"total\":2,\"successful\":1,\"failed\":0},\n    \"_seq_no\":0,\n    \"_primary_term\":1\n}\n\n\n\n\n刪除Document\n\n\n# 刪除名稱為customers的Index\n$ curl -X DELETE 'localhost:9200/customers/_doc/1'\n\n\n\n#返回結果\n{\n    \"_index\":\"customers\",\n    \"_id\":\"1\",\"_version\":2,\n    \"result\":\"deleted\",\n    \"_shards\":\n    {\n        \"total\":2,\n        \"successful\":1,\n        \"failed\":0\n    },\n    \"_seq_no\":2,\n    \"_primary_term\":1\n}\n\n\n\n若成功一樣會返回成功訊息\n\n\n\n查詢操作\n\n\n\n查詢所有Document\n\n\n使用GET方法並在Index後方加上_search查詢所有Document\n\n\n$ curl 'localhost:9200/customers/_search'\n\n\n\n\n查詢特定Document\n\n\n使用GET方法並加上Document的id，以查找特定id的資訊\n\n\n$ curl 'localhost:9200/customers/_doc/1?pretty=true'\n\n\n\n\n全文搜索\n\n\n使用GET方法並使用query、match等關鍵字及要查找的欄位及內容進行查詢\n\n\n$ curl \\\n-H \"Content-Type: application/json\" \\\n-X GET 'localhost:9200/customers/_search'  -d '\n{\n  \"query\" : { \"match\" : { \"address\" : \"44\" }}\n}'\n\n\n\n\n參考資料\n\n\n * 全文搜索引擎 Elasticsearch 入门教程\n * A Practical Introduction to Elasticsearch\n","feature_image":"__GHOST_URL__/content/images/2022/10/daniel-lerman-fr3YLb9UHSQ-unsplash_search.jpeg","featured":0,"type":"post","status":"published","locale":null,"visibility":"public","email_recipient_filter":"all","created_at":"2022-10-29 09:45:18","created_by":"1","updated_at":"2022-10-29 09:54:55","updated_by":"1","published_at":"2022-10-29 09:54:55","published_by":"1","custom_excerpt":"ElasticSearch是一個開源的且基於Lucene的全文搜尋引擎，其封裝Lucene並提供REST API，讓使用者可以更容易操作及使用。","codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null,"newsletter_id":null},{"id":"635cf8c16c901d4844747e61","uuid":"4af56f1f-cfe0-4b78-908b-67afacd9057b","title":"Memory management","slug":"memory-management","mobiledoc":"{\"version\":\"0.3.1\",\"atoms\":[],\"cards\":[[\"markdown\",{\"markdown\":\"## Stack\\n- 在往stack儲存資料時不需查找，僅需儲存在最上面的區塊即可，非常快速\\n- 任何要存在stack的資料必須有限且靜態（資料大小必須在編譯時就知道）\\n- 函式的執行資料儲存在stack frames（actual execution stack），每個函式會有自己的frame區塊，當函式內宣告新變數時會將資料推到最上面的區塊。當每個函式結束時，會清除最上面的區塊，所有被推送到該區塊的變數將被清除。\\n- 每個thread可以有自己的一個stack\\n- 儲存在stack上的資料由OS操作，非常簡單明瞭\\n- 儲存在stack上的資料為區域變數（資料型態、primitives或primitive constants）、指標及function frames\\n- 當stack的size太大時會遇到stack overflow errors\\n- 大多數的語言對於可以儲存在stack的資料是有限制的\\n\\n## Heap\\n- 與stack不一樣，Heap需要使用指標尋找資料\\n- 比起stack，尋找資料的速度稍慢，但可以存放更大量的資料\\n- 動態大小的資料可以存放在Heap\\n- 在同個APP中Heap共享於threads之間\\n- 因為其動態的特性使得比較難維護和管理，這也是為什麼會有些語言會有自動記憶體管理的功能\\n- 儲存在Heap中的有全域變數、reference types（objects, strings, maps和其他較複雜的資料結構）\\n- 如果APP使用比被分配還要多的記憶體就會發生out of memory errors\\n- 通常沒有限制可以存在Heap的大小，不過也是要看該應用程式被分配到多少記憶體\\n\\n## Garbage Collection（GC）\\n有分兩種\\n- Mark & Sweep GC\\n- Reference counting GC\"}]],\"markups\":[],\"sections\":[[10,0],[1,\"p\",[]]],\"ghostVersion\":\"4.0\"}","lexical":null,"html":"<!--kg-card-begin: markdown--><h2 id=\"stack\">Stack</h2>\n<ul>\n<li>在往stack儲存資料時不需查找，僅需儲存在最上面的區塊即可，非常快速</li>\n<li>任何要存在stack的資料必須有限且靜態（資料大小必須在編譯時就知道）</li>\n<li>函式的執行資料儲存在stack frames（actual execution stack），每個函式會有自己的frame區塊，當函式內宣告新變數時會將資料推到最上面的區塊。當每個函式結束時，會清除最上面的區塊，所有被推送到該區塊的變數將被清除。</li>\n<li>每個thread可以有自己的一個stack</li>\n<li>儲存在stack上的資料由OS操作，非常簡單明瞭</li>\n<li>儲存在stack上的資料為區域變數（資料型態、primitives或primitive constants）、指標及function frames</li>\n<li>當stack的size太大時會遇到stack overflow errors</li>\n<li>大多數的語言對於可以儲存在stack的資料是有限制的</li>\n</ul>\n<h2 id=\"heap\">Heap</h2>\n<ul>\n<li>與stack不一樣，Heap需要使用指標尋找資料</li>\n<li>比起stack，尋找資料的速度稍慢，但可以存放更大量的資料</li>\n<li>動態大小的資料可以存放在Heap</li>\n<li>在同個APP中Heap共享於threads之間</li>\n<li>因為其動態的特性使得比較難維護和管理，這也是為什麼會有些語言會有自動記憶體管理的功能</li>\n<li>儲存在Heap中的有全域變數、reference types（objects, strings, maps和其他較複雜的資料結構）</li>\n<li>如果APP使用比被分配還要多的記憶體就會發生out of memory errors</li>\n<li>通常沒有限制可以存在Heap的大小，不過也是要看該應用程式被分配到多少記憶體</li>\n</ul>\n<h2 id=\"garbage-collection%EF%BC%88gc%EF%BC%89\">Garbage Collection（GC）</h2>\n<p>有分兩種</p>\n<ul>\n<li>Mark &amp; Sweep GC</li>\n<li>Reference counting GC</li>\n</ul>\n<!--kg-card-end: markdown-->","comment_id":"635cf8c16c901d4844747e61","plaintext":"Stack\n\n\n * 在往stack儲存資料時不需查找，僅需儲存在最上面的區塊即可，非常快速\n * 任何要存在stack的資料必須有限且靜態（資料大小必須在編譯時就知道）\n * 函式的執行資料儲存在stack frames（actual execution stack），每個函式會有自己的frame區塊，當函式內宣告新變數時會將資料推到最上面的區塊。當每個函式結束時，會清除最上面的區塊，所有被推送到該區塊的變數將被清除。\n * 每個thread可以有自己的一個stack\n * 儲存在stack上的資料由OS操作，非常簡單明瞭\n * 儲存在stack上的資料為區域變數（資料型態、primitives或primitive constants）、指標及function frames\n * 當stack的size太大時會遇到stack overflow errors\n * 大多數的語言對於可以儲存在stack的資料是有限制的\n\n\n\nHeap\n\n\n * 與stack不一樣，Heap需要使用指標尋找資料\n * 比起stack，尋找資料的速度稍慢，但可以存放更大量的資料\n * 動態大小的資料可以存放在Heap\n * 在同個APP中Heap共享於threads之間\n * 因為其動態的特性使得比較難維護和管理，這也是為什麼會有些語言會有自動記憶體管理的功能\n * 儲存在Heap中的有全域變數、reference types（objects, strings, maps和其他較複雜的資料結構）\n * 如果APP使用比被分配還要多的記憶體就會發生out of memory errors\n * 通常沒有限制可以存在Heap的大小，不過也是要看該應用程式被分配到多少記憶體\n\n\n\nGarbage Collection（GC）\n\n\n有分兩種\n\n\n * Mark & Sweep GC\n * Reference counting GC\n","feature_image":"__GHOST_URL__/content/images/2022/10/ron-dyar-V29UWcALNko-unsplash_memory.jpeg","featured":0,"type":"post","status":"published","locale":null,"visibility":"public","email_recipient_filter":"all","created_at":"2022-10-29 09:56:17","created_by":"1","updated_at":"2022-10-29 10:05:33","updated_by":"1","published_at":"2022-10-29 10:05:33","published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null,"newsletter_id":null},{"id":"635cfb2e6c901d4844747e6e","uuid":"a10de5ee-7639-4fd5-8996-bf6f9103e30b","title":"Interprocess Communication (IPC)","slug":"interprocess-communication","mobiledoc":"{\"version\":\"0.3.1\",\"atoms\":[],\"cards\":[[\"markdown\",{\"markdown\":\"行程間通訊有兩種方式，分別是Shared Memory Method和Message passing\\n\\n> 不要通過共享記憶體来通信，而應該通過通信来共享記憶體\\n\\n## Shared Memory Method\\n- 為兩個行程之間透過一塊共同的記憶體傳遞訊息資料\\n- 分為有限制大小的buffer及無限制大小的buffer\\n- 若開始及結束都指向同一個標籤則為無大小限制buffer\\n\\n## Message Passing\\n- 為兩個行程之間透過kernel傳遞訊訊息資料\\n- 訊息可以分為header和body兩個部分，header用來儲存訊息種類、目標ID、訊息長度和控制資訊，控制資訊包含像是當超過buffer該如何處理的資訊、序號及優先順序，且一般來說使用FIFO\\n- 訊息傳送有分為同步及非同步，可以有多種排列組合\\n    - Blocking send and blocking receive\\n    - Non-blocking send and Non-blocking receive\\n    - Non-blocking send and Blocking receive (Mostly used)\"}]],\"markups\":[],\"sections\":[[10,0],[1,\"p\",[]]],\"ghostVersion\":\"4.0\"}","lexical":null,"html":"<!--kg-card-begin: markdown--><p>行程間通訊有兩種方式，分別是Shared Memory Method和Message passing</p>\n<blockquote>\n<p>不要通過共享記憶體来通信，而應該通過通信来共享記憶體</p>\n</blockquote>\n<h2 id=\"shared-memory-method\">Shared Memory Method</h2>\n<ul>\n<li>為兩個行程之間透過一塊共同的記憶體傳遞訊息資料</li>\n<li>分為有限制大小的buffer及無限制大小的buffer</li>\n<li>若開始及結束都指向同一個標籤則為無大小限制buffer</li>\n</ul>\n<h2 id=\"message-passing\">Message Passing</h2>\n<ul>\n<li>為兩個行程之間透過kernel傳遞訊訊息資料</li>\n<li>訊息可以分為header和body兩個部分，header用來儲存訊息種類、目標ID、訊息長度和控制資訊，控制資訊包含像是當超過buffer該如何處理的資訊、序號及優先順序，且一般來說使用FIFO</li>\n<li>訊息傳送有分為同步及非同步，可以有多種排列組合\n<ul>\n<li>Blocking send and blocking receive</li>\n<li>Non-blocking send and Non-blocking receive</li>\n<li>Non-blocking send and Blocking receive (Mostly used)</li>\n</ul>\n</li>\n</ul>\n<!--kg-card-end: markdown-->","comment_id":"635cfb2e6c901d4844747e6e","plaintext":"行程間通訊有兩種方式，分別是Shared Memory Method和Message passing\n\n\n\n\n\n不要通過共享記憶體来通信，而應該通過通信来共享記憶體\n\n\n\n\nShared Memory Method\n\n\n * 為兩個行程之間透過一塊共同的記憶體傳遞訊息資料\n * 分為有限制大小的buffer及無限制大小的buffer\n * 若開始及結束都指向同一個標籤則為無大小限制buffer\n\n\n\nMessage Passing\n\n\n * 為兩個行程之間透過kernel傳遞訊訊息資料\n * 訊息可以分為header和body兩個部分，header用來儲存訊息種類、目標ID、訊息長度和控制資訊，控制資訊包含像是當超過buffer該如何處理的資訊、序號及優先順序，且一般來說使用FIFO\n * 訊息傳送有分為同步及非同步，可以有多種排列組合\n   \n   * Blocking send and blocking receive\n   * Non-blocking send and Non-blocking receive\n   * Non-blocking send and Blocking receive (Mostly used)\n   \n","feature_image":"__GHOST_URL__/content/images/2022/10/communication-4871245.jpg","featured":0,"type":"post","status":"published","locale":null,"visibility":"public","email_recipient_filter":"all","created_at":"2022-10-29 10:06:38","created_by":"1","updated_at":"2022-10-29 10:09:26","updated_by":"1","published_at":"2022-10-29 10:09:26","published_by":"1","custom_excerpt":"行程間通訊有兩種方式，分別是Shared Memory Method和Message passing","codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null,"newsletter_id":null},{"id":"635cfc2d6c901d4844747e7d","uuid":"9c6d6f55-0913-4de7-becb-22a8afcb6b5a","title":"Pipe","slug":"pipe","mobiledoc":"{\"version\":\"0.3.1\",\"atoms\":[],\"cards\":[[\"markdown\",{\"markdown\":\"pipe()用於在兩個有關係的process（通常是父子或是兄弟process）之間通信\\n假設有A和B兩個process，pipe()建立之後可以用A讀或寫經由pipe傳送到B的寫或讀\\n```cpp\\n#include <unistd.h>\\nint pipe(int pipefd[2]);\\n```\\n使用pipefd表示讀或寫，pipefd[0]用於讀，pipefd[1]用於寫\\n\\n在建立管道之後需要fork出一個process，所以目前有父process及fork出來的子process\\n接著利用cpid判斷哪個process是父process哪個是子process\\n當父process的寫端需要使用stdout寫出數據給子process的讀端讀取時，這時需要將父process沒有用到的讀端及子process沒用到的寫端關閉\\n接著就是在父process使用write，及在子process使用read，即可完成父子process之間的通信\\n\\n\\n```cpp\\n#include <sys/wait.h>\\n#include <stdio.h>\\n#include <stdlib.h>\\n#include <unistd.h>\\n#include <string.h>\\n#include <errno.h>\\n\\nint main(int argc, char* argv[])\\n{\\n    int pipefd[2];\\n    pid_t cpid;\\n    char buf[128];\\n    int readlen;\\n\\n\\n    if (argc != 2) {\\n        fprintf(stderr, \\\"Usage: %s <string>\\\\n\\\", argv[0]);\\n        return -1;\\n    }\\n\\n    if (pipe(pipefd) < 0) {\\n        fprintf(stderr, \\\"pipe: %s\\\\n\\\", strerror(errno));\\n        return -1;\\n    }\\n\\n    cpid = fork();\\n\\n    if (cpid < 0) {\\n        fprintf(stderr, \\\"fork: %s\\\\n\\\", strerror(errno));\\n        return -1;\\n    }\\n\\n    if (0 == cpid) { /* 子進程 */\\n        close(pipefd[1]); /* 子進程關閉寫端 */\\n        readlen = read(pipefd[0], buf,\\n                       128); //子進程阻塞在讀上，等待父進程寫\\n\\n        if (readlen < 0) {\\n            fprintf(stderr, \\\"read: %s\\\\n\\\", strerror(errno));\\n            return -1;\\n        }\\n\\n        write(STDOUT_FILENO, buf, readlen);\\n        write(STDOUT_FILENO, \\\"\\\\n\\\", 1);\\n        close(pipefd[0]); //讀完之後關閉讀描述符\\n        return 0;\\n    } else { /* 父進程 */\\n        close(pipefd[0]); /*父進程關閉沒用的讀端 */\\n        sleep(2);\\n        write(pipefd[1], argv[1], strlen(argv[1])); //父進程開始寫\\n        close(pipefd[1]); /* 父進程關閉寫描述符 */\\n        wait(NULL); /* 父進程等待子進程退出，回收子進程資源 */\\n        return 0;\\n    }\\n}\\n```\\n\\n## 參考資料\\n[pipe和FIFO](https://www.cntofu.com/book/46/linux_system/pipehe_fifo.md)\"}]],\"markups\":[],\"sections\":[[10,0],[1,\"p\",[]]],\"ghostVersion\":\"4.0\"}","lexical":null,"html":"<!--kg-card-begin: markdown--><p>pipe()用於在兩個有關係的process（通常是父子或是兄弟process）之間通信<br>\n假設有A和B兩個process，pipe()建立之後可以用A讀或寫經由pipe傳送到B的寫或讀</p>\n<pre><code class=\"language-cpp\">#include &lt;unistd.h&gt;\nint pipe(int pipefd[2]);\n</code></pre>\n<p>使用pipefd表示讀或寫，pipefd[0]用於讀，pipefd[1]用於寫</p>\n<p>在建立管道之後需要fork出一個process，所以目前有父process及fork出來的子process<br>\n接著利用cpid判斷哪個process是父process哪個是子process<br>\n當父process的寫端需要使用stdout寫出數據給子process的讀端讀取時，這時需要將父process沒有用到的讀端及子process沒用到的寫端關閉<br>\n接著就是在父process使用write，及在子process使用read，即可完成父子process之間的通信</p>\n<pre><code class=\"language-cpp\">#include &lt;sys/wait.h&gt;\n#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;unistd.h&gt;\n#include &lt;string.h&gt;\n#include &lt;errno.h&gt;\n\nint main(int argc, char* argv[])\n{\n    int pipefd[2];\n    pid_t cpid;\n    char buf[128];\n    int readlen;\n\n\n    if (argc != 2) {\n        fprintf(stderr, &quot;Usage: %s &lt;string&gt;\\n&quot;, argv[0]);\n        return -1;\n    }\n\n    if (pipe(pipefd) &lt; 0) {\n        fprintf(stderr, &quot;pipe: %s\\n&quot;, strerror(errno));\n        return -1;\n    }\n\n    cpid = fork();\n\n    if (cpid &lt; 0) {\n        fprintf(stderr, &quot;fork: %s\\n&quot;, strerror(errno));\n        return -1;\n    }\n\n    if (0 == cpid) { /* 子進程 */\n        close(pipefd[1]); /* 子進程關閉寫端 */\n        readlen = read(pipefd[0], buf,\n                       128); //子進程阻塞在讀上，等待父進程寫\n\n        if (readlen &lt; 0) {\n            fprintf(stderr, &quot;read: %s\\n&quot;, strerror(errno));\n            return -1;\n        }\n\n        write(STDOUT_FILENO, buf, readlen);\n        write(STDOUT_FILENO, &quot;\\n&quot;, 1);\n        close(pipefd[0]); //讀完之後關閉讀描述符\n        return 0;\n    } else { /* 父進程 */\n        close(pipefd[0]); /*父進程關閉沒用的讀端 */\n        sleep(2);\n        write(pipefd[1], argv[1], strlen(argv[1])); //父進程開始寫\n        close(pipefd[1]); /* 父進程關閉寫描述符 */\n        wait(NULL); /* 父進程等待子進程退出，回收子進程資源 */\n        return 0;\n    }\n}\n</code></pre>\n<h2 id=\"%E5%8F%83%E8%80%83%E8%B3%87%E6%96%99\">參考資料</h2>\n<p><a href=\"https://www.cntofu.com/book/46/linux_system/pipehe_fifo.md\">pipe和FIFO</a></p>\n<!--kg-card-end: markdown-->","comment_id":"635cfc2d6c901d4844747e7d","plaintext":"pipe()用於在兩個有關係的process（通常是父子或是兄弟process）之間通信\n\n假設有A和B兩個process，pipe()建立之後可以用A讀或寫經由pipe傳送到B的寫或讀\n\n\n#include <unistd.h>\nint pipe(int pipefd[2]);\n\n\n\n使用pipefd表示讀或寫，pipefd[0]用於讀，pipefd[1]用於寫\n\n\n在建立管道之後需要fork出一個process，所以目前有父process及fork出來的子process\n\n接著利用cpid判斷哪個process是父process哪個是子process\n\n當父process的寫端需要使用stdout寫出數據給子process的讀端讀取時，這時需要將父process沒有用到的讀端及子process沒用到的寫端關閉\n\n接著就是在父process使用write，及在子process使用read，即可完成父子process之間的通信\n\n\n#include <sys/wait.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <unistd.h>\n#include <string.h>\n#include <errno.h>\n\nint main(int argc, char* argv[])\n{\n    int pipefd[2];\n    pid_t cpid;\n    char buf[128];\n    int readlen;\n\n\n    if (argc != 2) {\n        fprintf(stderr, \"Usage: %s <string>\\n\", argv[0]);\n        return -1;\n    }\n\n    if (pipe(pipefd) < 0) {\n        fprintf(stderr, \"pipe: %s\\n\", strerror(errno));\n        return -1;\n    }\n\n    cpid = fork();\n\n    if (cpid < 0) {\n        fprintf(stderr, \"fork: %s\\n\", strerror(errno));\n        return -1;\n    }\n\n    if (0 == cpid) { /* 子進程 */\n        close(pipefd[1]); /* 子進程關閉寫端 */\n        readlen = read(pipefd[0], buf,\n                       128); //子進程阻塞在讀上，等待父進程寫\n\n        if (readlen < 0) {\n            fprintf(stderr, \"read: %s\\n\", strerror(errno));\n            return -1;\n        }\n\n        write(STDOUT_FILENO, buf, readlen);\n        write(STDOUT_FILENO, \"\\n\", 1);\n        close(pipefd[0]); //讀完之後關閉讀描述符\n        return 0;\n    } else { /* 父進程 */\n        close(pipefd[0]); /*父進程關閉沒用的讀端 */\n        sleep(2);\n        write(pipefd[1], argv[1], strlen(argv[1])); //父進程開始寫\n        close(pipefd[1]); /* 父進程關閉寫描述符 */\n        wait(NULL); /* 父進程等待子進程退出，回收子進程資源 */\n        return 0;\n    }\n}\n\n\n\n\n參考資料\n\n\npipe和FIFO\n","feature_image":"__GHOST_URL__/content/images/2022/10/diana-Ynq3Wve3SOA-unsplash_pipe.jpeg","featured":0,"type":"post","status":"published","locale":null,"visibility":"public","email_recipient_filter":"all","created_at":"2022-10-29 10:10:53","created_by":"1","updated_at":"2022-10-29 10:15:36","updated_by":"1","published_at":"2022-10-29 10:15:36","published_by":"1","custom_excerpt":"pipe()用於在兩個有關係的process（通常是父子或是兄弟process）之間通信\n假設有A和B兩個process，pipe()建立之後可以用A讀或寫經由pipe傳送到B的寫或讀","codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null,"newsletter_id":null},{"id":"635cfda26c901d4844747e89","uuid":"95a1b8c9-80d9-4da1-b374-b8bd4005b716","title":"Python取得打包成binary後的路徑","slug":"python-get-binary-path","mobiledoc":"{\"version\":\"0.3.1\",\"atoms\":[],\"cards\":[[\"markdown\",{\"markdown\":\"使用pyinstaller打包後的執行檔在執行時有可能會發生實際執行的檔案位於Temporary內的情況，這時就必須用以下方法取得實際exe檔案所在的路徑\\n\\n## 解決方法\\n```python\\nimport sys\\nimport os\\n\\npath_current_dir = os.path.dirname(sys.argv[0])\\n\\nprint(sys.argv[0]) \\nprint(path_current_dir)\\n```\\n\\n## 參考資料\\n[Pythonをexeした際にスクリプト実行パスを取得する方法](https://syachiku.net/python%E3%82%92exe%E3%81%97%E3%81%9F%E9%9A%9B%E3%81%AB%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%97%E3%83%88%E5%AE%9F%E8%A1%8C%E3%83%91%E3%82%B9%E3%82%92%E5%8F%96%E5%BE%97%E3%81%99%E3%82%8B%E6%96%B9%E6%B3%95/)\"}]],\"markups\":[],\"sections\":[[10,0],[1,\"p\",[]]],\"ghostVersion\":\"4.0\"}","lexical":null,"html":"<!--kg-card-begin: markdown--><p>使用pyinstaller打包後的執行檔在執行時有可能會發生實際執行的檔案位於Temporary內的情況，這時就必須用以下方法取得實際exe檔案所在的路徑</p>\n<h2 id=\"%E8%A7%A3%E6%B1%BA%E6%96%B9%E6%B3%95\">解決方法</h2>\n<pre><code class=\"language-python\">import sys\nimport os\n\npath_current_dir = os.path.dirname(sys.argv[0])\n\nprint(sys.argv[0]) \nprint(path_current_dir)\n</code></pre>\n<h2 id=\"%E5%8F%83%E8%80%83%E8%B3%87%E6%96%99\">參考資料</h2>\n<p><a href=\"https://syachiku.net/python%E3%82%92exe%E3%81%97%E3%81%9F%E9%9A%9B%E3%81%AB%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%97%E3%83%88%E5%AE%9F%E8%A1%8C%E3%83%91%E3%82%B9%E3%82%92%E5%8F%96%E5%BE%97%E3%81%99%E3%82%8B%E6%96%B9%E6%B3%95/\">Pythonをexeした際にスクリプト実行パスを取得する方法</a></p>\n<!--kg-card-end: markdown-->","comment_id":"635cfda26c901d4844747e89","plaintext":"使用pyinstaller打包後的執行檔在執行時有可能會發生實際執行的檔案位於Temporary內的情況，這時就必須用以下方法取得實際exe檔案所在的路徑\n\n\n\n解決方法\n\n\nimport sys\nimport os\n\npath_current_dir = os.path.dirname(sys.argv[0])\n\nprint(sys.argv[0]) \nprint(path_current_dir)\n\n\n\n\n參考資料\n\n\nPythonをexeした際にスクリプト実行パスを取得する方法\n","feature_image":"__GHOST_URL__/content/images/2022/10/python-logo.jpg","featured":0,"type":"post","status":"published","locale":null,"visibility":"public","email_recipient_filter":"all","created_at":"2022-10-29 10:17:06","created_by":"1","updated_at":"2022-10-29 10:18:38","updated_by":"1","published_at":"2022-10-29 10:18:38","published_by":"1","custom_excerpt":"使用pyinstaller打包後的執行檔在執行時有可能會發生實際執行的檔案位於Temporary內的情況，這時就必須用以下方法取得實際exe檔案所在的路徑","codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null,"newsletter_id":null},{"id":"635cfeb06c901d4844747e97","uuid":"ff0f1c35-512a-4dda-9f2b-d99059e13948","title":"使用QUASAR在表單送出時滾動到錯誤欄位","slug":"quasar-scroll-to-field-on-validation-error","mobiledoc":"{\"version\":\"0.3.1\",\"atoms\":[],\"cards\":[[\"markdown\",{\"markdown\":\"表單submit時會希望能讓頁面自動滾動到元素位置，使用q-form的validation-error事件搭配滾動來達成此效果\\n\\n## q-form的validation-error事件\\n```htmlmixed\\n<template>\\n    <q-form \\n    @submit=\\\"gotoNext\\\"\\n    @validation-error=\\\"onValidationError\\\"\\n    >\\n        <q-input \\n        v-model=\\\"username\\\"\\n        :rules=\\\"[idRequiredRule]\\\"\\n        lazy-rules=\\\"ondemand\\\"\\n        ></q-input>\\n    </q-form>\\n</template>\\n\\n<script>\\n    \\nimport { scroll } from \\\"quasar\\\";\\nconst {getScrollTarget, setVerticalScrollPosition} = scroll;\\n    \\n/* eslint-disable*/\\nonValidationError(ref: any) {\\n    \\n}\\n/* eslint-enable*/\\n</script>\\n\\n<!-- 若使用Typescript無法使用any的話可以用eslint-disable跳過檢查 -->\\n<script lang=\\\"ts\\\">\\n    \\nimport { scroll } from \\\"quasar\\\";\\nconst {getScrollTarget, setVerticalScrollPosition} = scroll;\\n    \\n/* eslint-disable*/\\nonValidationError(ref: any) {\\n    \\n}\\n/* eslint-enable*/\\n</script>\\n```\\n\\nq-form提供validation-error事件，當submit且表單內的欄位有錯誤時，會回傳第一個有錯誤的元素\\n\\n\\n## 取得與頁面頂部的距離\\n\\n```typescript\\nonValidationError(ref: any) {\\n    var el = ref.$el;\\n    \\n    var offset = el.getBoundingClientRect().top + window.pageYOffset;\\n    \\n    var duration = 200;\\n    \\n    setVerticalScrollPosition(getScrollTarget(el), offset, duration);\\n}\\n```\\n\\n首先使用`ref.$el`取得元素\\n\\n![o7tjfGz](__GHOST_URL__/content/images/2022/10/o7tjfGz.png)\\n圖片取自[Element.getBoundingClientRect() - Web APIs | MDN](https://developer.mozilla.org/en-US/docs/Web/API/Element/getBoundingClientRect)\\n\\n接著使用getBoundingClientRect()取得元素與viewport的距離\\n\\nwindow.pageYOffset為目前滾動的高度\\n\\n兩者相加即是元素高度\\n\\n最後使用getScrollTarget及setVerticalScrollPosition設定滾動目標、位置及時間\\n\\n## 參考資料\\n[Element.getBoundingClientRect() - Web APIs | MDN](https://developer.mozilla.org/en-US/docs/Web/API/Element/getBoundingClientRect)\\n[Window.pageYOffset - Web APIs | MDN](https://developer.mozilla.org/en-US/docs/Web/API/Window/pageYOffset)\\n[autoscroll to empty but required q-input field in a form with validation Quasar 2.5.5 & Vuejs3](https://stackoverflow.com/questions/71650521/autoscroll-to-empty-but-required-q-input-field-in-a-form-with-validation-quasar)\\n[获取元素距离页面顶部的距离 · Issue #10 · znlbwo/study](https://github.com/znlbwo/study/issues/10)\\n[Scrolling Utils | Quasar Framework](https://quasar.dev/quasar-utils/scrolling-utils#scrolling-to-an-element)\"}]],\"markups\":[],\"sections\":[[10,0],[1,\"p\",[]]],\"ghostVersion\":\"4.0\"}","lexical":null,"html":"<!--kg-card-begin: markdown--><p>表單submit時會希望能讓頁面自動滾動到元素位置，使用q-form的validation-error事件搭配滾動來達成此效果</p>\n<h2 id=\"q-form%E7%9A%84validation-error%E4%BA%8B%E4%BB%B6\">q-form的validation-error事件</h2>\n<pre><code class=\"language-htmlmixed\">&lt;template&gt;\n    &lt;q-form \n    @submit=&quot;gotoNext&quot;\n    @validation-error=&quot;onValidationError&quot;\n    &gt;\n        &lt;q-input \n        v-model=&quot;username&quot;\n        :rules=&quot;[idRequiredRule]&quot;\n        lazy-rules=&quot;ondemand&quot;\n        &gt;&lt;/q-input&gt;\n    &lt;/q-form&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\n    \nimport { scroll } from &quot;quasar&quot;;\nconst {getScrollTarget, setVerticalScrollPosition} = scroll;\n    \n/* eslint-disable*/\nonValidationError(ref: any) {\n    \n}\n/* eslint-enable*/\n&lt;/script&gt;\n\n&lt;!-- 若使用Typescript無法使用any的話可以用eslint-disable跳過檢查 --&gt;\n&lt;script lang=&quot;ts&quot;&gt;\n    \nimport { scroll } from &quot;quasar&quot;;\nconst {getScrollTarget, setVerticalScrollPosition} = scroll;\n    \n/* eslint-disable*/\nonValidationError(ref: any) {\n    \n}\n/* eslint-enable*/\n&lt;/script&gt;\n</code></pre>\n<p>q-form提供validation-error事件，當submit且表單內的欄位有錯誤時，會回傳第一個有錯誤的元素</p>\n<h2 id=\"%E5%8F%96%E5%BE%97%E8%88%87%E9%A0%81%E9%9D%A2%E9%A0%82%E9%83%A8%E7%9A%84%E8%B7%9D%E9%9B%A2\">取得與頁面頂部的距離</h2>\n<pre><code class=\"language-typescript\">onValidationError(ref: any) {\n    var el = ref.$el;\n    \n    var offset = el.getBoundingClientRect().top + window.pageYOffset;\n    \n    var duration = 200;\n    \n    setVerticalScrollPosition(getScrollTarget(el), offset, duration);\n}\n</code></pre>\n<p>首先使用<code>ref.$el</code>取得元素</p>\n<p><img src=\"__GHOST_URL__/content/images/2022/10/o7tjfGz.png\" alt=\"o7tjfGz\" loading=\"lazy\"><br>\n圖片取自<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Element/getBoundingClientRect\">Element.getBoundingClientRect() - Web APIs | MDN</a></p>\n<p>接著使用getBoundingClientRect()取得元素與viewport的距離</p>\n<p>window.pageYOffset為目前滾動的高度</p>\n<p>兩者相加即是元素高度</p>\n<p>最後使用getScrollTarget及setVerticalScrollPosition設定滾動目標、位置及時間</p>\n<h2 id=\"%E5%8F%83%E8%80%83%E8%B3%87%E6%96%99\">參考資料</h2>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Element/getBoundingClientRect\">Element.getBoundingClientRect() - Web APIs | MDN</a><br>\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Window/pageYOffset\">Window.pageYOffset - Web APIs | MDN</a><br>\n<a href=\"https://stackoverflow.com/questions/71650521/autoscroll-to-empty-but-required-q-input-field-in-a-form-with-validation-quasar\">autoscroll to empty but required q-input field in a form with validation Quasar 2.5.5 &amp; Vuejs3</a><br>\n<a href=\"https://github.com/znlbwo/study/issues/10\">获取元素距离页面顶部的距离 · Issue #10 · znlbwo/study</a><br>\n<a href=\"https://quasar.dev/quasar-utils/scrolling-utils#scrolling-to-an-element\">Scrolling Utils | Quasar Framework</a></p>\n<!--kg-card-end: markdown-->","comment_id":"635cfeb06c901d4844747e97","plaintext":"表單submit時會希望能讓頁面自動滾動到元素位置，使用q-form的validation-error事件搭配滾動來達成此效果\n\n\n\nq-form的validation-error事件\n\n\n<template>\n    <q-form \n    @submit=\"gotoNext\"\n    @validation-error=\"onValidationError\"\n    >\n        <q-input \n        v-model=\"username\"\n        :rules=\"[idRequiredRule]\"\n        lazy-rules=\"ondemand\"\n        ></q-input>\n    </q-form>\n</template>\n\n<script>\n    \nimport { scroll } from \"quasar\";\nconst {getScrollTarget, setVerticalScrollPosition} = scroll;\n    \n/* eslint-disable*/\nonValidationError(ref: any) {\n    \n}\n/* eslint-enable*/\n</script>\n\n<!-- 若使用Typescript無法使用any的話可以用eslint-disable跳過檢查 -->\n<script lang=\"ts\">\n    \nimport { scroll } from \"quasar\";\nconst {getScrollTarget, setVerticalScrollPosition} = scroll;\n    \n/* eslint-disable*/\nonValidationError(ref: any) {\n    \n}\n/* eslint-enable*/\n</script>\n\n\n\nq-form提供validation-error事件，當submit且表單內的欄位有錯誤時，會回傳第一個有錯誤的元素\n\n\n\n取得與頁面頂部的距離\n\n\nonValidationError(ref: any) {\n    var el = ref.$el;\n    \n    var offset = el.getBoundingClientRect().top + window.pageYOffset;\n    \n    var duration = 200;\n    \n    setVerticalScrollPosition(getScrollTarget(el), offset, duration);\n}\n\n\n\n首先使用ref.$el取得元素\n\n\n\n\n圖片取自Element.getBoundingClientRect() - Web APIs | MDN\n\n\n接著使用getBoundingClientRect()取得元素與viewport的距離\n\n\nwindow.pageYOffset為目前滾動的高度\n\n\n兩者相加即是元素高度\n\n\n最後使用getScrollTarget及setVerticalScrollPosition設定滾動目標、位置及時間\n\n\n\n參考資料\n\n\nElement.getBoundingClientRect() - Web APIs | MDN\n\nWindow.pageYOffset - Web APIs | MDN\n\nautoscroll to empty but required q-input field in a form with validation Quasar 2.5.5 & Vuejs3\n\n获取元素距离页面顶部的距离 · Issue #10 · znlbwo/study\n\nScrolling Utils | Quasar Framework\n","feature_image":"__GHOST_URL__/content/images/2022/10/Quasar.png","featured":0,"type":"post","status":"published","locale":null,"visibility":"public","email_recipient_filter":"all","created_at":"2022-10-29 10:21:36","created_by":"1","updated_at":"2022-10-29 10:42:51","updated_by":"1","published_at":"2022-10-29 10:42:51","published_by":"1","custom_excerpt":"表單submit時會希望能讓頁面自動滾動到元素位置，使用q-form的validation-error事件搭配滾動來達成此效果","codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null,"newsletter_id":null},{"id":"63e5196c0a96e94f12972009","uuid":"b4fbdec0-4828-4600-ad12-ae69582a7632","title":"Docker buildx","slug":"docker-buildx","mobiledoc":"{\"version\":\"0.3.1\",\"atoms\":[],\"cards\":[[\"markdown\",{\"markdown\":\"Synology的NAS可以安裝docker套件，下載映像檔使用。使用官方的映像檔可以正常執行，但使用自己製作的映像檔卻跳出了錯誤訊息`standard_init_linux.go:230: exec user process caused: exec format error`，搜尋過後發現與編譯平台有關，使用buildx將映像檔編譯為目標平台可以使用的映像檔便可以有效解決這個問題。\\n\\n## 環境\\n\\n建置環境\\n- macOS Ventura 13.0(Apple M1 Pro)\\n- Docker 20.10.21\\n\\n部署環境\\n- Synology DSM 7.1.1(INTEL Celeron J4125)\\n- Docker 20.10.3\\n\\n## 使用方法\\n要使用buildx建立多平台的映像檔，首先需要建立builder，並使用`--platform`參數帶入目標平台字串，即可建立多平台映像檔。\\n\\n### 建立builder\\n建立並使用名稱為multiarch的builder\\n```\\ndocker buildx create --name multiarch --use\\n```\\n使用`docker buildx ls`可列出目前的builder\\n\\n### 建置並上傳\\n```\\ndocker buildx build --rm --push\\\\\\n    --platform linux/amd64,linux/arm64 \\\\\\n    -t DOCKERHUB的使用者名稱/映像檔名稱:映像檔tag \\\\\\n    -f 要用來進行建置的Dockerfile .\\n```\\n執行`docker buildx build`進行建置\\n`--rm`參數可以在執行結束後移除容器\\n`--push`參數可以在建置完成時推送映像檔到DockerHub\\n`--platform`參數指定目標平台，本次使用**linux/amd64**及**linux/arm64**作為目標平台\\n`-t`參數指定映像檔及映像檔標籤\\n`-f`參數指定要用來進行建置的Dockerfile\\n\\n建置完成後前往DockerHub可以看到剛才指定平台的映像檔已成功建置並上傳\\n![---2023-02-09---10.42.41](__GHOST_URL__/content/images/2023/02/---2023-02-09---10.42.41.png)\"}]],\"markups\":[],\"sections\":[[10,0],[1,\"p\",[]]],\"ghostVersion\":\"4.0\"}","lexical":null,"html":"<!--kg-card-begin: markdown--><p>Synology的NAS可以安裝docker套件，下載映像檔使用。使用官方的映像檔可以正常執行，但使用自己製作的映像檔卻跳出了錯誤訊息<code>standard_init_linux.go:230: exec user process caused: exec format error</code>，搜尋過後發現與編譯平台有關，使用buildx將映像檔編譯為目標平台可以使用的映像檔便可以有效解決這個問題。</p>\n<h2 id=\"%E7%92%B0%E5%A2%83\">環境</h2>\n<p>建置環境</p>\n<ul>\n<li>macOS Ventura 13.0(Apple M1 Pro)</li>\n<li>Docker 20.10.21</li>\n</ul>\n<p>部署環境</p>\n<ul>\n<li>Synology DSM 7.1.1(INTEL Celeron J4125)</li>\n<li>Docker 20.10.3</li>\n</ul>\n<h2 id=\"%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95\">使用方法</h2>\n<p>要使用buildx建立多平台的映像檔，首先需要建立builder，並使用<code>--platform</code>參數帶入目標平台字串，即可建立多平台映像檔。</p>\n<h3 id=\"%E5%BB%BA%E7%AB%8Bbuilder\">建立builder</h3>\n<p>建立並使用名稱為multiarch的builder</p>\n<pre><code>docker buildx create --name multiarch --use\n</code></pre>\n<p>使用<code>docker buildx ls</code>可列出目前的builder</p>\n<h3 id=\"%E5%BB%BA%E7%BD%AE%E4%B8%A6%E4%B8%8A%E5%82%B3\">建置並上傳</h3>\n<pre><code>docker buildx build --rm --push\\\n    --platform linux/amd64,linux/arm64 \\\n    -t DOCKERHUB的使用者名稱/映像檔名稱:映像檔tag \\\n    -f 要用來進行建置的Dockerfile .\n</code></pre>\n<p>執行<code>docker buildx build</code>進行建置<br>\n<code>--rm</code>參數可以在執行結束後移除容器<br>\n<code>--push</code>參數可以在建置完成時推送映像檔到DockerHub<br>\n<code>--platform</code>參數指定目標平台，本次使用<strong>linux/amd64</strong>及<strong>linux/arm64</strong>作為目標平台<br>\n<code>-t</code>參數指定映像檔及映像檔標籤<br>\n<code>-f</code>參數指定要用來進行建置的Dockerfile</p>\n<p>建置完成後前往DockerHub可以看到剛才指定平台的映像檔已成功建置並上傳<br>\n<img src=\"__GHOST_URL__/content/images/2023/02/---2023-02-09---10.42.41.png\" alt=\"---2023-02-09---10.42.41\" loading=\"lazy\"></p>\n<!--kg-card-end: markdown-->","comment_id":"63e5196c0a96e94f12972009","plaintext":"Synology的NAS可以安裝docker套件，下載映像檔使用。使用官方的映像檔可以正常執行，但使用自己製作的映像檔卻跳出了錯誤訊息standard_init_linux.go:230: exec user process caused: exec format error，搜尋過後發現與編譯平台有關，使用buildx將映像檔編譯為目標平台可以使用的映像檔便可以有效解決這個問題。\n\n\n\n環境\n\n\n建置環境\n\n\n * macOS Ventura 13.0(Apple M1 Pro)\n * Docker 20.10.21\n\n\n部署環境\n\n\n * Synology DSM 7.1.1(INTEL Celeron J4125)\n * Docker 20.10.3\n\n\n\n使用方法\n\n\n要使用buildx建立多平台的映像檔，首先需要建立builder，並使用--platform參數帶入目標平台字串，即可建立多平台映像檔。\n\n\n\n建立builder\n\n\n建立並使用名稱為multiarch的builder\n\n\ndocker buildx create --name multiarch --use\n\n\n\n使用docker buildx ls可列出目前的builder\n\n\n\n建置並上傳\n\n\ndocker buildx build --rm --push\\\n    --platform linux/amd64,linux/arm64 \\\n    -t DOCKERHUB的使用者名稱/映像檔名稱:映像檔tag \\\n    -f 要用來進行建置的Dockerfile .\n\n\n\n執行docker buildx build進行建置\n\n--rm參數可以在執行結束後移除容器\n\n--push參數可以在建置完成時推送映像檔到DockerHub\n\n--platform參數指定目標平台，本次使用linux/amd64及linux/arm64作為目標平台\n\n-t參數指定映像檔及映像檔標籤\n\n-f參數指定要用來進行建置的Dockerfile\n\n\n建置完成後前往DockerHub可以看到剛才指定平台的映像檔已成功建置並上傳\n\n\n","feature_image":"__GHOST_URL__/content/images/2023/02/docker.jpg","featured":0,"type":"post","status":"published","locale":null,"visibility":"public","email_recipient_filter":"all","created_at":"2023-02-09 16:03:56","created_by":"1","updated_at":"2023-02-09 16:09:53","updated_by":"1","published_at":"2023-02-09 16:09:53","published_by":"1","custom_excerpt":"Synology的NAS可以安裝docker套件，下載映像檔使用。使用官方的映像檔可以正常執行，但使用自己製作的映像檔卻跳出了錯誤訊息standard_init_linux.go:230: exec user process caused: exec format error，搜尋過後發現與編譯平台有關，使用buildx將映像檔編譯為目標平台可以使用的映像檔便可以有效解決這個問題。","codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null,"newsletter_id":null},{"id":"64d1177d1f95c4000167e858","uuid":"21935294-7cb9-4294-ad59-2393cb3d5d8e","title":"比較JavaScript中assign與replace的差異","slug":"difference-between-assign-and-replace-in-javascript","mobiledoc":"{\"version\":\"0.3.1\",\"atoms\":[],\"cards\":[[\"markdown\",{\"markdown\":\"\\n## assign\\n### 功能\\nassign可以讓window載入並顯示URL指定的文件\\n\\n### 語法\\n```javascript\\nwindow.location.assign(\\\"http://test.com\\\");\\n```\\n\\n### 與assign相同功用的用法\\n```javascript\\nwindow.location=\\\"http://test.com\\\"\\nwindow.location.href=\\\"http://test.com\\\"\\nlocation=\\\"http://test.com\\\"\\nlocation.href=\\\"http://test.com\\\"\\n```\\n\\n### 使用時機\\n- 希望在跳轉頁面後可以返回上一頁\\n\\n## replace\\n### 功能\\nreplace會使用URL指定的文件置換掉目前的頁面\\n\\n### 語法\\n```javascript\\nwindow.location.replace(\\\"http://test.com\\\");\\n```\\n\\n### 使用時機\\n- 希望頁面重新載入而不是重新提交一次\\n- 不應該重複觸發的頁面，例如：\\n    - 金流付錢頁面，付款後replace回原本的頁面，減少使用者返回上一頁造成錯誤的機會\\n\\n## 差異\\nreplace和assign的差異在於replace不會在session history中紀錄目前的頁面，replace後將無法回到上一頁，若在replace過後按下上一頁則會回到上上個瀏覽的頁面\\n\\n\\n###### 參考資料\\n- [Javascript 頁面跳轉、刷新、重定向的幾種方式](https://ithelp.ithome.com.tw/articles/10190062)\\n- [location: assign() method - Web APIs | MDN](https://developer.mozilla.org/en-US/docs/Web/API/Location/assign)\\n- [location: replace() method - Web APIs | MDN](https://developer.mozilla.org/en-US/docs/Web/API/Location/replace)\\n\"}]],\"markups\":[],\"sections\":[[10,0],[1,\"p\",[]]],\"ghostVersion\":\"4.0\"}","lexical":null,"html":"<!--kg-card-begin: markdown--><h2 id=\"assign\">assign</h2>\n<h3 id=\"%E5%8A%9F%E8%83%BD\">功能</h3>\n<p>assign可以讓window載入並顯示URL指定的文件</p>\n<h3 id=\"%E8%AA%9E%E6%B3%95\">語法</h3>\n<pre><code class=\"language-javascript\">window.location.assign(&quot;http://test.com&quot;);\n</code></pre>\n<h3 id=\"%E8%88%87assign%E7%9B%B8%E5%90%8C%E5%8A%9F%E7%94%A8%E7%9A%84%E7%94%A8%E6%B3%95\">與assign相同功用的用法</h3>\n<pre><code class=\"language-javascript\">window.location=&quot;http://test.com&quot;\nwindow.location.href=&quot;http://test.com&quot;\nlocation=&quot;http://test.com&quot;\nlocation.href=&quot;http://test.com&quot;\n</code></pre>\n<h3 id=\"%E4%BD%BF%E7%94%A8%E6%99%82%E6%A9%9F\">使用時機</h3>\n<ul>\n<li>希望在跳轉頁面後可以返回上一頁</li>\n</ul>\n<h2 id=\"replace\">replace</h2>\n<h3 id=\"%E5%8A%9F%E8%83%BD\">功能</h3>\n<p>replace會使用URL指定的文件置換掉目前的頁面</p>\n<h3 id=\"%E8%AA%9E%E6%B3%95\">語法</h3>\n<pre><code class=\"language-javascript\">window.location.replace(&quot;http://test.com&quot;);\n</code></pre>\n<h3 id=\"%E4%BD%BF%E7%94%A8%E6%99%82%E6%A9%9F\">使用時機</h3>\n<ul>\n<li>希望頁面重新載入而不是重新提交一次</li>\n<li>不應該重複觸發的頁面，例如：\n<ul>\n<li>金流付錢頁面，付款後replace回原本的頁面，減少使用者返回上一頁造成錯誤的機會</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"%E5%B7%AE%E7%95%B0\">差異</h2>\n<p>replace和assign的差異在於replace不會在session history中紀錄目前的頁面，replace後將無法回到上一頁，若在replace過後按下上一頁則會回到上上個瀏覽的頁面</p>\n<h6 id=\"%E5%8F%83%E8%80%83%E8%B3%87%E6%96%99\">參考資料</h6>\n<ul>\n<li><a href=\"https://ithelp.ithome.com.tw/articles/10190062\">Javascript 頁面跳轉、刷新、重定向的幾種方式</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Location/assign\">location: assign() method - Web APIs | MDN</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Location/replace\">location: replace() method - Web APIs | MDN</a></li>\n</ul>\n<!--kg-card-end: markdown-->","comment_id":"64d1177d1f95c4000167e858","plaintext":"assign\n\n\n\n功能\n\n\nassign可以讓window載入並顯示URL指定的文件\n\n\n\n語法\n\n\nwindow.location.assign(\"http://test.com\");\n\n\n\n\n與assign相同功用的用法\n\n\nwindow.location=\"http://test.com\"\nwindow.location.href=\"http://test.com\"\nlocation=\"http://test.com\"\nlocation.href=\"http://test.com\"\n\n\n\n\n使用時機\n\n\n * 希望在跳轉頁面後可以返回上一頁\n\n\n\nreplace\n\n\n\n功能\n\n\nreplace會使用URL指定的文件置換掉目前的頁面\n\n\n\n語法\n\n\nwindow.location.replace(\"http://test.com\");\n\n\n\n\n使用時機\n\n\n * 希望頁面重新載入而不是重新提交一次\n * 不應該重複觸發的頁面，例如：\n   \n   * 金流付錢頁面，付款後replace回原本的頁面，減少使用者返回上一頁造成錯誤的機會\n   \n\n\n\n差異\n\n\nreplace和assign的差異在於replace不會在session history中紀錄目前的頁面，replace後將無法回到上一頁，若在replace過後按下上一頁則會回到上上個瀏覽的頁面\n\n\n參考資料\n\n\n * Javascript 頁面跳轉、刷新、重定向的幾種方式\n * location: assign() method - Web APIs | MDN\n * location: replace() method - Web APIs | MDN\n","feature_image":"__GHOST_URL__/content/images/2023/08/javascript-1.png","featured":0,"type":"post","status":"published","locale":null,"visibility":"public","email_recipient_filter":"all","created_at":"2023-08-07 16:10:37","created_by":"1","updated_at":"2023-08-07 16:25:04","updated_by":"1","published_at":"2023-08-07 16:25:04","published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null,"newsletter_id":null},{"id":"64d27827aaa179000118761d","uuid":"fa8de10f-92b0-4321-a01c-64b0078ee180","title":"ASP.NET Core使用Middleware進行例外處理","slug":"exception-handling-with-middleware-in-aspnet-core","mobiledoc":"{\"version\":\"0.3.1\",\"atoms\":[],\"cards\":[[\"markdown\",{\"markdown\":\"當API被呼叫且發生例外時，不太會希望預設的錯誤訊息被傳回給使用者，在C#中可以使用try catch攔截錯誤訊息。\\n\\n但在每個可能會發生錯誤的地方都加上try catch相當繁瑣，使用Middleware可以捕捉錯誤訊息，並在返回給使用者之前統一處理，不僅可以節省開發時間，還能將錯誤訊息攔截，避免洩漏過多內部訊息給使用者，提高安全性。\\n\\n## 環境\\n- macOS Ventura 13.0(Apple M1 Pro)\\n- .NET 6.0\\n- Visual Studio Community 2022 for Mac 17.6.1\\n\\n## Middleware簡介\\nASP.NET Core中定義的Middleware可以用來處理所有的HTTP Request和Response，他們會一個串著一個，像一個管線（Pipeline）。\\n\\n每個Middleware可以決定是否要進入下一個Middleware，若沒有呼叫next()則不會進入下一個Middleware。\\n\\n由於所有的請求都會經過所有的Middleware，想要在例外發生時有一個地方可以捕捉所有例外，Middleware再適合不過了。\\n\\n## 實作Middleware\\n\\n在專案中新增一個`Middlewares`資料夾，統一存放自定義的Middlewares。\\n\\n接著在資料夾中新增檔名為`ExceptionHandleMiddleware.cs`的類別，在類別中加入下列程式碼：\\n\\n```csharp\\npublic class ExceptionHandleMiddleware\\n{\\n    private readonly RequestDelegate _next;\\n\\n    public ExceptionHandleMiddleware(RequestDelegate next)\\n    {\\n        _next = next;\\n    }\\n\\n    public async Task Invoke(HttpContext context)\\n    {\\n        try\\n        {\\n            //執行下一步\\n            await _next(context);\\n        }\\n        catch (Exception exception)\\n        {\\n            //當錯誤發生時呼叫 HandleExceptionAsync 方法，不執行下一個Middleware\\n            await HandleExceptionAsync(context, exception);\\n        }\\n    }\\n\\n    //直接返回 InternalServerError 給使用者\\n    private static Task HandleExceptionAsync(HttpContext context, Exception exception)\\n    {\\n        context.Response.ContentType = \\\"application/json\\\";\\n        context.Response.StatusCode = StatusCodes.Status500InternalServerError;\\n\\n        return context.Response.WriteAsync($\\\"{context.Response.StatusCode} Internal Server Error.\\\");\\n    }\\n}\\n\\n```\\n\\nMiddleware完成後依照Program.cs的形式將Middleware使用IApplicationBuilder包起來，在Middlewares資料夾中新增名稱為`ExceptionHandleMiddlewareExtensions.cs`的類別，檔案內容如下：\\n\\n```csharp\\npublic static class ExceptionHandleMiddlewareExtensions\\n{\\n    public static IApplicationBuilder UseExceptionHandleMiddleware(this IApplicationBuilder builder)\\n    {\\n        return builder.UseMiddleware<ExceptionHandleMiddleware>();\\n    }\\n}\\n```\\n\\n接著在`Program.cs`中加入`app.UseExceptionHandleMiddleware();`即可完成自訂Middleware的設定。\\n\\n```csharp\\npublic class Program\\n{\\n    public static void Main(string[] args)\\n    {\\n        var builder = WebApplication.CreateBuilder(args);\\n\\n        ...\\n            \\n        var app = builder.Build();\\n\\n        ...\\n\\n        app.UseExceptionHandleMiddleware();//加入這行即可完成設定\\n\\n        ...\\n\\n        app.Run();\\n    }\\n}\\n```\\n\\n###### 參考資料\\n- [撰寫自訂的 ASP.NET Core 中介軟體](https://learn.microsoft.com/zh-tw/aspnet/core/fundamentals/middleware/write?view=aspnetcore-6.0&WT.mc_id=DT-MVP-5003022)\\n- [在 ASP.NET Core 中使用 Middleware 全域處理例外](https://blog.poychang.net/asp-net-core-web-api-global-exception-handler/)\\n- [[Day03] Middleware- 我與 ASP.NET Core 3 的 30天](https://ithelp.ithome.com.tw/articles/10238649)\\n- [ASP.NET Core 运行原理解剖[3]:Middleware-请求管道的构成](https://www.cnblogs.com/RainingNight/p/middleware-in-asp-net-core.html)\"}]],\"markups\":[],\"sections\":[[10,0],[1,\"p\",[]]],\"ghostVersion\":\"4.0\"}","lexical":null,"html":"<!--kg-card-begin: markdown--><p>當API被呼叫且發生例外時，不太會希望預設的錯誤訊息被傳回給使用者，在C#中可以使用try catch攔截錯誤訊息。</p>\n<p>但在每個可能會發生錯誤的地方都加上try catch相當繁瑣，使用Middleware可以捕捉錯誤訊息，並在返回給使用者之前統一處理，不僅可以節省開發時間，還能將錯誤訊息攔截，避免洩漏過多內部訊息給使用者，提高安全性。</p>\n<h2 id=\"%E7%92%B0%E5%A2%83\">環境</h2>\n<ul>\n<li>macOS Ventura 13.0(Apple M1 Pro)</li>\n<li>.NET 6.0</li>\n<li>Visual Studio Community 2022 for Mac 17.6.1</li>\n</ul>\n<h2 id=\"middleware%E7%B0%A1%E4%BB%8B\">Middleware簡介</h2>\n<p>ASP.NET Core中定義的Middleware可以用來處理所有的HTTP Request和Response，他們會一個串著一個，像一個管線（Pipeline）。</p>\n<p>每個Middleware可以決定是否要進入下一個Middleware，若沒有呼叫next()則不會進入下一個Middleware。</p>\n<p>由於所有的請求都會經過所有的Middleware，想要在例外發生時有一個地方可以捕捉所有例外，Middleware再適合不過了。</p>\n<h2 id=\"%E5%AF%A6%E4%BD%9Cmiddleware\">實作Middleware</h2>\n<p>在專案中新增一個<code>Middlewares</code>資料夾，統一存放自定義的Middlewares。</p>\n<p>接著在資料夾中新增檔名為<code>ExceptionHandleMiddleware.cs</code>的類別，在類別中加入下列程式碼：</p>\n<pre><code class=\"language-csharp\">public class ExceptionHandleMiddleware\n{\n    private readonly RequestDelegate _next;\n\n    public ExceptionHandleMiddleware(RequestDelegate next)\n    {\n        _next = next;\n    }\n\n    public async Task Invoke(HttpContext context)\n    {\n        try\n        {\n            //執行下一步\n            await _next(context);\n        }\n        catch (Exception exception)\n        {\n            //當錯誤發生時呼叫 HandleExceptionAsync 方法，不執行下一個Middleware\n            await HandleExceptionAsync(context, exception);\n        }\n    }\n\n    //直接返回 InternalServerError 給使用者\n    private static Task HandleExceptionAsync(HttpContext context, Exception exception)\n    {\n        context.Response.ContentType = &quot;application/json&quot;;\n        context.Response.StatusCode = StatusCodes.Status500InternalServerError;\n\n        return context.Response.WriteAsync($&quot;{context.Response.StatusCode} Internal Server Error.&quot;);\n    }\n}\n\n</code></pre>\n<p>Middleware完成後依照Program.cs的形式將Middleware使用IApplicationBuilder包起來，在Middlewares資料夾中新增名稱為<code>ExceptionHandleMiddlewareExtensions.cs</code>的類別，檔案內容如下：</p>\n<pre><code class=\"language-csharp\">public static class ExceptionHandleMiddlewareExtensions\n{\n    public static IApplicationBuilder UseExceptionHandleMiddleware(this IApplicationBuilder builder)\n    {\n        return builder.UseMiddleware&lt;ExceptionHandleMiddleware&gt;();\n    }\n}\n</code></pre>\n<p>接著在<code>Program.cs</code>中加入<code>app.UseExceptionHandleMiddleware();</code>即可完成自訂Middleware的設定。</p>\n<pre><code class=\"language-csharp\">public class Program\n{\n    public static void Main(string[] args)\n    {\n        var builder = WebApplication.CreateBuilder(args);\n\n        ...\n            \n        var app = builder.Build();\n\n        ...\n\n        app.UseExceptionHandleMiddleware();//加入這行即可完成設定\n\n        ...\n\n        app.Run();\n    }\n}\n</code></pre>\n<h6 id=\"%E5%8F%83%E8%80%83%E8%B3%87%E6%96%99\">參考資料</h6>\n<ul>\n<li><a href=\"https://learn.microsoft.com/zh-tw/aspnet/core/fundamentals/middleware/write?view=aspnetcore-6.0&amp;WT.mc_id=DT-MVP-5003022\">撰寫自訂的 ASP.NET Core 中介軟體</a></li>\n<li><a href=\"https://blog.poychang.net/asp-net-core-web-api-global-exception-handler/\">在 ASP.NET Core 中使用 Middleware 全域處理例外</a></li>\n<li><a href=\"https://ithelp.ithome.com.tw/articles/10238649\">[Day03] Middleware- 我與 ASP.NET Core 3 的 30天</a></li>\n<li><a href=\"https://www.cnblogs.com/RainingNight/p/middleware-in-asp-net-core.html\">ASP.NET Core 运行原理解剖[3]:Middleware-请求管道的构成</a></li>\n</ul>\n<!--kg-card-end: markdown-->","comment_id":"64d27827aaa179000118761d","plaintext":"當API被呼叫且發生例外時，不太會希望預設的錯誤訊息被傳回給使用者，在C#中可以使用try catch攔截錯誤訊息。\n\n\n但在每個可能會發生錯誤的地方都加上try catch相當繁瑣，使用Middleware可以捕捉錯誤訊息，並在返回給使用者之前統一處理，不僅可以節省開發時間，還能將錯誤訊息攔截，避免洩漏過多內部訊息給使用者，提高安全性。\n\n\n\n環境\n\n\n * macOS Ventura 13.0(Apple M1 Pro)\n * .NET 6.0\n * Visual Studio Community 2022 for Mac 17.6.1\n\n\n\nMiddleware簡介\n\n\nASP.NET Core中定義的Middleware可以用來處理所有的HTTP Request和Response，他們會一個串著一個，像一個管線（Pipeline）。\n\n\n每個Middleware可以決定是否要進入下一個Middleware，若沒有呼叫next()則不會進入下一個Middleware。\n\n\n由於所有的請求都會經過所有的Middleware，想要在例外發生時有一個地方可以捕捉所有例外，Middleware再適合不過了。\n\n\n\n實作Middleware\n\n\n在專案中新增一個Middlewares資料夾，統一存放自定義的Middlewares。\n\n\n接著在資料夾中新增檔名為ExceptionHandleMiddleware.cs的類別，在類別中加入下列程式碼：\n\n\npublic class ExceptionHandleMiddleware\n{\n    private readonly RequestDelegate _next;\n\n    public ExceptionHandleMiddleware(RequestDelegate next)\n    {\n        _next = next;\n    }\n\n    public async Task Invoke(HttpContext context)\n    {\n        try\n        {\n            //執行下一步\n            await _next(context);\n        }\n        catch (Exception exception)\n        {\n            //當錯誤發生時呼叫 HandleExceptionAsync 方法，不執行下一個Middleware\n            await HandleExceptionAsync(context, exception);\n        }\n    }\n\n    //直接返回 InternalServerError 給使用者\n    private static Task HandleExceptionAsync(HttpContext context, Exception exception)\n    {\n        context.Response.ContentType = \"application/json\";\n        context.Response.StatusCode = StatusCodes.Status500InternalServerError;\n\n        return context.Response.WriteAsync($\"{context.Response.StatusCode} Internal Server Error.\");\n    }\n}\n\n\n\n\nMiddleware完成後依照Program.cs的形式將Middleware使用IApplicationBuilder包起來，在Middlewares資料夾中新增名稱為ExceptionHandleMiddlewareExtensions.cs的類別，檔案內容如下：\n\n\npublic static class ExceptionHandleMiddlewareExtensions\n{\n    public static IApplicationBuilder UseExceptionHandleMiddleware(this IApplicationBuilder builder)\n    {\n        return builder.UseMiddleware<ExceptionHandleMiddleware>();\n    }\n}\n\n\n\n接著在Program.cs中加入app.UseExceptionHandleMiddleware();即可完成自訂Middleware的設定。\n\n\npublic class Program\n{\n    public static void Main(string[] args)\n    {\n        var builder = WebApplication.CreateBuilder(args);\n\n        ...\n            \n        var app = builder.Build();\n\n        ...\n\n        app.UseExceptionHandleMiddleware();//加入這行即可完成設定\n\n        ...\n\n        app.Run();\n    }\n}\n\n\n\n參考資料\n\n\n * 撰寫自訂的 ASP.NET Core 中介軟體\n * 在 ASP.NET Core 中使用 Middleware 全域處理例外\n * [Day03] Middleware- 我與 ASP.NET Core 3 的 30天\n * ASP.NET Core 运行原理解剖[3]:Middleware-请求管道的构成\n","feature_image":"__GHOST_URL__/content/images/2023/08/vs2012_gray_imprint-2.png","featured":0,"type":"post","status":"published","locale":null,"visibility":"public","email_recipient_filter":"all","created_at":"2023-08-08 17:15:19","created_by":"1","updated_at":"2023-08-24 18:48:53","updated_by":"1","published_at":"2023-08-08 17:18:11","published_by":"1","custom_excerpt":"當API被呼叫且發生例外時，不太會希望預設的錯誤訊息被傳回給使用者，在C#中可以使用try catch攔截錯誤訊息。\n\n但在每個可能會發生錯誤的地方都加上try catch相當繁瑣，使用Middleware可以捕捉錯誤訊息，並在返回給使用者之前統一處理，不僅可以節省開發時間，還能將錯誤訊息攔截，避免洩漏過多內部訊息給使用者，提高安全性。","codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null,"newsletter_id":null},{"id":"64d5f2755c5ac00001391bc4","uuid":"af35b2e8-5c67-4f20-87aa-5cab1f1cba05","title":"Vue3錯誤訊息 Component provided template option but runtime compilation is not supported in this build of Vue. Configure your bundler to alias \"vue\" to \"vue/dist/vue.esm-bundler.js\".","slug":"vue3-webpack-import-vue-esm-bundler","mobiledoc":"{\"version\":\"0.3.1\",\"atoms\":[],\"cards\":[[\"markdown\",{\"markdown\":\"從原本用CDN載入Vue，轉換為用npm載入並用webpack打包的過程中發生了錯誤，原因與Vue的使用環境有關。\\n\\n## 原因\\nVue依據不同的環境會需要使用不同的Vue檔案，以`vue.esm-bundler`為例，esm代表的是在程式碼中有使用ESModule，而bundler代表的是給webpack等打包工具使用的。\\n\\n## 解決方式\\n在webpack的webpack.config.js中，使用下列程式碼將`vue.esm-bundler`指定別名為vue即可解決該問題\\n\\n```javascript\\nmodule.exports = {\\n    ...\\n    resolve: {\\n        alias: {\\n            vue: 'vue/dist/vue.esm-bundler.js'\\n        }\\n    }\\n    ...\\n}\\n```\\n\\n###### 參考資料\\n- [vue3 使用第三方插件问题 bundler to alias “vue“ to “vue/dist/vue.esm-bundler.js](https://developer.aliyun.com/article/1138888)\"}]],\"markups\":[],\"sections\":[[10,0],[1,\"p\",[]]],\"ghostVersion\":\"4.0\"}","lexical":null,"html":"<!--kg-card-begin: markdown--><p>從原本用CDN載入Vue，轉換為用npm載入並用webpack打包的過程中發生了錯誤，原因與Vue的使用環境有關。</p>\n<h2 id=\"%E5%8E%9F%E5%9B%A0\">原因</h2>\n<p>Vue依據不同的環境會需要使用不同的Vue檔案，以<code>vue.esm-bundler</code>為例，esm代表的是在程式碼中有使用ESModule，而bundler代表的是給webpack等打包工具使用的。</p>\n<h2 id=\"%E8%A7%A3%E6%B1%BA%E6%96%B9%E5%BC%8F\">解決方式</h2>\n<p>在webpack的webpack.config.js中，使用下列程式碼將<code>vue.esm-bundler</code>指定別名為vue即可解決該問題</p>\n<pre><code class=\"language-javascript\">module.exports = {\n    ...\n    resolve: {\n        alias: {\n            vue: 'vue/dist/vue.esm-bundler.js'\n        }\n    }\n    ...\n}\n</code></pre>\n<h6 id=\"%E5%8F%83%E8%80%83%E8%B3%87%E6%96%99\">參考資料</h6>\n<ul>\n<li><a href=\"https://developer.aliyun.com/article/1138888\">vue3 使用第三方插件问题 bundler to alias “vue“ to “vue/dist/vue.esm-bundler.js</a></li>\n</ul>\n<!--kg-card-end: markdown-->","comment_id":"64d5f2755c5ac00001391bc4","plaintext":"從原本用CDN載入Vue，轉換為用npm載入並用webpack打包的過程中發生了錯誤，原因與Vue的使用環境有關。\n\n\n\n原因\n\n\nVue依據不同的環境會需要使用不同的Vue檔案，以vue.esm-bundler為例，esm代表的是在程式碼中有使用ESModule，而bundler代表的是給webpack等打包工具使用的。\n\n\n\n解決方式\n\n\n在webpack的webpack.config.js中，使用下列程式碼將vue.esm-bundler指定別名為vue即可解決該問題\n\n\nmodule.exports = {\n    ...\n    resolve: {\n        alias: {\n            vue: 'vue/dist/vue.esm-bundler.js'\n        }\n    }\n    ...\n}\n\n\n\n參考資料\n\n\n * vue3 使用第三方插件问题 bundler to alias “vue“ to “vue/dist/vue.esm-bundler.js\n","feature_image":"__GHOST_URL__/content/images/2023/08/vue.jpg","featured":0,"type":"post","status":"published","locale":null,"visibility":"public","email_recipient_filter":"all","created_at":"2023-08-11 08:33:57","created_by":"1","updated_at":"2023-08-11 08:36:07","updated_by":"1","published_at":"2023-08-11 08:36:07","published_by":"1","custom_excerpt":"從原本用CDN載入Vue，轉換為用npm載入並用webpack打包的過程中發生了錯誤，原因與Vue的使用環境有關。","codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null,"newsletter_id":null},{"id":"64d5f976e17ae60001fb7389","uuid":"db4208f9-ae9a-4ebd-88e7-24ad5daabd31","title":"Webpack設定多個entry及output","slug":"webpack-multiple-entry-and-output","mobiledoc":"{\"version\":\"0.3.1\",\"atoms\":[],\"cards\":[[\"markdown\",{\"markdown\":\"預設的Webpack使用單一entry及output，若需要多個entry及output可以在`webpack.config.js`中加入一個函式取得目錄內的所有檔案，將所有檔案加入至entry中。\\n\\n## 安裝並載入glob\\n```shell\\nnpm install glob\\n```\\n\\n## 在webpack.config.js中加入取得檔案函式\\n```javascript\\nconst glob = require(\\\"glob\\\");\\n\\nconst getEntry = () => {\\n    const entry = {};\\n    glob.sync('./src/js/*.js').forEach((name) => {\\n        const start = name.indexOf('src/js/') + 7; //前面路徑共8個位元的字串\\n        const end = name.length - 3; //減去附檔名.js\\n        const eArr = [];\\n        const n = name.slice(start, end); //取得js的名稱\\n        eArr.push(\\\"./\\\"+name); //push至陣列中\\n        entry[n] = eArr;\\n    });\\n    return entry;\\n};\\n```\\n\\n## 在entry及output加入檔案資訊\\n```javascript\\nconst path = require('path');\\n\\nmodule.exports = {\\n    entry: getEntry(),//呼叫getEntry函式取得檔案資訊\\n    output: {\\n        path: path.resolve(__dirname, 'wwwroot'),\\n        filename: './js/[name].min.js',//設定輸出檔案名稱\\n    },\\n    mode: 'development',\\n}\\n```\\n\\n\\n###### 參考資料\\n- [Webpack｜教學：webpack多入口/多出口配置](https://medium.com/anna-hsaio-%E5%89%8D%E7%AB%AF%E9%96%8B%E7%99%BC%E8%A8%98/webpack-%E6%95%99%E5%AD%B8-webpack%E5%A4%9A%E5%85%A5%E5%8F%A3-%E5%A4%9A%E5%87%BA%E5%8F%A3%E9%85%8D%E7%BD%AE-b15a1a2fd74a)\"}]],\"markups\":[],\"sections\":[[10,0],[1,\"p\",[]]],\"ghostVersion\":\"4.0\"}","lexical":null,"html":"<!--kg-card-begin: markdown--><p>預設的Webpack使用單一entry及output，若需要多個entry及output可以在<code>webpack.config.js</code>中加入一個函式取得目錄內的所有檔案，將所有檔案加入至entry中。</p>\n<h2 id=\"%E5%AE%89%E8%A3%9D%E4%B8%A6%E8%BC%89%E5%85%A5glob\">安裝並載入glob</h2>\n<pre><code class=\"language-shell\">npm install glob\n</code></pre>\n<h2 id=\"%E5%9C%A8webpackconfigjs%E4%B8%AD%E5%8A%A0%E5%85%A5%E5%8F%96%E5%BE%97%E6%AA%94%E6%A1%88%E5%87%BD%E5%BC%8F\">在webpack.config.js中加入取得檔案函式</h2>\n<pre><code class=\"language-javascript\">const glob = require(&quot;glob&quot;);\n\nconst getEntry = () =&gt; {\n    const entry = {};\n    glob.sync('./src/js/*.js').forEach((name) =&gt; {\n        const start = name.indexOf('src/js/') + 7; //前面路徑共8個位元的字串\n        const end = name.length - 3; //減去附檔名.js\n        const eArr = [];\n        const n = name.slice(start, end); //取得js的名稱\n        eArr.push(&quot;./&quot;+name); //push至陣列中\n        entry[n] = eArr;\n    });\n    return entry;\n};\n</code></pre>\n<h2 id=\"%E5%9C%A8entry%E5%8F%8Aoutput%E5%8A%A0%E5%85%A5%E6%AA%94%E6%A1%88%E8%B3%87%E8%A8%8A\">在entry及output加入檔案資訊</h2>\n<pre><code class=\"language-javascript\">const path = require('path');\n\nmodule.exports = {\n    entry: getEntry(),//呼叫getEntry函式取得檔案資訊\n    output: {\n        path: path.resolve(__dirname, 'wwwroot'),\n        filename: './js/[name].min.js',//設定輸出檔案名稱\n    },\n    mode: 'development',\n}\n</code></pre>\n<h6 id=\"%E5%8F%83%E8%80%83%E8%B3%87%E6%96%99\">參考資料</h6>\n<ul>\n<li><a href=\"https://medium.com/anna-hsaio-%E5%89%8D%E7%AB%AF%E9%96%8B%E7%99%BC%E8%A8%98/webpack-%E6%95%99%E5%AD%B8-webpack%E5%A4%9A%E5%85%A5%E5%8F%A3-%E5%A4%9A%E5%87%BA%E5%8F%A3%E9%85%8D%E7%BD%AE-b15a1a2fd74a\">Webpack｜教學：webpack多入口/多出口配置</a></li>\n</ul>\n<!--kg-card-end: markdown-->","comment_id":"64d5f976e17ae60001fb7389","plaintext":"預設的Webpack使用單一entry及output，若需要多個entry及output可以在webpack.config.js中加入一個函式取得目錄內的所有檔案，將所有檔案加入至entry中。\n\n\n\n安裝並載入glob\n\n\nnpm install glob\n\n\n\n\n在webpack.config.js中加入取得檔案函式\n\n\nconst glob = require(\"glob\");\n\nconst getEntry = () => {\n    const entry = {};\n    glob.sync('./src/js/*.js').forEach((name) => {\n        const start = name.indexOf('src/js/') + 7; //前面路徑共8個位元的字串\n        const end = name.length - 3; //減去附檔名.js\n        const eArr = [];\n        const n = name.slice(start, end); //取得js的名稱\n        eArr.push(\"./\"+name); //push至陣列中\n        entry[n] = eArr;\n    });\n    return entry;\n};\n\n\n\n\n在entry及output加入檔案資訊\n\n\nconst path = require('path');\n\nmodule.exports = {\n    entry: getEntry(),//呼叫getEntry函式取得檔案資訊\n    output: {\n        path: path.resolve(__dirname, 'wwwroot'),\n        filename: './js/[name].min.js',//設定輸出檔案名稱\n    },\n    mode: 'development',\n}\n\n\n\n參考資料\n\n\n * Webpack｜教學：webpack多入口/多出口配置\n","feature_image":"__GHOST_URL__/content/images/2023/08/webpack.png","featured":0,"type":"post","status":"published","locale":null,"visibility":"public","email_recipient_filter":"all","created_at":"2023-08-11 09:03:50","created_by":"1","updated_at":"2023-08-11 09:07:59","updated_by":"1","published_at":"2023-08-11 09:07:59","published_by":"1","custom_excerpt":"預設的Webpack使用單一entry及output，若需要多個entry及output可以在webpack.config.js中加入一個函式取得目錄內的所有檔案，將所有檔案加入至entry中。","codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null,"newsletter_id":null},{"id":"64da6975e17ae60001fb739e","uuid":"8ffecba6-d349-4e0d-aa4b-9fcc263e8690","title":"叢集索引與非叢集索引","slug":"clustered-and-nonclustered-indexes","mobiledoc":"{\"version\":\"0.3.1\",\"atoms\":[],\"cards\":[[\"markdown\",{\"markdown\":\"通常資料庫在尋找資料是逐行檢查，看看每一筆資料是否符合條件，若符合則拿出，不符合就往下一筆直到結束，稱為Full table scan。\\n\\n隨著資料量越來越大，查找的時間也會跟著變慢，使用Index可以加快查詢速度。\\n\\n若在某欄位設定Index，資料庫會另外建立一張表，用於對應該欄位與完整資料，並採用Binary Search Algorithm或更快的演算法取得資料，以達成加快搜尋的目的。\\n\\n資料結構方面通常會使用Hash或B-tree實作。\\nHash通常用於儲存不能重複的資料，例如Primary Index或Unique Index。\\nB-tree則適合儲存允許重複的值，例如Non-Unique Index\\n\\n## 索引的缺點\\n- 使用索引會額外建立一張表，拿空間換取時間\\n- 在更動資料時會連動到索引表，若該表會頻繁修改則會對資料庫造成負擔\\n\\n## 叢集索引（Clustered Index）\\n- 一個資料表只會有一個叢集索引，通常是主鍵（Primary Key）欄位\\n- 資料表會直接依照叢集索引的順序排列，搜尋速度會非常快速\\n- 實體的資料表與索引表的順序是一樣的\\n\\n## 非叢集索引（Non-Clustered Index）\\n- 一個資料表中可以有多個非叢集索引\\n- 不會變動資料表的順序，只會在索引表中依照索引欄位自行排序\\n\\n## 使用索引的時機\\n- 主鍵 Primary Key\\n- 外部鍵 Foreign Key\\n- 常被放在ORDER, WHERE, GROUP等查詢的欄位\\n\\n\\n###### 參考資料\\n- [叢集與非叢集索引說明](https://learn.microsoft.com/zh-tw/sql/relational-databases/indexes/clustered-and-nonclustered-indexes-described?view=sql-server-ver16)\\n- [[Rails 效能優化] 資料庫索引 Database Indexing](https://medium.com/@jinghua.shih/rails-%E7%B6%B2%E7%AB%99%E6%95%88%E8%83%BD%E5%84%AA%E5%8C%96-%E4%BA%8C-%E8%B3%87%E6%96%99%E5%BA%AB%E7%B4%A2%E5%BC%95-database-index-bd89fa3757a)\\n- [Database — Indexing, Transactions & Stored Procedures (Part 9)](https://medium.com/omarelgabrys-blog/database-indexing-and-transactions-part-9-a24781d429f8)\"}]],\"markups\":[],\"sections\":[[10,0],[1,\"p\",[]]],\"ghostVersion\":\"4.0\"}","lexical":null,"html":"<!--kg-card-begin: markdown--><p>通常資料庫在尋找資料是逐行檢查，看看每一筆資料是否符合條件，若符合則拿出，不符合就往下一筆直到結束，稱為Full table scan。</p>\n<p>隨著資料量越來越大，查找的時間也會跟著變慢，使用Index可以加快查詢速度。</p>\n<p>若在某欄位設定Index，資料庫會另外建立一張表，用於對應該欄位與完整資料，並採用Binary Search Algorithm或更快的演算法取得資料，以達成加快搜尋的目的。</p>\n<p>資料結構方面通常會使用Hash或B-tree實作。<br>\nHash通常用於儲存不能重複的資料，例如Primary Index或Unique Index。<br>\nB-tree則適合儲存允許重複的值，例如Non-Unique Index</p>\n<h2 id=\"%E7%B4%A2%E5%BC%95%E7%9A%84%E7%BC%BA%E9%BB%9E\">索引的缺點</h2>\n<ul>\n<li>使用索引會額外建立一張表，拿空間換取時間</li>\n<li>在更動資料時會連動到索引表，若該表會頻繁修改則會對資料庫造成負擔</li>\n</ul>\n<h2 id=\"%E5%8F%A2%E9%9B%86%E7%B4%A2%E5%BC%95%EF%BC%88clustered-index%EF%BC%89\">叢集索引（Clustered Index）</h2>\n<ul>\n<li>一個資料表只會有一個叢集索引，通常是主鍵（Primary Key）欄位</li>\n<li>資料表會直接依照叢集索引的順序排列，搜尋速度會非常快速</li>\n<li>實體的資料表與索引表的順序是一樣的</li>\n</ul>\n<h2 id=\"%E9%9D%9E%E5%8F%A2%E9%9B%86%E7%B4%A2%E5%BC%95%EF%BC%88non-clustered-index%EF%BC%89\">非叢集索引（Non-Clustered Index）</h2>\n<ul>\n<li>一個資料表中可以有多個非叢集索引</li>\n<li>不會變動資料表的順序，只會在索引表中依照索引欄位自行排序</li>\n</ul>\n<h2 id=\"%E4%BD%BF%E7%94%A8%E7%B4%A2%E5%BC%95%E7%9A%84%E6%99%82%E6%A9%9F\">使用索引的時機</h2>\n<ul>\n<li>主鍵 Primary Key</li>\n<li>外部鍵 Foreign Key</li>\n<li>常被放在ORDER, WHERE, GROUP等查詢的欄位</li>\n</ul>\n<h6 id=\"%E5%8F%83%E8%80%83%E8%B3%87%E6%96%99\">參考資料</h6>\n<ul>\n<li><a href=\"https://learn.microsoft.com/zh-tw/sql/relational-databases/indexes/clustered-and-nonclustered-indexes-described?view=sql-server-ver16\">叢集與非叢集索引說明</a></li>\n<li><a href=\"https://medium.com/@jinghua.shih/rails-%E7%B6%B2%E7%AB%99%E6%95%88%E8%83%BD%E5%84%AA%E5%8C%96-%E4%BA%8C-%E8%B3%87%E6%96%99%E5%BA%AB%E7%B4%A2%E5%BC%95-database-index-bd89fa3757a\">[Rails 效能優化] 資料庫索引 Database Indexing</a></li>\n<li><a href=\"https://medium.com/omarelgabrys-blog/database-indexing-and-transactions-part-9-a24781d429f8\">Database — Indexing, Transactions &amp; Stored Procedures (Part 9)</a></li>\n</ul>\n<!--kg-card-end: markdown-->","comment_id":"64da6975e17ae60001fb739e","plaintext":"通常資料庫在尋找資料是逐行檢查，看看每一筆資料是否符合條件，若符合則拿出，不符合就往下一筆直到結束，稱為Full table scan。\n\n\n隨著資料量越來越大，查找的時間也會跟著變慢，使用Index可以加快查詢速度。\n\n\n若在某欄位設定Index，資料庫會另外建立一張表，用於對應該欄位與完整資料，並採用Binary Search Algorithm或更快的演算法取得資料，以達成加快搜尋的目的。\n\n\n資料結構方面通常會使用Hash或B-tree實作。\n\nHash通常用於儲存不能重複的資料，例如Primary Index或Unique Index。\n\nB-tree則適合儲存允許重複的值，例如Non-Unique Index\n\n\n\n索引的缺點\n\n\n * 使用索引會額外建立一張表，拿空間換取時間\n * 在更動資料時會連動到索引表，若該表會頻繁修改則會對資料庫造成負擔\n\n\n\n叢集索引（Clustered Index）\n\n\n * 一個資料表只會有一個叢集索引，通常是主鍵（Primary Key）欄位\n * 資料表會直接依照叢集索引的順序排列，搜尋速度會非常快速\n * 實體的資料表與索引表的順序是一樣的\n\n\n\n非叢集索引（Non-Clustered Index）\n\n\n * 一個資料表中可以有多個非叢集索引\n * 不會變動資料表的順序，只會在索引表中依照索引欄位自行排序\n\n\n\n使用索引的時機\n\n\n * 主鍵 Primary Key\n * 外部鍵 Foreign Key\n * 常被放在ORDER, WHERE, GROUP等查詢的欄位\n\n\n參考資料\n\n\n * 叢集與非叢集索引說明\n * [Rails 效能優化] 資料庫索引 Database Indexing\n * Database — Indexing, Transactions & Stored Procedures (Part 9)\n","feature_image":"__GHOST_URL__/content/images/2023/08/jan-antonin-kolar-lRoX0shwjUQ-unsplash_database.jpeg","featured":0,"type":"post","status":"published","locale":null,"visibility":"public","email_recipient_filter":"all","created_at":"2023-08-14 17:50:45","created_by":"1","updated_at":"2023-08-14 17:53:35","updated_by":"1","published_at":"2023-08-14 17:53:35","published_by":"1","custom_excerpt":"通常資料庫在尋找資料是逐行檢查，看看每一筆資料是否符合條件，若符合則拿出，不符合就往下一筆直到結束，稱為Full table scan。\n\n隨著資料量越來越大，查找的時間也會跟著變慢，使用Index可以加快查詢速度。","codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null,"newsletter_id":null},{"id":"64db19c5e17ae60001fb73af","uuid":"71f5c130-eabc-46de-ae64-5fa261bfdb04","title":"ASP.NET中RenderSection的作用","slug":"aspnet-core-render-section","mobiledoc":"{\"version\":\"0.3.1\",\"atoms\":[],\"cards\":[[\"markdown\",{\"markdown\":\"專案中的各個Page會被插入到_Layout.cshtml裡@RenderBody()的位置，與主版面整合。若Page中的某段程式不想被放在body內時，可以使用Section及RenderSection改變程式碼在_Layout.cshtml中的插入位置。\\n\\n本次的使用情境是想要在頁面中加入JavaScript檔案，但想要讓他在_Layout.cshtml的最尾端才被讀取，故使用Section及RenderSection改變程式碼的插入位置。\\n\\n## 建立Section區塊\\n在`Index.cshtml`中加入Section區塊，將要插入的程式碼放在大括弧中\\n```csharp\\n<div id=\\\"index\\\">\\n    <section class=\\\"section\\\">\\n    ...\\n    </section>\\n</div>\\n\\n@section Scripts {\\n    <script type=\\\"module\\\" src=\\\"~/js/Index.min.js\\\" asp-append-version=\\\"true\\\"></script>\\n}\\n\\n```\\n@section後面的Scripts可以自定義名稱，必須對應到RenderSection函式內傳入的名稱\\n\\n## 使用RenderSection插入程式碼\\n\\n在`_Layout.cshtml`中選擇一個風水寶地將RenderSection加入程式中，用以插入在Section中的程式碼\\n\\n```csharp\\n<body>\\n    <div id=\\\"app\\\">\\n        <header class=\\\"header\\\">\\n        ...\\n        </header>\\n    </div>\\n    @RenderBody()\\n\\n    <script type=\\\"module\\\" src=\\\"~/js/App.min.js\\\" asp-append-version=\\\"true\\\"></script>\\n    @RenderSection(\\\"Scripts\\\", required: false)\\n</body>\\n\\n```\\n\\n###### 參考資料\\n- [認識View - View的種類](https://ithelp.ithome.com.tw/articles/10159990)\\n- [[MVC] Razor @RenderSection 使用心得](http://white1027.blogspot.com/2013/10/mvc-razor-rendersection.html)\\n- [Layout in ASP.NET Core](https://learn.microsoft.com/en-us/aspnet/core/mvc/views/layout?view=aspnetcore-7.0)\"}]],\"markups\":[],\"sections\":[[10,0],[1,\"p\",[]]],\"ghostVersion\":\"4.0\"}","lexical":null,"html":"<!--kg-card-begin: markdown--><p>專案中的各個Page會被插入到_Layout.cshtml裡@RenderBody()的位置，與主版面整合。若Page中的某段程式不想被放在body內時，可以使用Section及RenderSection改變程式碼在_Layout.cshtml中的插入位置。</p>\n<p>本次的使用情境是想要在頁面中加入JavaScript檔案，但想要讓他在_Layout.cshtml的最尾端才被讀取，故使用Section及RenderSection改變程式碼的插入位置。</p>\n<h2 id=\"%E5%BB%BA%E7%AB%8Bsection%E5%8D%80%E5%A1%8A\">建立Section區塊</h2>\n<p>在<code>Index.cshtml</code>中加入Section區塊，將要插入的程式碼放在大括弧中</p>\n<pre><code class=\"language-csharp\">&lt;div id=&quot;index&quot;&gt;\n    &lt;section class=&quot;section&quot;&gt;\n    ...\n    &lt;/section&gt;\n&lt;/div&gt;\n\n@section Scripts {\n    &lt;script type=&quot;module&quot; src=&quot;~/js/Index.min.js&quot; asp-append-version=&quot;true&quot;&gt;&lt;/script&gt;\n}\n\n</code></pre>\n<p>@section後面的Scripts可以自定義名稱，必須對應到RenderSection函式內傳入的名稱</p>\n<h2 id=\"%E4%BD%BF%E7%94%A8rendersection%E6%8F%92%E5%85%A5%E7%A8%8B%E5%BC%8F%E7%A2%BC\">使用RenderSection插入程式碼</h2>\n<p>在<code>_Layout.cshtml</code>中選擇一個風水寶地將RenderSection加入程式中，用以插入在Section中的程式碼</p>\n<pre><code class=\"language-csharp\">&lt;body&gt;\n    &lt;div id=&quot;app&quot;&gt;\n        &lt;header class=&quot;header&quot;&gt;\n        ...\n        &lt;/header&gt;\n    &lt;/div&gt;\n    @RenderBody()\n\n    &lt;script type=&quot;module&quot; src=&quot;~/js/App.min.js&quot; asp-append-version=&quot;true&quot;&gt;&lt;/script&gt;\n    @RenderSection(&quot;Scripts&quot;, required: false)\n&lt;/body&gt;\n\n</code></pre>\n<h6 id=\"%E5%8F%83%E8%80%83%E8%B3%87%E6%96%99\">參考資料</h6>\n<ul>\n<li><a href=\"https://ithelp.ithome.com.tw/articles/10159990\">認識View - View的種類</a></li>\n<li><a href=\"http://white1027.blogspot.com/2013/10/mvc-razor-rendersection.html\">[MVC] Razor @RenderSection 使用心得</a></li>\n<li><a href=\"https://learn.microsoft.com/en-us/aspnet/core/mvc/views/layout?view=aspnetcore-7.0\">Layout in ASP.NET Core</a></li>\n</ul>\n<!--kg-card-end: markdown-->","comment_id":"64db19c5e17ae60001fb73af","plaintext":"專案中的各個Page會被插入到_Layout.cshtml裡@RenderBody()的位置，與主版面整合。若Page中的某段程式不想被放在body內時，可以使用Section及RenderSection改變程式碼在_Layout.cshtml中的插入位置。\n\n\n本次的使用情境是想要在頁面中加入JavaScript檔案，但想要讓他在_Layout.cshtml的最尾端才被讀取，故使用Section及RenderSection改變程式碼的插入位置。\n\n\n\n建立Section區塊\n\n\n在Index.cshtml中加入Section區塊，將要插入的程式碼放在大括弧中\n\n\n<div id=\"index\">\n    <section class=\"section\">\n    ...\n    </section>\n</div>\n\n@section Scripts {\n    <script type=\"module\" src=\"~/js/Index.min.js\" asp-append-version=\"true\"></script>\n}\n\n\n\n\n@section後面的Scripts可以自定義名稱，必須對應到RenderSection函式內傳入的名稱\n\n\n\n使用RenderSection插入程式碼\n\n\n在_Layout.cshtml中選擇一個風水寶地將RenderSection加入程式中，用以插入在Section中的程式碼\n\n\n<body>\n    <div id=\"app\">\n        <header class=\"header\">\n        ...\n        </header>\n    </div>\n    @RenderBody()\n\n    <script type=\"module\" src=\"~/js/App.min.js\" asp-append-version=\"true\"></script>\n    @RenderSection(\"Scripts\", required: false)\n</body>\n\n\n\n\n參考資料\n\n\n * 認識View - View的種類\n * [MVC] Razor @RenderSection 使用心得\n * Layout in ASP.NET Core\n","feature_image":"__GHOST_URL__/content/images/2023/08/vs2012_gray_imprint-1.png","featured":0,"type":"post","status":"published","locale":null,"visibility":"public","email_recipient_filter":"all","created_at":"2023-08-15 06:23:01","created_by":"1","updated_at":"2023-08-24 18:48:30","updated_by":"1","published_at":"2023-08-15 06:25:07","published_by":"1","custom_excerpt":"專案中的各個Page會被插入到_Layout.cshtml裡@RenderBody()的位置，與主版面整合。若Page中的某段程式不想被放在body內時，可以使用Section及RenderSection改變程式碼在_Layout.cshtml中的插入位置。","codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null,"newsletter_id":null},{"id":"64dbb5f35f1c820001e0a416","uuid":"e3ea247e-f1e2-47f4-8d25-5046006a99c8","title":"依賴注入 Dependency injection","slug":"aspnet-core-dependency-injection","mobiledoc":"{\"version\":\"0.3.1\",\"atoms\":[],\"cards\":[[\"markdown\",{\"markdown\":\"## 依賴注入\\n\\n### 為什麼要使用注入\\n為了把低階模組送到高階模組的內使用\\n\\n### 為什麼要把低階模組往高階模組送\\n為了不直接在高階模組內建立低階模組物件\\n\\n### 為什麼不直接在高階模組中建立物件\\n在高階模組中直接針對低階模組進行實作會產生高耦合，高度依賴低階模組，當想抽換低階模組、低階模組常常變動或是低階模組的設計改變時，會影響到高階模組。應統一由控制反轉中心建立物件，將物件送到高階模組內進行使用\\n\\n### 為什麼是高階模組定義需求放在Interface內\\n高階模組依賴低階模組，當低階模組異動時高階模組會受影響，高階模組相對弱勢，故使用高階模組的需求定義介面的內容。\\n另外以常理來看，假設我們建立一個瀏覽清單服務，會需要用到登入功能及列表功能，我們是先知道我們要什麼功能，定義好介面後再由低階模組實作，而不是實作好登入功能及列表功能等低階模組後，我們才想說來建立一個瀏覽清單服務。\\n從不同角度來看都應該由高階模組定義介面內的方法。\\n\\n## 控制反轉及依賴注入\\n\\n以飲料店來舉例，假設我今天開了一間格雷伯爵奶茶專賣店，我向食品材料行進貨茶葉\\n```csharp\\npublic class TeaShop{\\n    public int GetTea(){\\n        //建立一個供應商物件\\n        SupplierA supplierA = new SupplierA();\\n        \\n        //從供應商購買600g的茶葉\\n        int tea = supplierA.buy(600);\\n        \\n        //取得茶葉並回傳\\n        return tea;\\n    }\\n}\\n```\\n\\n目前我把SupplierA寫死在飲料店裡的GetTea方法裡，TeaShop高度依賴於SupplierA。\\n開店一陣子後我覺得SupplierA提供的茶有怪味，想換成從SupplierB叫貨\\n\\n```csharp\\npublic class TeaShop{\\n    public int GetTea(){\\n        //建立一個供應商物件\\n        SupplierB supplierB = new SupplierB();\\n        \\n        //從供應商購買600g的茶葉\\n        int tea = supplierB.buy(600);\\n        \\n        //取得茶葉並回傳\\n        return tea;\\n    }\\n}\\n```\\n\\n如果供應商一直換，我的程式豈不是要一直改？\\n幸好這個問題有解決的辦法，我們把SupplierA和SupplierB抽象成Supplier就皆大歡喜啦\\n\\n```csharp\\npublic interface ISupplier{\\n    int buy();\\n}\\n\\npublic class SupplierA : ISupplier{\\n    public int buy();\\n}\\n\\npublic class TeaShop{\\n    public int GetTea(){\\n        //建立一個供應商物件\\n        ISupplier supplier = new SupplierA();\\n        \\n        //從供應商購買600g的茶葉\\n        int tea = supplier.buy(600);\\n        \\n        //取得茶葉並回傳\\n        return tea;\\n    }\\n}\\n```\\n這顯然沒有解決我們的問題，當我要把SupplierA換成SupplierB時還是會更改到程式。\\n如果我讓GetTea只關心要跟廠商進貨，而不關心要跟哪間進貨，把這個煩惱交給別人好像問題就解決了\\n\\n```csharp\\npublic interface ISupplier{\\n    int buy();\\n}\\n\\npublic class SupplierA : ISupplier{\\n    public int buy();\\n}\\n\\npublic class TeaShop{\\n    \\n    private ISupplier _supplier;\\n    \\n    public TeaShop(ISupplier supplier){\\n        _supplier = supplier;\\n    }\\n    \\n    public int GetTea(){\\n        \\n        //從供應商購買600g的茶葉\\n        int tea = _supplier.buy(600);\\n        \\n        //取得茶葉並回傳\\n        return tea;\\n    }\\n}\\n```\\n這就是大家俗稱的控制反轉 (Inversion of Control, IoC)，原本高階依賴於低階（TeaShop依賴於SupplierA或SupplierB），變成高階被動接收低階模組（TeaShop被動接收被傳入的supplier）。\\n原本是高階模組直接建立低階模組，經過控制反轉之後變成由控制反轉中心去建立低階模組，並傳給高階模組使用。\\n\\n低階模組的物件要能夠被傳入高階模組就稱為依賴注入，通常會在高階模組中使用兩者依賴的介面宣告一個變數（使用ISupplier宣告_supplier變數用於存放低階模組物件），使用建構子將該物件傳入並指定給該變數，供高階模組使用。\\n\\n要用哪個廠商的問題是解決了，但也還沒解決，我們只是把問題丟給別人了，這時該由誰來建立物件傳遞物件呢？我們這時就會需要「控制反轉中心」。\\n\\n## 控制反轉中心\\n控制反轉中心就是建立所有物件及傳遞物件的根，他會集結所有實體分配給各個物件。\\n\\n## ASP.Net Core的依賴注入\\n\\n在ASP.NET中使用依賴注入的方法如下\\n首先，在專案中加入**services**資料夾，在資料夾建立SupplierAService.cs\\n```csharp\\npublic class SupplierAService{\\n    public int buy(int gram){\\n        return gram;\\n    }\\n}\\n```\\n\\n接著將SupplierAService服務註冊到WebApplicationBuilder，註冊完之後DI容器便會知道ISupplier對應的實作是SupplierAService，當需要使用到ISupplier時便會幫我們找到SupplierAService，new出物件之後幫我們丟到高階容器中注入，超級方便！！\\n```csharp\\npublic static void Main(string[] args){\\n    var builder = WebApplication.CreateBuilder(args);\\n    ...\\n    builder.Services.AddTransient<ISupplier,SupplierAService>();\\n    ...\\n    var app = builder.Build();\\n}\\n```\\n\\n例如當TeaShopController有要用到ISupplier服務時，只需要在建構式傳入ISupplier即可使用\\n```csharp\\npublic class TeaShopController{\\n    private ISupplier _supplier;\\n    \\n    public TeaShopController(ISupplier supplier){\\n        _supplier = supplier;\\n    }\\n    \\n    public int GetTea(){\\n        \\n        //從供應商購買600g的茶葉\\n        int tea = _supplier.buy(600);\\n        \\n        //取得茶葉並回傳\\n        return tea;\\n    }  \\n}\\n\\n```\\n\\n\\n###### 參考資料\\n- [菜雞新訓記 (6): 使用 依賴注入 (Dependency Injection) 來解除強耦合吧](https://igouist.github.io/post/2021/11/newbie-6-dependency-injection/)\\n- [如何在 .NET Core 使用 DI ?](https://old-oomusou.goodjack.tw/netcore/di/)\\n- [Dependency Injection in .NET Core (.NET 6)](https://www.youtube.com/watch?v=Hhpq7oYcpGE)\\n- [淺入淺出 Dependency Injection](https://medium.com/wenchin-rolls-around/%E6%B7%BA%E5%85%A5%E6%B7%BA%E5%87%BA-dependency-injection-ea672ba033ca)\\n- [.NET 相依性插入](https://learn.microsoft.com/zh-tw/dotnet/core/extensions/dependency-injection)\"}]],\"markups\":[],\"sections\":[[10,0],[1,\"p\",[]]],\"ghostVersion\":\"4.0\"}","lexical":null,"html":"<!--kg-card-begin: markdown--><h2 id=\"%E4%BE%9D%E8%B3%B4%E6%B3%A8%E5%85%A5\">依賴注入</h2>\n<h3 id=\"%E7%82%BA%E4%BB%80%E9%BA%BC%E8%A6%81%E4%BD%BF%E7%94%A8%E6%B3%A8%E5%85%A5\">為什麼要使用注入</h3>\n<p>為了把低階模組送到高階模組的內使用</p>\n<h3 id=\"%E7%82%BA%E4%BB%80%E9%BA%BC%E8%A6%81%E6%8A%8A%E4%BD%8E%E9%9A%8E%E6%A8%A1%E7%B5%84%E5%BE%80%E9%AB%98%E9%9A%8E%E6%A8%A1%E7%B5%84%E9%80%81\">為什麼要把低階模組往高階模組送</h3>\n<p>為了不直接在高階模組內建立低階模組物件</p>\n<h3 id=\"%E7%82%BA%E4%BB%80%E9%BA%BC%E4%B8%8D%E7%9B%B4%E6%8E%A5%E5%9C%A8%E9%AB%98%E9%9A%8E%E6%A8%A1%E7%B5%84%E4%B8%AD%E5%BB%BA%E7%AB%8B%E7%89%A9%E4%BB%B6\">為什麼不直接在高階模組中建立物件</h3>\n<p>在高階模組中直接針對低階模組進行實作會產生高耦合，高度依賴低階模組，當想抽換低階模組、低階模組常常變動或是低階模組的設計改變時，會影響到高階模組。應統一由控制反轉中心建立物件，將物件送到高階模組內進行使用</p>\n<h3 id=\"%E7%82%BA%E4%BB%80%E9%BA%BC%E6%98%AF%E9%AB%98%E9%9A%8E%E6%A8%A1%E7%B5%84%E5%AE%9A%E7%BE%A9%E9%9C%80%E6%B1%82%E6%94%BE%E5%9C%A8interface%E5%85%A7\">為什麼是高階模組定義需求放在Interface內</h3>\n<p>高階模組依賴低階模組，當低階模組異動時高階模組會受影響，高階模組相對弱勢，故使用高階模組的需求定義介面的內容。<br>\n另外以常理來看，假設我們建立一個瀏覽清單服務，會需要用到登入功能及列表功能，我們是先知道我們要什麼功能，定義好介面後再由低階模組實作，而不是實作好登入功能及列表功能等低階模組後，我們才想說來建立一個瀏覽清單服務。<br>\n從不同角度來看都應該由高階模組定義介面內的方法。</p>\n<h2 id=\"%E6%8E%A7%E5%88%B6%E5%8F%8D%E8%BD%89%E5%8F%8A%E4%BE%9D%E8%B3%B4%E6%B3%A8%E5%85%A5\">控制反轉及依賴注入</h2>\n<p>以飲料店來舉例，假設我今天開了一間格雷伯爵奶茶專賣店，我向食品材料行進貨茶葉</p>\n<pre><code class=\"language-csharp\">public class TeaShop{\n    public int GetTea(){\n        //建立一個供應商物件\n        SupplierA supplierA = new SupplierA();\n        \n        //從供應商購買600g的茶葉\n        int tea = supplierA.buy(600);\n        \n        //取得茶葉並回傳\n        return tea;\n    }\n}\n</code></pre>\n<p>目前我把SupplierA寫死在飲料店裡的GetTea方法裡，TeaShop高度依賴於SupplierA。<br>\n開店一陣子後我覺得SupplierA提供的茶有怪味，想換成從SupplierB叫貨</p>\n<pre><code class=\"language-csharp\">public class TeaShop{\n    public int GetTea(){\n        //建立一個供應商物件\n        SupplierB supplierB = new SupplierB();\n        \n        //從供應商購買600g的茶葉\n        int tea = supplierB.buy(600);\n        \n        //取得茶葉並回傳\n        return tea;\n    }\n}\n</code></pre>\n<p>如果供應商一直換，我的程式豈不是要一直改？<br>\n幸好這個問題有解決的辦法，我們把SupplierA和SupplierB抽象成Supplier就皆大歡喜啦</p>\n<pre><code class=\"language-csharp\">public interface ISupplier{\n    int buy();\n}\n\npublic class SupplierA : ISupplier{\n    public int buy();\n}\n\npublic class TeaShop{\n    public int GetTea(){\n        //建立一個供應商物件\n        ISupplier supplier = new SupplierA();\n        \n        //從供應商購買600g的茶葉\n        int tea = supplier.buy(600);\n        \n        //取得茶葉並回傳\n        return tea;\n    }\n}\n</code></pre>\n<p>這顯然沒有解決我們的問題，當我要把SupplierA換成SupplierB時還是會更改到程式。<br>\n如果我讓GetTea只關心要跟廠商進貨，而不關心要跟哪間進貨，把這個煩惱交給別人好像問題就解決了</p>\n<pre><code class=\"language-csharp\">public interface ISupplier{\n    int buy();\n}\n\npublic class SupplierA : ISupplier{\n    public int buy();\n}\n\npublic class TeaShop{\n    \n    private ISupplier _supplier;\n    \n    public TeaShop(ISupplier supplier){\n        _supplier = supplier;\n    }\n    \n    public int GetTea(){\n        \n        //從供應商購買600g的茶葉\n        int tea = _supplier.buy(600);\n        \n        //取得茶葉並回傳\n        return tea;\n    }\n}\n</code></pre>\n<p>這就是大家俗稱的控制反轉 (Inversion of Control, IoC)，原本高階依賴於低階（TeaShop依賴於SupplierA或SupplierB），變成高階被動接收低階模組（TeaShop被動接收被傳入的supplier）。<br>\n原本是高階模組直接建立低階模組，經過控制反轉之後變成由控制反轉中心去建立低階模組，並傳給高階模組使用。</p>\n<p>低階模組的物件要能夠被傳入高階模組就稱為依賴注入，通常會在高階模組中使用兩者依賴的介面宣告一個變數（使用ISupplier宣告_supplier變數用於存放低階模組物件），使用建構子將該物件傳入並指定給該變數，供高階模組使用。</p>\n<p>要用哪個廠商的問題是解決了，但也還沒解決，我們只是把問題丟給別人了，這時該由誰來建立物件傳遞物件呢？我們這時就會需要「控制反轉中心」。</p>\n<h2 id=\"%E6%8E%A7%E5%88%B6%E5%8F%8D%E8%BD%89%E4%B8%AD%E5%BF%83\">控制反轉中心</h2>\n<p>控制反轉中心就是建立所有物件及傳遞物件的根，他會集結所有實體分配給各個物件。</p>\n<h2 id=\"aspnet-core%E7%9A%84%E4%BE%9D%E8%B3%B4%E6%B3%A8%E5%85%A5\">ASP.Net Core的依賴注入</h2>\n<p>在ASP.NET中使用依賴注入的方法如下<br>\n首先，在專案中加入<strong>services</strong>資料夾，在資料夾建立SupplierAService.cs</p>\n<pre><code class=\"language-csharp\">public class SupplierAService{\n    public int buy(int gram){\n        return gram;\n    }\n}\n</code></pre>\n<p>接著將SupplierAService服務註冊到WebApplicationBuilder，註冊完之後DI容器便會知道ISupplier對應的實作是SupplierAService，當需要使用到ISupplier時便會幫我們找到SupplierAService，new出物件之後幫我們丟到高階容器中注入，超級方便！！</p>\n<pre><code class=\"language-csharp\">public static void Main(string[] args){\n    var builder = WebApplication.CreateBuilder(args);\n    ...\n    builder.Services.AddTransient&lt;ISupplier,SupplierAService&gt;();\n    ...\n    var app = builder.Build();\n}\n</code></pre>\n<p>例如當TeaShopController有要用到ISupplier服務時，只需要在建構式傳入ISupplier即可使用</p>\n<pre><code class=\"language-csharp\">public class TeaShopController{\n    private ISupplier _supplier;\n    \n    public TeaShopController(ISupplier supplier){\n        _supplier = supplier;\n    }\n    \n    public int GetTea(){\n        \n        //從供應商購買600g的茶葉\n        int tea = _supplier.buy(600);\n        \n        //取得茶葉並回傳\n        return tea;\n    }  \n}\n\n</code></pre>\n<h6 id=\"%E5%8F%83%E8%80%83%E8%B3%87%E6%96%99\">參考資料</h6>\n<ul>\n<li><a href=\"https://igouist.github.io/post/2021/11/newbie-6-dependency-injection/\">菜雞新訓記 (6): 使用 依賴注入 (Dependency Injection) 來解除強耦合吧</a></li>\n<li><a href=\"https://old-oomusou.goodjack.tw/netcore/di/\">如何在 .NET Core 使用 DI ?</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=Hhpq7oYcpGE\">Dependency Injection in .NET Core (.NET 6)</a></li>\n<li><a href=\"https://medium.com/wenchin-rolls-around/%E6%B7%BA%E5%85%A5%E6%B7%BA%E5%87%BA-dependency-injection-ea672ba033ca\">淺入淺出 Dependency Injection</a></li>\n<li><a href=\"https://learn.microsoft.com/zh-tw/dotnet/core/extensions/dependency-injection\">.NET 相依性插入</a></li>\n</ul>\n<!--kg-card-end: markdown-->","comment_id":"64dbb5f35f1c820001e0a416","plaintext":"依賴注入\n\n\n\n為什麼要使用注入\n\n\n為了把低階模組送到高階模組的內使用\n\n\n\n為什麼要把低階模組往高階模組送\n\n\n為了不直接在高階模組內建立低階模組物件\n\n\n\n為什麼不直接在高階模組中建立物件\n\n\n在高階模組中直接針對低階模組進行實作會產生高耦合，高度依賴低階模組，當想抽換低階模組、低階模組常常變動或是低階模組的設計改變時，會影響到高階模組。應統一由控制反轉中心建立物件，將物件送到高階模組內進行使用\n\n\n\n為什麼是高階模組定義需求放在Interface內\n\n\n高階模組依賴低階模組，當低階模組異動時高階模組會受影響，高階模組相對弱勢，故使用高階模組的需求定義介面的內容。\n\n另外以常理來看，假設我們建立一個瀏覽清單服務，會需要用到登入功能及列表功能，我們是先知道我們要什麼功能，定義好介面後再由低階模組實作，而不是實作好登入功能及列表功能等低階模組後，我們才想說來建立一個瀏覽清單服務。\n\n從不同角度來看都應該由高階模組定義介面內的方法。\n\n\n\n控制反轉及依賴注入\n\n\n以飲料店來舉例，假設我今天開了一間格雷伯爵奶茶專賣店，我向食品材料行進貨茶葉\n\n\npublic class TeaShop{\n    public int GetTea(){\n        //建立一個供應商物件\n        SupplierA supplierA = new SupplierA();\n        \n        //從供應商購買600g的茶葉\n        int tea = supplierA.buy(600);\n        \n        //取得茶葉並回傳\n        return tea;\n    }\n}\n\n\n\n目前我把SupplierA寫死在飲料店裡的GetTea方法裡，TeaShop高度依賴於SupplierA。\n\n開店一陣子後我覺得SupplierA提供的茶有怪味，想換成從SupplierB叫貨\n\n\npublic class TeaShop{\n    public int GetTea(){\n        //建立一個供應商物件\n        SupplierB supplierB = new SupplierB();\n        \n        //從供應商購買600g的茶葉\n        int tea = supplierB.buy(600);\n        \n        //取得茶葉並回傳\n        return tea;\n    }\n}\n\n\n\n如果供應商一直換，我的程式豈不是要一直改？\n\n幸好這個問題有解決的辦法，我們把SupplierA和SupplierB抽象成Supplier就皆大歡喜啦\n\n\npublic interface ISupplier{\n    int buy();\n}\n\npublic class SupplierA : ISupplier{\n    public int buy();\n}\n\npublic class TeaShop{\n    public int GetTea(){\n        //建立一個供應商物件\n        ISupplier supplier = new SupplierA();\n        \n        //從供應商購買600g的茶葉\n        int tea = supplier.buy(600);\n        \n        //取得茶葉並回傳\n        return tea;\n    }\n}\n\n\n\n這顯然沒有解決我們的問題，當我要把SupplierA換成SupplierB時還是會更改到程式。\n\n如果我讓GetTea只關心要跟廠商進貨，而不關心要跟哪間進貨，把這個煩惱交給別人好像問題就解決了\n\n\npublic interface ISupplier{\n    int buy();\n}\n\npublic class SupplierA : ISupplier{\n    public int buy();\n}\n\npublic class TeaShop{\n    \n    private ISupplier _supplier;\n    \n    public TeaShop(ISupplier supplier){\n        _supplier = supplier;\n    }\n    \n    public int GetTea(){\n        \n        //從供應商購買600g的茶葉\n        int tea = _supplier.buy(600);\n        \n        //取得茶葉並回傳\n        return tea;\n    }\n}\n\n\n\n這就是大家俗稱的控制反轉 (Inversion of Control, IoC)，原本高階依賴於低階（TeaShop依賴於SupplierA或SupplierB），變成高階被動接收低階模組（TeaShop被動接收被傳入的supplier）。\n\n原本是高階模組直接建立低階模組，經過控制反轉之後變成由控制反轉中心去建立低階模組，並傳給高階模組使用。\n\n\n低階模組的物件要能夠被傳入高階模組就稱為依賴注入，通常會在高階模組中使用兩者依賴的介面宣告一個變數（使用ISupplier宣告_supplier變數用於存放低階模組物件），使用建構子將該物件傳入並指定給該變數，供高階模組使用。\n\n\n要用哪個廠商的問題是解決了，但也還沒解決，我們只是把問題丟給別人了，這時該由誰來建立物件傳遞物件呢？我們這時就會需要「控制反轉中心」。\n\n\n\n控制反轉中心\n\n\n控制反轉中心就是建立所有物件及傳遞物件的根，他會集結所有實體分配給各個物件。\n\n\n\nASP.Net Core的依賴注入\n\n\n在ASP.NET中使用依賴注入的方法如下\n\n首先，在專案中加入services資料夾，在資料夾建立SupplierAService.cs\n\n\npublic class SupplierAService{\n    public int buy(int gram){\n        return gram;\n    }\n}\n\n\n\n接著將SupplierAService服務註冊到WebApplicationBuilder，註冊完之後DI容器便會知道ISupplier對應的實作是SupplierAService，當需要使用到ISupplier時便會幫我們找到SupplierAService，new出物件之後幫我們丟到高階容器中注入，超級方便！！\n\n\npublic static void Main(string[] args){\n    var builder = WebApplication.CreateBuilder(args);\n    ...\n    builder.Services.AddTransient<ISupplier,SupplierAService>();\n    ...\n    var app = builder.Build();\n}\n\n\n\n例如當TeaShopController有要用到ISupplier服務時，只需要在建構式傳入ISupplier即可使用\n\n\npublic class TeaShopController{\n    private ISupplier _supplier;\n    \n    public TeaShopController(ISupplier supplier){\n        _supplier = supplier;\n    }\n    \n    public int GetTea(){\n        \n        //從供應商購買600g的茶葉\n        int tea = _supplier.buy(600);\n        \n        //取得茶葉並回傳\n        return tea;\n    }  \n}\n\n\n\n\n參考資料\n\n\n * 菜雞新訓記 (6): 使用 依賴注入 (Dependency Injection) 來解除強耦合吧\n * 如何在 .NET Core 使用 DI ?\n * Dependency Injection in .NET Core (.NET 6)\n * 淺入淺出 Dependency Injection\n * .NET 相依性插入\n","feature_image":"__GHOST_URL__/content/images/2023/08/shapelined-_JBKdviweXI-unsplash.jpg","featured":0,"type":"post","status":"published","locale":null,"visibility":"public","email_recipient_filter":"all","created_at":"2023-08-15 17:29:23","created_by":"1","updated_at":"2023-08-16 13:58:43","updated_by":"1","published_at":"2023-08-15 17:32:39","published_by":"1","custom_excerpt":"在高階模組中直接針對低階模組進行實作會產生高耦合，高度依賴低階模組，當想抽換低階模組、低階模組常常變動或是低階模組的設計改變時，會影響到高階模組。應統一由控制反轉中心建立物件，將物件送到高階模組內進行使用","codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null,"newsletter_id":null},{"id":"64de4be0f1c6660001711fc3","uuid":"341ccd21-c963-4f86-80e0-ae8f24dc0cc9","title":"HTTP header Content-Disposition","slug":"http-header-content-disposition","mobiledoc":"{\"version\":\"0.3.1\",\"atoms\":[],\"cards\":[[\"markdown\",{\"markdown\":\"Content-Disposition包含兩種類型，分別是inline 和 attachment，用於指定下載的行為\\n\\n### inline\\n使用inline會直接將檔案顯示在瀏覽器中，預設行為也是inline\\n\\n```\\nContent-Disposition: inline\\n```\\n\\n### attachment\\n若將Content-Disposition設為attachment會彈出視窗讓使用者下載檔案\\n\\nContent-Disposition除了指定顯示行為外，還可以指定預設下載名稱，使用filename可以指定檔案名稱，例如：\\n\\n```\\nContent-Disposition: attachment; filename=test.zip\\n```\\n\\n使用此Header便可以讓使用者端跳出另存視窗，並在預設檔名中顯示filename的字串\\n\\n###### 參考資料\\n- [header中Content-Disposition的作用与使用方法](https://www.cnblogs.com/Lambquan/p/12980088.html)\\n- [Day20-內容要如何處置-Content-Disposition](https://ithelp.ithome.com.tw/articles/10186863)\\n- [Content-Disposition](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Disposition)\"}]],\"markups\":[],\"sections\":[[10,0],[1,\"p\",[]]],\"ghostVersion\":\"4.0\"}","lexical":null,"html":"<!--kg-card-begin: markdown--><p>Content-Disposition包含兩種類型，分別是inline 和 attachment，用於指定下載的行為</p>\n<h3 id=\"inline\">inline</h3>\n<p>使用inline會直接將檔案顯示在瀏覽器中，預設行為也是inline</p>\n<pre><code>Content-Disposition: inline\n</code></pre>\n<h3 id=\"attachment\">attachment</h3>\n<p>若將Content-Disposition設為attachment會彈出視窗讓使用者下載檔案</p>\n<p>Content-Disposition除了指定顯示行為外，還可以指定預設下載名稱，使用filename可以指定檔案名稱，例如：</p>\n<pre><code>Content-Disposition: attachment; filename=test.zip\n</code></pre>\n<p>使用此Header便可以讓使用者端跳出另存視窗，並在預設檔名中顯示filename的字串</p>\n<h6 id=\"%E5%8F%83%E8%80%83%E8%B3%87%E6%96%99\">參考資料</h6>\n<ul>\n<li><a href=\"https://www.cnblogs.com/Lambquan/p/12980088.html\">header中Content-Disposition的作用与使用方法</a></li>\n<li><a href=\"https://ithelp.ithome.com.tw/articles/10186863\">Day20-內容要如何處置-Content-Disposition</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Disposition\">Content-Disposition</a></li>\n</ul>\n<!--kg-card-end: markdown-->","comment_id":"64de4be0f1c6660001711fc3","plaintext":"Content-Disposition包含兩種類型，分別是inline 和 attachment，用於指定下載的行為\n\n\n\ninline\n\n\n使用inline會直接將檔案顯示在瀏覽器中，預設行為也是inline\n\n\nContent-Disposition: inline\n\n\n\n\nattachment\n\n\n若將Content-Disposition設為attachment會彈出視窗讓使用者下載檔案\n\n\nContent-Disposition除了指定顯示行為外，還可以指定預設下載名稱，使用filename可以指定檔案名稱，例如：\n\n\nContent-Disposition: attachment; filename=test.zip\n\n\n\n使用此Header便可以讓使用者端跳出另存視窗，並在預設檔名中顯示filename的字串\n\n\n參考資料\n\n\n * header中Content-Disposition的作用与使用方法\n * Day20-內容要如何處置-Content-Disposition\n * Content-Disposition\n","feature_image":"__GHOST_URL__/content/images/2023/08/communication-4871245.jpg","featured":0,"type":"post","status":"published","locale":null,"visibility":"public","email_recipient_filter":"all","created_at":"2023-08-17 16:33:36","created_by":"1","updated_at":"2023-08-17 16:37:55","updated_by":"1","published_at":"2023-08-17 16:37:55","published_by":"1","custom_excerpt":"Content-Disposition包含兩種類型，分別是inline 和 attachment，用於指定下載的行為","codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null,"newsletter_id":null},{"id":"64e7a2daf1c6660001711fd6","uuid":"c3a1a984-475e-4bb2-9a37-f7af95258eac","title":"Model Binding in ASP.NET Core","slug":"model-binding-in-asp-net-core","mobiledoc":"{\"version\":\"0.3.1\",\"atoms\":[],\"cards\":[[\"markdown\",{\"markdown\":\"Controller會處理來自用戶端的HTTP Request，請求中會有一些資訊來往，這些資料會需要經過型別轉換、檢查必填、最大長度及正確性等步驟後我們才能使用，若手動處理這些步驟將會非常繁瑣。\\nASP.NET提供Model Binding的功能，可以處理來自使用者請求中的資料，將其綁定到指定型態的資料上，省去繁複的處理程序並提高正確性。\\n\\n\\nModel Binding可以將HTTP requests的資料轉為指定的資料型態\\n- 轉換多個來源的資料，例如route data、form fields或query strings等\\n- 將字串轉為.NET的類別\\n\\n## ApiController屬性\\n在開始介紹綁定前先介紹ApiController這個屬性\\n\\n若在Controller中套用[ApiController]這個屬性後會帶來以下影響，其中有一個與綁定有關\\n- 必須要使用屬性路由(Attribute Routing)\\n- 自動回應HTTP 400\\n- 自動套用Model Binding的預設規則，預設規則包含：\\n    - 若HTTP是Request複雜模型，則預設會自動套用[FromBody]屬性\\n    - 若HTTP是Request簡單模型，則預設會自動套用[FromQuery]屬性\\n    - 若參數包含IFormFile或IFormFileCollection會自動推斷content-type為`multipart/form-data`，並自動套用[FromForm]屬性\\n\\n## 預設綁定來源及順序\\n1. Form fields\\n2. Request body\\n3. Route data\\n4. Query string parameters\\n5. Uploaded files（僅會綁定到IFormFile或IEnumerable\\\\<IFormFile\\\\>類別的實體）\\n\\n\\n## 指定綁定來源\\n- [FromBody]：Requet body取值並套用在複雜模型上\\n- [FromRoute]：從路由資料取值\\n- [FromQuery]：從Query string中取值\\n- [FromHeader]：從HTTP標頭取得值\\n- [FromForm]：從Request body取值，只會套用在IFormFile 或 IFormFileCollection 上\\n\\n## 綁定方式\\n\\n### 綁定至參數\\n```csharp\\npublic Task<IActionResult> Create([FromBody]CreateTodoRequestModel request)\\n```\\n```csharp\\npublic class CreateTodoRequestModel\\n{\\n    public string Text { get; set; }\\n}\\n```\\n\\n### 綁定至類別屬性\\n```csharp\\npublic Task<IActionResult> Create(CreateTodoRequestModel request)\\n```\\n```csharp\\npublic class CreateTodoRequestModel\\n{\\n    [FromBody]\\n    public string Text { get; set; }\\n}\\n```\\n\\n\\n###### 參考資料\\n- [ASP.NET Core 中的資料繫結](https://learn.microsoft.com/zh-tw/aspnet/core/mvc/models/model-binding?view=aspnetcore-3.1)\\n- [[Day12] 模型繫結與驗證 - 我與 ASP.NET Core 3 的 30天](https://ithelp.ithome.com.tw/articles/10244545)\\n- [ASP.NET Core Model Binding 死活綁不上 - 1](https://www.gss.com.tw/blog/asp-net-core-model-binding-1)\\n- [ApiController 屬性](https://learn.microsoft.com/zh-tw/aspnet/core/web-api/?view=aspnetcore-3.1#apicontroller-attribute-2)\"}]],\"markups\":[],\"sections\":[[10,0],[1,\"p\",[]]],\"ghostVersion\":\"4.0\"}","lexical":null,"html":"<!--kg-card-begin: markdown--><p>Controller會處理來自用戶端的HTTP Request，請求中會有一些資訊來往，這些資料會需要經過型別轉換、檢查必填、最大長度及正確性等步驟後我們才能使用，若手動處理這些步驟將會非常繁瑣。<br>\nASP.NET提供Model Binding的功能，可以處理來自使用者請求中的資料，將其綁定到指定型態的資料上，省去繁複的處理程序並提高正確性。</p>\n<p>Model Binding可以將HTTP requests的資料轉為指定的資料型態</p>\n<ul>\n<li>轉換多個來源的資料，例如route data、form fields或query strings等</li>\n<li>將字串轉為.NET的類別</li>\n</ul>\n<h2 id=\"apicontroller%E5%B1%AC%E6%80%A7\">ApiController屬性</h2>\n<p>在開始介紹綁定前先介紹ApiController這個屬性</p>\n<p>若在Controller中套用[ApiController]這個屬性後會帶來以下影響，其中有一個與綁定有關</p>\n<ul>\n<li>必須要使用屬性路由(Attribute Routing)</li>\n<li>自動回應HTTP 400</li>\n<li>自動套用Model Binding的預設規則，預設規則包含：\n<ul>\n<li>若HTTP是Request複雜模型，則預設會自動套用[FromBody]屬性</li>\n<li>若HTTP是Request簡單模型，則預設會自動套用[FromQuery]屬性</li>\n<li>若參數包含IFormFile或IFormFileCollection會自動推斷content-type為<code>multipart/form-data</code>，並自動套用[FromForm]屬性</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"%E9%A0%90%E8%A8%AD%E7%B6%81%E5%AE%9A%E4%BE%86%E6%BA%90%E5%8F%8A%E9%A0%86%E5%BA%8F\">預設綁定來源及順序</h2>\n<ol>\n<li>Form fields</li>\n<li>Request body</li>\n<li>Route data</li>\n<li>Query string parameters</li>\n<li>Uploaded files（僅會綁定到IFormFile或IEnumerable&lt;IFormFile&gt;類別的實體）</li>\n</ol>\n<h2 id=\"%E6%8C%87%E5%AE%9A%E7%B6%81%E5%AE%9A%E4%BE%86%E6%BA%90\">指定綁定來源</h2>\n<ul>\n<li>[FromBody]：Requet body取值並套用在複雜模型上</li>\n<li>[FromRoute]：從路由資料取值</li>\n<li>[FromQuery]：從Query string中取值</li>\n<li>[FromHeader]：從HTTP標頭取得值</li>\n<li>[FromForm]：從Request body取值，只會套用在IFormFile 或 IFormFileCollection 上</li>\n</ul>\n<h2 id=\"%E7%B6%81%E5%AE%9A%E6%96%B9%E5%BC%8F\">綁定方式</h2>\n<h3 id=\"%E7%B6%81%E5%AE%9A%E8%87%B3%E5%8F%83%E6%95%B8\">綁定至參數</h3>\n<pre><code class=\"language-csharp\">public Task&lt;IActionResult&gt; Create([FromBody]CreateTodoRequestModel request)\n</code></pre>\n<pre><code class=\"language-csharp\">public class CreateTodoRequestModel\n{\n    public string Text { get; set; }\n}\n</code></pre>\n<h3 id=\"%E7%B6%81%E5%AE%9A%E8%87%B3%E9%A1%9E%E5%88%A5%E5%B1%AC%E6%80%A7\">綁定至類別屬性</h3>\n<pre><code class=\"language-csharp\">public Task&lt;IActionResult&gt; Create(CreateTodoRequestModel request)\n</code></pre>\n<pre><code class=\"language-csharp\">public class CreateTodoRequestModel\n{\n    [FromBody]\n    public string Text { get; set; }\n}\n</code></pre>\n<h6 id=\"%E5%8F%83%E8%80%83%E8%B3%87%E6%96%99\">參考資料</h6>\n<ul>\n<li><a href=\"https://learn.microsoft.com/zh-tw/aspnet/core/mvc/models/model-binding?view=aspnetcore-3.1\">ASP.NET Core 中的資料繫結</a></li>\n<li><a href=\"https://ithelp.ithome.com.tw/articles/10244545\">[Day12] 模型繫結與驗證 - 我與 ASP.NET Core 3 的 30天</a></li>\n<li><a href=\"https://www.gss.com.tw/blog/asp-net-core-model-binding-1\">ASP.NET Core Model Binding 死活綁不上 - 1</a></li>\n<li><a href=\"https://learn.microsoft.com/zh-tw/aspnet/core/web-api/?view=aspnetcore-3.1#apicontroller-attribute-2\">ApiController 屬性</a></li>\n</ul>\n<!--kg-card-end: markdown-->","comment_id":"64e7a2daf1c6660001711fd6","plaintext":"Controller會處理來自用戶端的HTTP Request，請求中會有一些資訊來往，這些資料會需要經過型別轉換、檢查必填、最大長度及正確性等步驟後我們才能使用，若手動處理這些步驟將會非常繁瑣。\n\nASP.NET提供Model Binding的功能，可以處理來自使用者請求中的資料，將其綁定到指定型態的資料上，省去繁複的處理程序並提高正確性。\n\n\nModel Binding可以將HTTP requests的資料轉為指定的資料型態\n\n\n * 轉換多個來源的資料，例如route data、form fields或query strings等\n * 將字串轉為.NET的類別\n\n\n\nApiController屬性\n\n\n在開始介紹綁定前先介紹ApiController這個屬性\n\n\n若在Controller中套用[ApiController]這個屬性後會帶來以下影響，其中有一個與綁定有關\n\n\n * 必須要使用屬性路由(Attribute Routing)\n * 自動回應HTTP 400\n * 自動套用Model Binding的預設規則，預設規則包含：\n   \n   * 若HTTP是Request複雜模型，則預設會自動套用[FromBody]屬性\n   * 若HTTP是Request簡單模型，則預設會自動套用[FromQuery]屬性\n   * 若參數包含IFormFile或IFormFileCollection會自動推斷content-type為multipart/form-data，並自動套用[FromForm]屬性\n   \n\n\n\n預設綁定來源及順序\n\n\n 1. Form fields\n 2. Request body\n 3. Route data\n 4. Query string parameters\n 5. Uploaded files（僅會綁定到IFormFile或IEnumerable<IFormFile>類別的實體）\n\n\n\n指定綁定來源\n\n\n * [FromBody]：Requet body取值並套用在複雜模型上\n * [FromRoute]：從路由資料取值\n * [FromQuery]：從Query string中取值\n * [FromHeader]：從HTTP標頭取得值\n * [FromForm]：從Request body取值，只會套用在IFormFile 或 IFormFileCollection 上\n\n\n\n綁定方式\n\n\n\n綁定至參數\n\n\npublic Task<IActionResult> Create([FromBody]CreateTodoRequestModel request)\n\n\n\npublic class CreateTodoRequestModel\n{\n    public string Text { get; set; }\n}\n\n\n\n\n綁定至類別屬性\n\n\npublic Task<IActionResult> Create(CreateTodoRequestModel request)\n\n\n\npublic class CreateTodoRequestModel\n{\n    [FromBody]\n    public string Text { get; set; }\n}\n\n\n\n參考資料\n\n\n * ASP.NET Core 中的資料繫結\n * [Day12] 模型繫結與驗證 - 我與 ASP.NET Core 3 的 30天\n * ASP.NET Core Model Binding 死活綁不上 - 1\n * ApiController 屬性\n","feature_image":"__GHOST_URL__/content/images/2023/08/vs2012_gray_imprint.png","featured":0,"type":"post","status":"published","locale":null,"visibility":"public","email_recipient_filter":"all","created_at":"2023-08-24 18:35:06","created_by":"1","updated_at":"2023-08-24 18:48:01","updated_by":"1","published_at":"2023-08-24 18:38:03","published_by":"1","custom_excerpt":"Controller會處理來自用戶端的HTTP Request，請求中會有一些資訊來往，這些資料會需要經過型別轉換、檢查必填、最大長度及正確性等步驟後我們才能使用，若手動處理這些步驟將會非常繁瑣。\nASP.NET提供Model Binding的功能，可以處理來自使用者請求中的資料，將其綁定到指定型態的資料上，省去繁複的處理程序並提高正確性。","codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null,"newsletter_id":null},{"id":"64ea48dd4feca3000178b923","uuid":"ea0f80f8-8d23-44e0-8ebd-112f9872bf9e","title":"Validation attributes in ASP.NET Core","slug":"validation-attributes-in-asp-net-core","mobiledoc":"{\"version\":\"0.3.1\",\"atoms\":[],\"cards\":[[\"markdown\",{\"markdown\":\"ASP.NET Core 裡的 Validation attributes 用於設定欄位的規則，當收到 HTTP 請求時依照規則檢查請求的資料是否符合 Validation attributes 設定的規則，以此過濾掉不符合規則的請求。\\n\\n## 自動回覆錯誤訊息\\n在 Web API controllers 中加入`[ApiController]`屬性可以讓我們免去設定`ModelState.IsValid`的步驟\\n\\n```csharp\\nusing Microsoft.AspNetCore.Mvc;\\n\\nnamespace todoAPP.Controllers\\n{\\n    [ApiController]\\n    public class TodoListController : Controller\\n    {\\n        ...\\n    }\\n}\\n```\\n\\n## 內建的Validation attributes\\n`[ValidateNever]`：不驗證該類別屬性\\n`[CreditCard]`：驗證是否符合信用卡卡號規則\\n`[Compare]`：驗證兩個欄位是否相符\\n\\n```csharp\\nusing System.ComponentModel.DataAnnotations;\\n\\npublic class RegisterRequestModel\\n{\\n    public string Password { get; set; }\\n\\n    //與Password欄位比對，若不相符則回覆錯誤\\n    [Compare(\\\"Password\\\")]\\n    public string ConfirmPassword { get; set; }\\n}\\n```\\n\\n`[EmailAddress]`：驗證是否符合E-mail格式\\n`[Phone]`：驗證是否符合電話號碼格式\\n`[Range]`: 驗證是否在數值區間內\\n`[RegularExpression]`: 驗證是否符合正規表達式\\n`[Required]`: 驗證欄位有值且不是null\\n`[StringLength]`: 驗證字串長度不超過指定字數\\n`[MaxLength]`：驗證字串長度不可超過指定字數\\n\\n```csharp\\nusing System.ComponentModel.DataAnnotations;\\n\\npublic class RegisterRequestModel\\n{\\n    [MaxLength(50)]\\n    public string Username { get; set; }\\n}\\n```\\n\\n`[Url]`: 驗證是否符合URL格式\\n`[Remote]`: 從client呼叫server的方法驗證使用者輸入\\n\\n\\n更多驗證屬性請參考微軟的[DataAnnotations](https://learn.microsoft.com/en-us/dotnet/api/system.componentmodel.dataannotations?view=net-6.0)\\n\\n###### 參考資料\\n\\n- [Model validation in ASP.NET Core MVC and Razor Pages](https://learn.microsoft.com/en-us/aspnet/core/mvc/models/validation?view=aspnetcore-6.0)\\n- [ApiController attribute](https://learn.microsoft.com/en-us/aspnet/core/web-api/?view=aspnetcore-6.0#apicontroller-attribute-1)\\n- [System.ComponentModel.DataAnnotations Namespace](https://learn.microsoft.com/en-us/dotnet/api/system.componentmodel.dataannotations?view=net-6.0)\"}]],\"markups\":[],\"sections\":[[10,0],[1,\"p\",[]]],\"ghostVersion\":\"4.0\"}","lexical":null,"html":"<!--kg-card-begin: markdown--><p>ASP.NET Core 裡的 Validation attributes 用於設定欄位的規則，當收到 HTTP 請求時依照規則檢查請求的資料是否符合 Validation attributes 設定的規則，以此過濾掉不符合規則的請求。</p>\n<h2 id=\"%E8%87%AA%E5%8B%95%E5%9B%9E%E8%A6%86%E9%8C%AF%E8%AA%A4%E8%A8%8A%E6%81%AF\">自動回覆錯誤訊息</h2>\n<p>在 Web API controllers 中加入<code>[ApiController]</code>屬性可以讓我們免去設定<code>ModelState.IsValid</code>的步驟</p>\n<pre><code class=\"language-csharp\">using Microsoft.AspNetCore.Mvc;\n\nnamespace todoAPP.Controllers\n{\n    [ApiController]\n    public class TodoListController : Controller\n    {\n        ...\n    }\n}\n</code></pre>\n<h2 id=\"%E5%85%A7%E5%BB%BA%E7%9A%84validation-attributes\">內建的Validation attributes</h2>\n<p><code>[ValidateNever]</code>：不驗證該類別屬性<br>\n<code>[CreditCard]</code>：驗證是否符合信用卡卡號規則<br>\n<code>[Compare]</code>：驗證兩個欄位是否相符</p>\n<pre><code class=\"language-csharp\">using System.ComponentModel.DataAnnotations;\n\npublic class RegisterRequestModel\n{\n    public string Password { get; set; }\n\n    //與Password欄位比對，若不相符則回覆錯誤\n    [Compare(&quot;Password&quot;)]\n    public string ConfirmPassword { get; set; }\n}\n</code></pre>\n<p><code>[EmailAddress]</code>：驗證是否符合E-mail格式<br>\n<code>[Phone]</code>：驗證是否符合電話號碼格式<br>\n<code>[Range]</code>: 驗證是否在數值區間內<br>\n<code>[RegularExpression]</code>: 驗證是否符合正規表達式<br>\n<code>[Required]</code>: 驗證欄位有值且不是null<br>\n<code>[StringLength]</code>: 驗證字串長度不超過指定字數<br>\n<code>[MaxLength]</code>：驗證字串長度不可超過指定字數</p>\n<pre><code class=\"language-csharp\">using System.ComponentModel.DataAnnotations;\n\npublic class RegisterRequestModel\n{\n    [MaxLength(50)]\n    public string Username { get; set; }\n}\n</code></pre>\n<p><code>[Url]</code>: 驗證是否符合URL格式<br>\n<code>[Remote]</code>: 從client呼叫server的方法驗證使用者輸入</p>\n<p>更多驗證屬性請參考微軟的<a href=\"https://learn.microsoft.com/en-us/dotnet/api/system.componentmodel.dataannotations?view=net-6.0\">DataAnnotations</a></p>\n<h6 id=\"%E5%8F%83%E8%80%83%E8%B3%87%E6%96%99\">參考資料</h6>\n<ul>\n<li><a href=\"https://learn.microsoft.com/en-us/aspnet/core/mvc/models/validation?view=aspnetcore-6.0\">Model validation in ASP.NET Core MVC and Razor Pages</a></li>\n<li><a href=\"https://learn.microsoft.com/en-us/aspnet/core/web-api/?view=aspnetcore-6.0#apicontroller-attribute-1\">ApiController attribute</a></li>\n<li><a href=\"https://learn.microsoft.com/en-us/dotnet/api/system.componentmodel.dataannotations?view=net-6.0\">System.ComponentModel.DataAnnotations Namespace</a></li>\n</ul>\n<!--kg-card-end: markdown-->","comment_id":"64ea48dd4feca3000178b923","plaintext":"ASP.NET Core 裡的 Validation attributes 用於設定欄位的規則，當收到 HTTP 請求時依照規則檢查請求的資料是否符合 Validation attributes 設定的規則，以此過濾掉不符合規則的請求。\n\n\n\n自動回覆錯誤訊息\n\n\n在 Web API controllers 中加入[ApiController]屬性可以讓我們免去設定ModelState.IsValid的步驟\n\n\nusing Microsoft.AspNetCore.Mvc;\n\nnamespace todoAPP.Controllers\n{\n    [ApiController]\n    public class TodoListController : Controller\n    {\n        ...\n    }\n}\n\n\n\n\n內建的Validation attributes\n\n\n[ValidateNever]：不驗證該類別屬性\n\n[CreditCard]：驗證是否符合信用卡卡號規則\n\n[Compare]：驗證兩個欄位是否相符\n\n\nusing System.ComponentModel.DataAnnotations;\n\npublic class RegisterRequestModel\n{\n    public string Password { get; set; }\n\n    //與Password欄位比對，若不相符則回覆錯誤\n    [Compare(\"Password\")]\n    public string ConfirmPassword { get; set; }\n}\n\n\n\n[EmailAddress]：驗證是否符合E-mail格式\n\n[Phone]：驗證是否符合電話號碼格式\n\n[Range]: 驗證是否在數值區間內\n\n[RegularExpression]: 驗證是否符合正規表達式\n\n[Required]: 驗證欄位有值且不是null\n\n[StringLength]: 驗證字串長度不超過指定字數\n\n[MaxLength]：驗證字串長度不可超過指定字數\n\n\nusing System.ComponentModel.DataAnnotations;\n\npublic class RegisterRequestModel\n{\n    [MaxLength(50)]\n    public string Username { get; set; }\n}\n\n\n\n[Url]: 驗證是否符合URL格式\n\n[Remote]: 從client呼叫server的方法驗證使用者輸入\n\n\n更多驗證屬性請參考微軟的DataAnnotations\n\n\n參考資料\n\n\n * Model validation in ASP.NET Core MVC and Razor Pages\n * ApiController attribute\n * System.ComponentModel.DataAnnotations Namespace\n","feature_image":"__GHOST_URL__/content/images/2023/08/jason-dent-3wPJxh-piRw-unsplash-1.jpg","featured":0,"type":"post","status":"published","locale":null,"visibility":"public","email_recipient_filter":"all","created_at":"2023-08-26 18:47:57","created_by":"1","updated_at":"2023-08-26 18:51:08","updated_by":"1","published_at":"2023-08-26 18:51:08","published_by":"1","custom_excerpt":"ASP.NET Core 裡的 Validation attributes 用於設定欄位的規則，當收到 HTTP 請求時依照規則檢查請求的資料是否符合 Validation attributes 設定的規則，以此過濾掉不符合規則的請求。","codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null,"newsletter_id":null}],"posts_meta":[{"id":"635a816a57207246b927a8bf","post_id":"635a816a57207246b927a8a1","og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"meta_title":"[Ghost]使用Ghost和GitHub Pages建立網頁","meta_description":"一直以來都有個困擾，就是查個程式寫法或是軟體操作方法每次都很快就忘記，所以想寫個Blog紀錄自己的手順，先前曾想過直接寫個網頁PUSH到GitHub上，但實在有點累( ˘･з･)，偶然又看到有個很喜歡的排版是用Ghost建立的，因此使用Ghost+GitHub的形式建立部落格","email_subject":null,"frontmatter":null,"feature_image_alt":null,"feature_image_caption":null,"email_only":0},{"id":"635a816a57207246b927a8c1","post_id":"635a816a57207246b927a8a2","og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"meta_title":"計算Wildcard Mask","meta_description":"在設置ACL(Access Control List)時，會用到Wildcard Mask標示在範圍內的IP位址，這篇筆記記錄如何使用wildcard mask計算IP範圍的起點及終點","email_subject":null,"frontmatter":null,"feature_image_alt":null,"feature_image_caption":null,"email_only":0},{"id":"635a816a57207246b927a8c4","post_id":"635a816a57207246b927a8a3","og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"meta_title":"[Golang]Golang函式","meta_description":"Golang基礎 - 函式","email_subject":null,"frontmatter":null,"feature_image_alt":null,"feature_image_caption":null,"email_only":0},{"id":"635a816a57207246b927a8c7","post_id":"635a816a57207246b927a8a4","og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"meta_title":"[Golang]從外部中斷Goroutine","meta_description":"想要從外部終止一個正在執行中或無限迴圈的goroutine，必須使用channel將中斷訊息傳入使之中斷","email_subject":null,"frontmatter":null,"feature_image_alt":null,"feature_image_caption":null,"email_only":0},{"id":"635a816a57207246b927a8cb","post_id":"635a816a57207246b927a8a5","og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"meta_title":"[Python]使用Python爬蟲抓取網站資料","meta_description":"使用python抓取網站或網頁資料是再方便不過的了，常見的抓取方法包含抓取網站回應的JSON檔，或是直接抓取網頁內容並進行分析，以下紀錄兩種方法該如何實作。","email_subject":null,"frontmatter":null,"feature_image_alt":null,"feature_image_caption":null,"email_only":0},{"id":"635a816a57207246b927a8cd","post_id":"635a816a57207246b927a8a6","og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"meta_title":"記憶體的時脈與頻寬","meta_description":"記憶體的時脈與頻寬","email_subject":null,"frontmatter":null,"feature_image_alt":null,"feature_image_caption":null,"email_only":0},{"id":"635a816a57207246b927a8d1","post_id":"635a816a57207246b927a8a7","og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"meta_title":"[GolangPackage]Excel的讀寫與操作","meta_description":"excelize是一個能夠讀寫excel的package，可讀入或寫入指定位置的資料及更改樣式，適用於批量產生excel檔案及資料處理","email_subject":null,"frontmatter":null,"feature_image_alt":null,"feature_image_caption":null,"email_only":0},{"id":"635a816a57207246b927a8d4","post_id":"635a816a57207246b927a8a8","og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"meta_title":"[Golang]channel簡介","meta_description":"在golang裡可使用channel在多個執行緒與主程式之間傳送資料，channel可設定不同型態的buffer，並指定緩衝區大小","email_subject":null,"frontmatter":null,"feature_image_alt":null,"feature_image_caption":null,"email_only":0},{"id":"635a816a57207246b927a8d8","post_id":"635a816a57207246b927a8a9","og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"meta_title":"[Clover]Cannot install without ensuring the file system is read-write","meta_description":"在開啟Clover時會跳出\"Cannot install without ensuring the file system is read-write\"錯誤訊息","email_subject":null,"frontmatter":null,"feature_image_alt":null,"feature_image_caption":null,"email_only":0},{"id":"635a816a57207246b927a8db","post_id":"635a816a57207246b927a8aa","og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"meta_title":"[C++]陣列與指標的位址","meta_description":"C++陣列與指標的位址","email_subject":null,"frontmatter":null,"feature_image_alt":null,"feature_image_caption":null,"email_only":0},{"id":"635a816a57207246b927a8df","post_id":"635a816a57207246b927a8ab","og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"meta_title":"[GolangPackage]指定golang執行檔檔案屬性","meta_description":"GoVersionInfo package可在生成執行檔時指定執行檔縮圖及檔案屬性，檔案描述、檔案類型、版本等參數皆可指定","email_subject":null,"frontmatter":null,"feature_image_alt":null,"feature_image_caption":null,"email_only":0},{"id":"635a816a57207246b927a8e3","post_id":"635a816a57207246b927a8ad","og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"meta_title":"[Qt]Qt的鍵盤與滑鼠點擊事件","meta_description":"Qt的鍵盤與滑鼠點擊事件","email_subject":null,"frontmatter":null,"feature_image_alt":null,"feature_image_caption":null,"email_only":0},{"id":"635a816a57207246b927a8e7","post_id":"635a816a57207246b927a8ae","og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"meta_title":"[GolangPackage] 使用lnx/walk建立圖形化介面","meta_description":"golang 普遍使用CLI作為使用者介面，但因為需要做一個程式給不常使用指令的人使用，所以使用lxn/walk建立圖形化使用者介面，lxn/walk可以滿足視窗的大部分需求，適用於建立一些基本的圖形化介面","email_subject":null,"frontmatter":null,"feature_image_alt":null,"feature_image_caption":null,"email_only":0},{"id":"635a816a57207246b927a8ea","post_id":"635a816a57207246b927a8af","og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"meta_title":"[Golang]使用筆畫排序中文字","meta_description":"有次嘗試要使用筆劃排序中文姓名時，直接使用sort包進行排序，但發現結果並不是照著筆劃排序，查了點資料發現原來和UTF-8、Big5兩種編碼有極大的關係","email_subject":null,"frontmatter":null,"feature_image_alt":null,"feature_image_caption":null,"email_only":0},{"id":"635a816b57207246b927a8ef","post_id":"635a816a57207246b927a8b0","og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"meta_title":"[C#]使用Npgsql連接到PostgreSQL server","meta_description":null,"email_subject":null,"frontmatter":null,"feature_image_alt":null,"feature_image_caption":null,"email_only":0},{"id":"635a816b57207246b927a8f2","post_id":"635a816a57207246b927a8b1","og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"meta_title":"[Vue]使用Vue CLI建立專案","meta_description":"在之前的課堂裡，我們都是直接開一個html檔案然後把vue寫在裡頭，這次助教介紹了Vue CLI，Vue CLI是一個官方出的工具，可以直接開一個測試用的伺服器，讓開發更方便，並且可以將程式碼打包，方便某些情況下的部屬","email_subject":null,"frontmatter":null,"feature_image_alt":null,"feature_image_caption":null,"email_only":0},{"id":"635a816b57207246b927a8f5","post_id":"635a816a57207246b927a8b2","og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"meta_title":"[Vue]Vuetify安裝與使用","meta_description":"Vuetify是一個Vue的UI框架，有許多精美和現成的組件可讓我們快速進行網頁排版及呈現，由於這篇文章撰寫時vuetify尚未支援Vue3，所以本篇文章以Vue2為例，示範如何將vuetify加入到Vue2專案中","email_subject":null,"frontmatter":null,"feature_image_alt":null,"feature_image_caption":null,"email_only":0},{"id":"635a816b57207246b927a8f8","post_id":"635a816a57207246b927a8b3","og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"meta_title":"[Vue]將Vue-Router加入到專案中","meta_description":"在使用vue時，有時會需要在畫面中切換component，這時vue-router就派上用場啦，vue-router常常被用在single-page application中，這次的期中專題因為要將舊網頁變成single-page app，所以必須先了解如何將vue-router加入到專案中，方便後續使用","email_subject":null,"frontmatter":null,"feature_image_alt":null,"feature_image_caption":null,"email_only":0},{"id":"635a816b57207246b927a8fc","post_id":"635a816a57207246b927a8b5","og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"meta_title":"[MQTT]Mosquitto Server 安裝與啟動","meta_description":"在使用MQTT進行資料傳遞時，會需要一個代理人，也就是MQTT Broker，作為訂閱/發布的橋樑，Mosquitto Server是一個開源的MQTT的Server，本篇筆記紀錄在Windows下如何安裝並開啟MQTT Server","email_subject":null,"frontmatter":null,"feature_image_alt":null,"feature_image_caption":null,"email_only":0},{"id":"635a816b57207246b927a8ff","post_id":"635a816a57207246b927a8b6","og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"meta_title":"[IDE] 在Visual Studio Code中使用MSYS作為終端機","meta_description":"因為需要用到Makefile的緣故，而windows沒有提供相關的功能，所以希望能夠把Visual studio code預設的powershell改為MSYS作為終端機，便於make指令的操作","email_subject":null,"frontmatter":null,"feature_image_alt":null,"feature_image_caption":null,"email_only":0},{"id":"635a816b57207246b927a902","post_id":"635a816a57207246b927a8b7","og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"meta_title":"[ESP8266]ESP-01韌體燒錄","meta_description":"在使用ESP8266有時會遇到兩種情況，原廠出貨的韌體怪怪的導致無法使用AT指令跟ESP8266溝通，或是已經把自己的程式燒進去之後又想重新使用AT指令的功能，這時候就需要重新燒錄韌體，這篇筆記紀錄使用ESP-01作為範例的韌體燒錄及AT指令驗證步驟","email_subject":null,"frontmatter":null,"feature_image_alt":null,"feature_image_caption":null,"email_only":0},{"id":"635a816b57207246b927a906","post_id":"635a816a57207246b927a8b8","og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"meta_title":"[Zsh]更改Ubuntu終端機樣式","meta_description":"近期無意間在網路上發現Bullet Train這個theme，一下子就被燒到了，覺得非常好看，於是決定來將自己的terminal也改成那樣子，提昇~~爽度~~工作效率","email_subject":null,"frontmatter":null,"feature_image_alt":null,"feature_image_caption":null,"email_only":0},{"id":"635a816b57207246b927a909","post_id":"635a816a57207246b927a8b9","og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"meta_title":"[Golang]MySQL Error 1040: Too Many Connections 錯誤處理","meta_description":"前陣子寫了一個golang程式用來上傳資料到MySQL，起初程式運作都非常良好，過了一陣子開始出現代號為1040的Too Many Connections錯誤，我們一起來看看發生了甚麼事。","email_subject":null,"frontmatter":null,"feature_image_alt":null,"feature_image_caption":null,"email_only":0},{"id":"635a816b57207246b927a90c","post_id":"635a816a57207246b927a8ba","og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"meta_title":"[Pattern]REST API 設計規範","meta_description":"REST是一種架構風格，類似設計模式，使用一些原則規範應用程式的設計","email_subject":null,"frontmatter":null,"feature_image_alt":null,"feature_image_caption":null,"email_only":0},{"id":"635a816b57207246b927a910","post_id":"635a816a57207246b927a8bb","og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"meta_title":"[Network]TCP 三方交握","meta_description":"三方交握(Three-Way Handshake)是TCP(Transmission Control Protocol)在傳送資料前的一個儀式，用來確認雙方都有收到訊息並建立連線","email_subject":null,"frontmatter":null,"feature_image_alt":null,"feature_image_caption":null,"email_only":0},{"id":"635a816b57207246b927a913","post_id":"635a816a57207246b927a8bc","og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"meta_title":"[Python]使用Pyinstaller打包Django專案發生\"RuntimeError: Script runserver does not exist.\"錯誤","meta_description":"使用pyinstaller將manage.py打包後會產生manage.exe可執行檔，在執行`manage.exe runserver`指令時發生*RuntimeError: Script runserver does not exist.* 錯誤","email_subject":null,"frontmatter":null,"feature_image_alt":null,"feature_image_caption":null,"email_only":0},{"id":"635a816b57207246b927a916","post_id":"635a816a57207246b927a8bd","og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"meta_title":"[Python]使用Pyinstaller打包Django專案發生ModuleNotFoundError: No module named 'XXX'.錯誤","meta_description":"使用pyinstaller將manage.py打包後會產生manage.exe可執行檔，在執行`manage.exe runserver --noreload`指令時發生*ModuleNotFoundError: No module named 'XXX'.* 錯誤","email_subject":null,"frontmatter":null,"feature_image_alt":null,"feature_image_caption":null,"email_only":0},{"id":"64d5fc85e17ae60001fb7396","post_id":"64d5f976e17ae60001fb7389","og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"meta_title":null,"meta_description":null,"email_subject":null,"frontmatter":null,"feature_image_alt":null,"feature_image_caption":null,"email_only":0},{"id":"64ea48f84feca3000178b92e","post_id":"64ea48dd4feca3000178b923","og_image":null,"og_title":"Validation attributes in ASP.NET Core","og_description":"ASP.NET Core 裡的 Validation attributes 用於設定欄位的規則，當收到 HTTP 請求時依照規則檢查請求的資料是否符合 Validation attributes 設定的規則，以此過濾掉不符合規則的請求。","twitter_image":null,"twitter_title":"Validation attributes in ASP.NET Core","twitter_description":"ASP.NET Core 裡的 Validation attributes 用於設定欄位的規則，當收到 HTTP 請求時依照規則檢查請求的資料是否符合 Validation attributes 設定的規則，以此過濾掉不符合規則的請求。","meta_title":"Validation attributes in ASP.NET Core","meta_description":"ASP.NET Core 裡的 Validation attributes 用於設定欄位的規則，當收到 HTTP 請求時依照規則檢查請求的資料是否符合 Validation attributes 設定的規則，以此過濾掉不符合規則的請求。","email_subject":null,"frontmatter":null,"feature_image_alt":null,"feature_image_caption":"Photo by <a href=\"https://unsplash.com/@jdent?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText\">Jason Dent</a> on <a href=\"https://unsplash.com/photos/3wPJxh-piRw?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText\">Unsplash</a>","email_only":0}],"users":[{"id":"1","name":"Katsuobushi","slug":"katsuobushi","password":"$2a$10$m/ooAol0Wr8at5YsJMu/Wu/VNuYtLgpEl9LxujZNeByprcrFuabSa","email":"vincent87720@yahoo.com.tw","profile_image":"__GHOST_URL__/content/images/2022/10/dog-breeder-round.svg","cover_image":"__GHOST_URL__/content/images/2022/10/INSTAIMG_0049.jpg","bio":null,"website":null,"location":null,"facebook":null,"twitter":null,"accessibility":"{\"nightShift\":false}","status":"active","locale":null,"visibility":"public","meta_title":null,"meta_description":null,"tour":null,"last_seen":"2023-08-26 21:46:05","comment_notifications":1,"free_member_signup_notification":1,"paid_subscription_started_notification":1,"paid_subscription_canceled_notification":0,"created_at":"2022-10-27 12:58:28","created_by":"1","updated_at":"2023-08-26 21:46:05","updated_by":"1","mention_notifications":1,"milestone_notifications":1}],"posts_authors":[{"id":"635a816a57207246b927a8be","post_id":"635a816a57207246b927a8a1","author_id":"1","sort_order":0},{"id":"635a816a57207246b927a8c0","post_id":"635a816a57207246b927a8a2","author_id":"1","sort_order":0},{"id":"635a816a57207246b927a8c3","post_id":"635a816a57207246b927a8a3","author_id":"1","sort_order":0},{"id":"635a816a57207246b927a8c6","post_id":"635a816a57207246b927a8a4","author_id":"1","sort_order":0},{"id":"635a816a57207246b927a8ca","post_id":"635a816a57207246b927a8a5","author_id":"1","sort_order":0},{"id":"635a816a57207246b927a8cc","post_id":"635a816a57207246b927a8a6","author_id":"1","sort_order":0},{"id":"635a816a57207246b927a8d0","post_id":"635a816a57207246b927a8a7","author_id":"1","sort_order":0},{"id":"635a816a57207246b927a8d3","post_id":"635a816a57207246b927a8a8","author_id":"1","sort_order":0},{"id":"635a816a57207246b927a8d7","post_id":"635a816a57207246b927a8a9","author_id":"1","sort_order":0},{"id":"635a816a57207246b927a8da","post_id":"635a816a57207246b927a8aa","author_id":"1","sort_order":0},{"id":"635a816a57207246b927a8de","post_id":"635a816a57207246b927a8ab","author_id":"1","sort_order":0},{"id":"635a816a57207246b927a8e0","post_id":"635a816a57207246b927a8ac","author_id":"1","sort_order":0},{"id":"635a816a57207246b927a8e2","post_id":"635a816a57207246b927a8ad","author_id":"1","sort_order":0},{"id":"635a816a57207246b927a8e6","post_id":"635a816a57207246b927a8ae","author_id":"1","sort_order":0},{"id":"635a816a57207246b927a8e9","post_id":"635a816a57207246b927a8af","author_id":"1","sort_order":0},{"id":"635a816b57207246b927a8ee","post_id":"635a816a57207246b927a8b0","author_id":"1","sort_order":0},{"id":"635a816b57207246b927a8f1","post_id":"635a816a57207246b927a8b1","author_id":"1","sort_order":0},{"id":"635a816b57207246b927a8f4","post_id":"635a816a57207246b927a8b2","author_id":"1","sort_order":0},{"id":"635a816b57207246b927a8f7","post_id":"635a816a57207246b927a8b3","author_id":"1","sort_order":0},{"id":"635a816b57207246b927a8fb","post_id":"635a816a57207246b927a8b5","author_id":"1","sort_order":0},{"id":"635a816b57207246b927a8fe","post_id":"635a816a57207246b927a8b6","author_id":"1","sort_order":0},{"id":"635a816b57207246b927a901","post_id":"635a816a57207246b927a8b7","author_id":"1","sort_order":0},{"id":"635a816b57207246b927a905","post_id":"635a816a57207246b927a8b8","author_id":"1","sort_order":0},{"id":"635a816b57207246b927a908","post_id":"635a816a57207246b927a8b9","author_id":"1","sort_order":0},{"id":"635a816b57207246b927a90b","post_id":"635a816a57207246b927a8ba","author_id":"1","sort_order":0},{"id":"635a816b57207246b927a90f","post_id":"635a816a57207246b927a8bb","author_id":"1","sort_order":0},{"id":"635a816b57207246b927a912","post_id":"635a816a57207246b927a8bc","author_id":"1","sort_order":0},{"id":"635a816b57207246b927a915","post_id":"635a816a57207246b927a8bd","author_id":"1","sort_order":0},{"id":"635a9a038162df0fda69a4a0","post_id":"635a9a038162df0fda69a49f","author_id":"1","sort_order":0},{"id":"635cf0c96c901d4844747e3a","post_id":"635cf0c86c901d4844747e39","author_id":"1","sort_order":0},{"id":"635cf62e6c901d4844747e4c","post_id":"635cf62e6c901d4844747e4b","author_id":"1","sort_order":0},{"id":"635cf8c16c901d4844747e62","post_id":"635cf8c16c901d4844747e61","author_id":"1","sort_order":0},{"id":"635cfb2e6c901d4844747e6f","post_id":"635cfb2e6c901d4844747e6e","author_id":"1","sort_order":0},{"id":"635cfc2d6c901d4844747e7e","post_id":"635cfc2d6c901d4844747e7d","author_id":"1","sort_order":0},{"id":"635cfda26c901d4844747e8a","post_id":"635cfda26c901d4844747e89","author_id":"1","sort_order":0},{"id":"635cfeb06c901d4844747e98","post_id":"635cfeb06c901d4844747e97","author_id":"1","sort_order":0},{"id":"63e5196c0a96e94f1297200a","post_id":"63e5196c0a96e94f12972009","author_id":"1","sort_order":0},{"id":"64d1177d1f95c4000167e859","post_id":"64d1177d1f95c4000167e858","author_id":"1","sort_order":0},{"id":"64d27827aaa179000118761e","post_id":"64d27827aaa179000118761d","author_id":"1","sort_order":0},{"id":"64d5f2755c5ac00001391bc5","post_id":"64d5f2755c5ac00001391bc4","author_id":"1","sort_order":0},{"id":"64d5f976e17ae60001fb738a","post_id":"64d5f976e17ae60001fb7389","author_id":"1","sort_order":0},{"id":"64da6975e17ae60001fb739f","post_id":"64da6975e17ae60001fb739e","author_id":"1","sort_order":0},{"id":"64db19c5e17ae60001fb73b0","post_id":"64db19c5e17ae60001fb73af","author_id":"1","sort_order":0},{"id":"64dbb5f35f1c820001e0a417","post_id":"64dbb5f35f1c820001e0a416","author_id":"1","sort_order":0},{"id":"64de4be0f1c6660001711fc4","post_id":"64de4be0f1c6660001711fc3","author_id":"1","sort_order":0},{"id":"64e7a2daf1c6660001711fd7","post_id":"64e7a2daf1c6660001711fd6","author_id":"1","sort_order":0},{"id":"64ea48dd4feca3000178b924","post_id":"64ea48dd4feca3000178b923","author_id":"1","sort_order":0}],"roles":[{"id":"635a807457207246b927a5db","name":"Administrator","description":"Administrators","created_at":"2022-10-27 12:58:28","created_by":"1","updated_at":"2022-10-27 12:58:28","updated_by":"1"},{"id":"635a807457207246b927a5dc","name":"Editor","description":"Editors","created_at":"2022-10-27 12:58:28","created_by":"1","updated_at":"2022-10-27 12:58:28","updated_by":"1"},{"id":"635a807457207246b927a5dd","name":"Author","description":"Authors","created_at":"2022-10-27 12:58:28","created_by":"1","updated_at":"2022-10-27 12:58:28","updated_by":"1"},{"id":"635a807457207246b927a5de","name":"Contributor","description":"Contributors","created_at":"2022-10-27 12:58:28","created_by":"1","updated_at":"2022-10-27 12:58:28","updated_by":"1"},{"id":"635a807457207246b927a5df","name":"Owner","description":"Blog Owner","created_at":"2022-10-27 12:58:28","created_by":"1","updated_at":"2022-10-27 12:58:28","updated_by":"1"},{"id":"635a807457207246b927a5e0","name":"Admin Integration","description":"External Apps","created_at":"2022-10-27 12:58:28","created_by":"1","updated_at":"2022-10-27 12:58:28","updated_by":"1"},{"id":"635a807457207246b927a5e1","name":"Ghost Explore Integration","description":"Internal Integration for the Ghost Explore directory","created_at":"2022-10-27 12:58:28","created_by":"1","updated_at":"2022-10-27 12:58:28","updated_by":"1"},{"id":"635a807457207246b927a5e2","name":"DB Backup Integration","description":"Internal DB Backup Client","created_at":"2022-10-27 12:58:28","created_by":"1","updated_at":"2022-10-27 12:58:28","updated_by":"1"},{"id":"635a807457207246b927a5e3","name":"Scheduler Integration","description":"Internal Scheduler Client","created_at":"2022-10-27 12:58:28","created_by":"1","updated_at":"2022-10-27 12:58:28","updated_by":"1"}],"roles_users":[{"id":"635a807457207246b927a5e4","role_id":"635a807457207246b927a5df","user_id":"1"}],"settings":[{"id":"635a807757207246b927a781","group":"core","key":"db_hash","value":"e2fb433c-9491-4c3b-aaa4-9b621674a0f3","type":"string","flags":null,"created_at":"2022-10-27 12:58:31","created_by":"1","updated_at":"2022-10-27 12:58:31","updated_by":"1"},{"id":"635a807757207246b927a782","group":"core","key":"routes_hash","value":"3d180d52c663d173a6be791ef411ed01","type":"string","flags":null,"created_at":"2022-10-27 12:58:31","created_by":"1","updated_at":"2022-10-27 12:58:33","updated_by":"1"},{"id":"635a807757207246b927a783","group":"core","key":"next_update_check","value":"1693148414","type":"number","flags":null,"created_at":"2022-10-27 12:58:31","created_by":"1","updated_at":"2023-08-26 15:00:13","updated_by":"1"},{"id":"635a807757207246b927a784","group":"core","key":"notifications","value":"[{\"dismissible\":true,\"location\":\"bottom\",\"status\":\"alert\",\"id\":\"f9c7f260-4371-11ee-a5f7-196f1cb67cfa\",\"createdAtVersion\":\"5.38.0\",\"custom\":false,\"createdAt\":\"2023-08-25T17:05:29.000Z\",\"type\":\"info\",\"top\":false,\"message\":\"Ghost <a href=\\\"https://github.com/TryGhost/Ghost/releases\\\">5.60.0</a> has been released, <a href=\\\"https://ghost.org/update/?v=5.38.0\\\">click here</a> to upgrade.\",\"seen\":false,\"addedAt\":\"2023-08-26T15:00:13.695Z\"}]","type":"array","flags":null,"created_at":"2022-10-27 12:58:31","created_by":"1","updated_at":"2023-08-26 15:00:13","updated_by":"1"},{"id":"635a807757207246b927a785","group":"core","key":"version_notifications","value":"[]","type":"array","flags":null,"created_at":"2022-10-27 12:58:31","created_by":"1","updated_at":"2022-10-27 12:58:31","updated_by":"1"},{"id":"635a807757207246b927a786","group":"core","key":"admin_session_secret","value":"6d8c10d7785fce8e9dba69bc0d28ec98f8ba692c24889126fb0097f08b96c7bf","type":"string","flags":null,"created_at":"2022-10-27 12:58:31","created_by":"1","updated_at":"2022-10-27 12:58:31","updated_by":"1"},{"id":"635a807757207246b927a787","group":"core","key":"theme_session_secret","value":"00555f843d4b945f07482bbcefcc265bc5dc5124df91f76972cc713445acb4e7","type":"string","flags":null,"created_at":"2022-10-27 12:58:31","created_by":"1","updated_at":"2022-10-27 12:58:31","updated_by":"1"},{"id":"635a807757207246b927a788","group":"core","key":"ghost_public_key","value":"-----BEGIN RSA PUBLIC KEY-----\nMIGJAoGBAIpQJ48bF8xF8gp1+ggHTLHbpGZxt0cFOevuKGUFpk5cnUHGOwPaecERhTN7L3aL\nHE+2bh1MePibzXhD94QyiYIqIm5Y6CP535NBoSB1OoSbWw/pPCCabty5qSaPSxtwEi6hofV0\nXePZXayrEOM0aurx6JAPQ+0xmKZ2lU6AOhi9AgMBAAE=\n-----END RSA PUBLIC KEY-----\n","type":"string","flags":null,"created_at":"2022-10-27 12:58:31","created_by":"1","updated_at":"2022-10-27 12:58:31","updated_by":"1"},{"id":"635a807757207246b927a789","group":"core","key":"ghost_private_key","value":"-----BEGIN RSA PRIVATE KEY-----\nMIICXAIBAAKBgQCKUCePGxfMRfIKdfoIB0yx26RmcbdHBTnr7ihlBaZOXJ1BxjsD2nnBEYUz\ney92ixxPtm4dTHj4m814Q/eEMomCKiJuWOgj+d+TQaEgdTqEm1sP6Twgmm7cuakmj0sbcBIu\noaH1dF3j2V2sqxDjNGrq8eiQD0PtMZimdpVOgDoYvQIDAQABAoGAf2xS1ZNXPFkgIKUJ4UWg\nUacRcVPITsSw1PvG+TLYQQ8vzX3rtqQbUVRry77sPiDwxztBfPqL5DXdeLPdH0xTw11oF101\nRbuWKTGblcdQ4/vtx9PKr+mb5zb9YfJNNFiRzU8S/nur96U+9d3h2R0RALfxCVNeA82AWgIg\nhGUPaIECQQDBWScKG50VlDCO72hI4iliY7MTzdynJr51uODY3ewRYXccM571ex73ILcPOwij\n13iott/C//jUfCgMqoQlhJZdAkEAtyGpsBZ9e9eHHMJm/FLy890DDHskxawrvISio2nhGq3+\ny+uOYW7E5UNPfDbnWmAO6I+Lc0w0dT6v/G/+LGil4QJAGq6G6Kou30939AGtzoEHXQCNMepy\nzM5X8j71KHhXn35nxYiKIy4+c7QcDwoCgzm0+PNjpbFVUV1g2X6ehd7qMQJBAK7z1/rD4am4\nY/oTtvOEA1r6X/lChATc0QPO6tmXQ1iLtYn3RhTLEAu+3GbcxPVQI64FxMGnoc4Iz3QpQfgH\nGcECQHkGapH1xgsFy4DuUaMfE1hhmw3YU+R0PpvJT6JUIwzrnqwAyqlY9Y4EMotOlrBsX56I\nwvMlPd+L77KgNvYqT34=\n-----END RSA PRIVATE KEY-----\n","type":"string","flags":null,"created_at":"2022-10-27 12:58:31","created_by":"1","updated_at":"2022-10-27 12:58:31","updated_by":"1"},{"id":"635a807757207246b927a78a","group":"core","key":"members_public_key","value":"-----BEGIN RSA PUBLIC KEY-----\nMIGJAoGBAJbEShg3nL6gJmdOX+z9qHrpU4k9dCQF7P+w6yuvc2ga2BiUvK4erA+FXkJQzckS\nLTkLwLAIxIg7AJz6Ix16IWkHvJC574cucVtVrHAxKv6UgfglW727iWuvqsetRXbJQuljzOyC\nlwZ4p1FSjPuH41JPEYA9pSd6AyOmKDECqvsdAgMBAAE=\n-----END RSA PUBLIC KEY-----\n","type":"string","flags":null,"created_at":"2022-10-27 12:58:31","created_by":"1","updated_at":"2022-10-27 12:58:31","updated_by":"1"},{"id":"635a807757207246b927a78b","group":"core","key":"members_private_key","value":"-----BEGIN RSA PRIVATE KEY-----\nMIICXQIBAAKBgQCWxEoYN5y+oCZnTl/s/ah66VOJPXQkBez/sOsrr3NoGtgYlLyuHqwPhV5C\nUM3JEi05C8CwCMSIOwCc+iMdeiFpB7yQue+HLnFbVaxwMSr+lIH4JVu9u4lrr6rHrUV2yULp\nY8zsgpcGeKdRUoz7h+NSTxGAPaUnegMjpigxAqr7HQIDAQABAoGBAIJN0EQx/HT88XQj1uB7\nM1xXwO1CgdiIjpdHD1pIX5RAbzh/hLtwowEfIaJrOBBqd09wiu8aBNJBPHxv7F2Tqr9KTfWl\nW1lfqvLQUN9XFgbqJ9UL1mmbtjSqTIEm1owpxPdGTRuzd2NsnqmUUGLMVhC72LlcRC1FlGyn\nUxeEusV5AkEAyYagHQnrnnk3MpSVV/6LqmhY5xTUPBmF+0r0SJ5MnmpXw1va3tIa0tJqIf+O\nQyWgHfhaJBlkOjQSm6gbz3OHowJBAL+FL+GsAaNGkDajLZWnSHAz5MZGTxkhx0/6tyYH02Fb\nQNiw6bhK2clGKemvX4aPjhSZmY/64k8kCMVxF4rCnj8CQQCHRBKyixcYzrnq/Gplnth2MAYE\nTSnLkUIqEvx2xbId3rk7yqrVRud0PIG6gkMl9NpNY4Z1lol8u7kFu8e27g/LAkABzZYy0LS/\nPcXTzdt7AjUrYUGxIC5UdT30Ic8hm4dA7mQA5kF9C69bNr7kRVNn5+gVh5Cri1ggGJ3Ahh0L\noGNvAkBtGsqOp0S6nEKfQG01AiQAiPsX6H+UVwaDo48P1KPbGfdxskfP45CrQZV1lm818md+\n0Y0EbgMDEdfJtfyEcByA\n-----END RSA PRIVATE KEY-----\n","type":"string","flags":null,"created_at":"2022-10-27 12:58:31","created_by":"1","updated_at":"2022-10-27 12:58:31","updated_by":"1"},{"id":"635a807757207246b927a78c","group":"core","key":"members_email_auth_secret","value":"53366d3a00ba9f6fcd97ba006d24a9d4f9e3811ec4b0f045e89ae0c6dd6eb34ec9aaba8b209235b488928227adf5fffee00a89fa2a1863c3a0e935f3822add91","type":"string","flags":null,"created_at":"2022-10-27 12:58:31","created_by":"1","updated_at":"2022-10-27 12:58:31","updated_by":"1"},{"id":"635a807757207246b927a78f","group":"site","key":"title","value":"柴魚筆記本","type":"string","flags":"PUBLIC","created_at":"2019-11-30 13:51:20","created_by":"1","updated_at":"2019-11-30 14:09:33","updated_by":"1"},{"id":"635a807757207246b927a790","group":"site","key":"description","value":"程式・軟體・攝影","type":"string","flags":"PUBLIC","created_at":"2019-11-30 13:51:20","created_by":"1","updated_at":"2023-08-14 17:48:54","updated_by":"1"},{"id":"635a807757207246b927a791","group":"site","key":"logo","value":null,"type":"string","flags":"PUBLIC","created_at":"2019-11-30 13:51:20","created_by":"1","updated_at":"2021-06-09 16:21:31","updated_by":"1"},{"id":"635a807757207246b927a792","group":"site","key":"cover_image","value":"__GHOST_URL__/content/images/2019/12/IMG_2313.jpg","type":"string","flags":null,"created_at":"2019-11-30 13:51:20","created_by":"1","updated_at":"2022-10-27 13:02:34","updated_by":"1"},{"id":"635a807757207246b927a793","group":"site","key":"icon","value":"__GHOST_URL__/content/images/2019/12/dog-breeder-small.ico","type":"string","flags":null,"created_at":"2019-11-30 13:51:20","created_by":"1","updated_at":"2022-10-27 13:02:34","updated_by":"1"},{"id":"635a807757207246b927a794","group":"site","key":"accent_color","value":"#15171A","type":"string","flags":"PUBLIC","created_at":"2021-05-31 19:35:35","created_by":"1","updated_at":"2021-05-31 19:35:35","updated_by":"1"},{"id":"635a807757207246b927a795","group":"site","key":"locale","value":"zh-Hant","type":"string","flags":null,"created_at":"2021-05-31 19:35:35","created_by":"1","updated_at":"2021-06-09 16:19:20","updated_by":"1"},{"id":"635a807757207246b927a796","group":"site","key":"timezone","value":"Asia/Singapore","type":"string","flags":null,"created_at":"2021-05-31 19:35:35","created_by":"1","updated_at":"2021-06-09 16:19:20","updated_by":"1"},{"id":"635a807757207246b927a797","group":"site","key":"codeinjection_head","value":null,"type":"string","flags":null,"created_at":"2021-05-31 19:35:35","created_by":"1","updated_at":"2021-05-31 19:35:35","updated_by":"1"},{"id":"635a807757207246b927a798","group":"site","key":"codeinjection_foot","value":null,"type":"string","flags":null,"created_at":"2021-05-31 19:35:35","created_by":"1","updated_at":"2021-05-31 19:35:35","updated_by":"1"},{"id":"635a807757207246b927a799","group":"site","key":"facebook","value":null,"type":"string","flags":null,"created_at":"2019-11-30 13:51:20","created_by":"1","updated_at":"2019-12-02 15:10:10","updated_by":"1"},{"id":"635a807757207246b927a79a","group":"site","key":"twitter","value":null,"type":"string","flags":null,"created_at":"2019-11-30 13:51:20","created_by":"1","updated_at":"2019-12-02 15:10:10","updated_by":"1"},{"id":"635a807757207246b927a79b","group":"site","key":"navigation","value":"[{\"label\":\"Home\",\"url\":\"/\"},{\"label\":\"Author\",\"url\":\"/author/katsuobushi/\"},{\"label\":\"Tags\",\"url\":\"/tags/\"},{\"label\":\"Golang\",\"url\":\"/tag/golang/\"}]","type":"array","flags":null,"created_at":"2019-11-30 13:51:20","created_by":"1","updated_at":"2022-10-27 14:36:46","updated_by":"1"},{"id":"635a807757207246b927a79c","group":"site","key":"secondary_navigation","value":"[{\"label\":\"Github\",\"url\":\"https://github.com/vincent87720\"},{\"label\":\"LinkedIn\",\"url\":\"https://www.linkedin.com/in/vincent87720/\"}]","type":"array","flags":null,"created_at":"2021-05-31 19:35:35","created_by":"1","updated_at":"2023-08-26 18:54:21","updated_by":"1"},{"id":"635a807757207246b927a79d","group":"site","key":"meta_title","value":null,"type":"string","flags":null,"created_at":"2019-11-30 13:51:20","created_by":"1","updated_at":"2019-11-30 13:51:20","updated_by":"1"},{"id":"635a807757207246b927a79e","group":"site","key":"meta_description","value":null,"type":"string","flags":null,"created_at":"2019-11-30 13:51:20","created_by":"1","updated_at":"2019-11-30 13:51:20","updated_by":"1"},{"id":"635a807757207246b927a79f","group":"site","key":"og_image","value":"__GHOST_URL__/content/images/2021/06/IMG_2313-1.jpg","type":"string","flags":null,"created_at":"2019-11-30 13:51:20","created_by":"1","updated_at":"2021-06-09 16:22:30","updated_by":"1"},{"id":"635a807757207246b927a7a0","group":"site","key":"og_title","value":null,"type":"string","flags":null,"created_at":"2019-11-30 13:51:20","created_by":"1","updated_at":"2019-11-30 13:51:20","updated_by":"1"},{"id":"635a807757207246b927a7a1","group":"site","key":"og_description","value":null,"type":"string","flags":null,"created_at":"2019-11-30 13:51:20","created_by":"1","updated_at":"2019-11-30 13:51:20","updated_by":"1"},{"id":"635a807757207246b927a7a2","group":"site","key":"twitter_image","value":"__GHOST_URL__/content/images/2021/06/IMG_2313.jpg","type":"string","flags":null,"created_at":"2019-11-30 13:51:20","created_by":"1","updated_at":"2021-06-09 16:22:30","updated_by":"1"},{"id":"635a807757207246b927a7a3","group":"site","key":"twitter_title","value":null,"type":"string","flags":null,"created_at":"2019-11-30 13:51:20","created_by":"1","updated_at":"2019-11-30 13:51:20","updated_by":"1"},{"id":"635a807757207246b927a7a4","group":"site","key":"twitter_description","value":null,"type":"string","flags":null,"created_at":"2019-11-30 13:51:20","created_by":"1","updated_at":"2019-11-30 13:51:20","updated_by":"1"},{"id":"635a807757207246b927a7a5","group":"theme","key":"active_theme","value":"attila-3.6.1","type":"string","flags":"RO","created_at":"2022-10-27 12:58:31","created_by":"1","updated_at":"2022-10-27 15:02:37","updated_by":"1"},{"id":"635a807757207246b927a7a6","group":"private","key":"is_private","value":"false","type":"boolean","flags":null,"created_at":"2022-10-27 12:58:31","created_by":"1","updated_at":"2022-10-27 12:58:31","updated_by":"1"},{"id":"635a807757207246b927a7a7","group":"private","key":"password","value":"","type":"string","flags":null,"created_at":"2022-10-27 12:58:31","created_by":"1","updated_at":"2022-10-27 12:58:31","updated_by":"1"},{"id":"635a807757207246b927a7a8","group":"private","key":"public_hash","value":"bc797acf0f62437496e737c288e90b","type":"string","flags":null,"created_at":"2019-11-30 13:51:20","created_by":"1","updated_at":"2019-11-30 13:51:20","updated_by":"1"},{"id":"635a807757207246b927a7a9","group":"members","key":"default_content_visibility","value":"public","type":"string","flags":null,"created_at":"2019-11-30 13:51:20","created_by":"1","updated_at":"2019-11-30 13:51:20","updated_by":"1"},{"id":"635a807757207246b927a7aa","group":"members","key":"default_content_visibility_tiers","value":"[]","type":"array","flags":null,"created_at":"2022-10-27 12:58:31","created_by":"1","updated_at":"2022-10-27 12:58:31","updated_by":"1"},{"id":"635a807757207246b927a7ab","group":"members","key":"members_signup_access","value":"all","type":"string","flags":null,"created_at":"2021-05-31 19:35:35","created_by":"1","updated_at":"2022-10-27 13:02:34","updated_by":"1"},{"id":"635a807757207246b927a7ac","group":"members","key":"members_support_address","value":"noreply","type":"string","flags":"PUBLIC,RO","created_at":"2022-10-27 12:58:31","created_by":"1","updated_at":"2022-10-27 12:58:31","updated_by":"1"},{"id":"635a807757207246b927a7af","group":"members","key":"stripe_plans","value":"[{\"name\":\"Monthly\",\"currency\":\"usd\",\"interval\":\"month\",\"amount\":0},{\"name\":\"Yearly\",\"currency\":\"usd\",\"interval\":\"year\",\"amount\":0}]","type":"array","flags":null,"created_at":"2021-05-31 19:35:35","created_by":"1","updated_at":"2022-10-27 13:02:34","updated_by":"1"},{"id":"635a807757207246b927a7b2","group":"members","key":"stripe_connect_livemode","value":null,"type":"boolean","flags":null,"created_at":"2021-05-31 19:35:35","created_by":"1","updated_at":"2022-10-27 13:02:34","updated_by":"1"},{"id":"635a807757207246b927a7b3","group":"members","key":"stripe_connect_display_name","value":null,"type":"string","flags":null,"created_at":"2021-05-31 19:35:35","created_by":"1","updated_at":"2022-10-27 13:02:34","updated_by":"1"},{"id":"635a807757207246b927a7b5","group":"members","key":"members_monthly_price_id","value":null,"type":"string","flags":null,"created_at":"2022-10-27 12:58:31","created_by":"1","updated_at":"2022-10-27 12:58:31","updated_by":"1"},{"id":"635a807757207246b927a7b6","group":"members","key":"members_yearly_price_id","value":null,"type":"string","flags":null,"created_at":"2022-10-27 12:58:31","created_by":"1","updated_at":"2022-10-27 12:58:31","updated_by":"1"},{"id":"635a807757207246b927a7b7","group":"portal","key":"portal_name","value":"true","type":"boolean","flags":null,"created_at":"2021-05-31 19:35:35","created_by":"1","updated_at":"2021-05-31 19:35:35","updated_by":"1"},{"id":"635a807757207246b927a7b8","group":"portal","key":"portal_button","value":"false","type":"boolean","flags":null,"created_at":"2021-05-31 19:35:35","created_by":"1","updated_at":"2021-05-31 19:35:35","updated_by":"1"},{"id":"635a807757207246b927a7b9","group":"portal","key":"portal_plans","value":"[\"free\",\"monthly\",\"yearly\"]","type":"array","flags":null,"created_at":"2021-05-31 19:35:35","created_by":"1","updated_at":"2021-06-09 16:05:23","updated_by":"1"},{"id":"635a807757207246b927a7ba","group":"portal","key":"portal_products","value":"[]","type":"array","flags":null,"created_at":"2022-10-27 12:58:31","created_by":"1","updated_at":"2022-10-27 12:58:31","updated_by":"1"},{"id":"635a807757207246b927a7bb","group":"portal","key":"portal_button_style","value":"icon-and-text","type":"string","flags":null,"created_at":"2021-05-31 19:35:35","created_by":"1","updated_at":"2021-05-31 19:35:35","updated_by":"1"},{"id":"635a807757207246b927a7bc","group":"portal","key":"portal_button_icon","value":null,"type":"string","flags":null,"created_at":"2021-05-31 19:35:35","created_by":"1","updated_at":"2021-05-31 19:35:35","updated_by":"1"},{"id":"635a807757207246b927a7bd","group":"portal","key":"portal_button_signup_text","value":"Subscribe","type":"string","flags":null,"created_at":"2021-05-31 19:35:35","created_by":"1","updated_at":"2021-05-31 19:35:35","updated_by":"1"},{"id":"635a807757207246b927a7be","group":"email","key":"mailgun_domain","value":null,"type":"string","flags":null,"created_at":"2021-05-31 19:35:35","created_by":"1","updated_at":"2022-10-27 13:02:34","updated_by":"1"},{"id":"635a807757207246b927a7bf","group":"email","key":"mailgun_api_key","value":null,"type":"string","flags":null,"created_at":"2021-05-31 19:35:35","created_by":"1","updated_at":"2022-10-27 13:02:34","updated_by":"1"},{"id":"635a807757207246b927a7c0","group":"email","key":"mailgun_base_url","value":null,"type":"string","flags":null,"created_at":"2021-05-31 19:35:35","created_by":"1","updated_at":"2022-10-27 13:02:34","updated_by":"1"},{"id":"635a807757207246b927a7c1","group":"email","key":"email_track_opens","value":"true","type":"boolean","flags":null,"created_at":"2021-05-31 19:35:35","created_by":"1","updated_at":"2021-05-31 19:35:35","updated_by":"1"},{"id":"635a807757207246b927a7c2","group":"email","key":"email_track_clicks","value":"true","type":"boolean","flags":null,"created_at":"2022-10-27 12:58:31","created_by":"1","updated_at":"2022-10-27 12:58:31","updated_by":"1"},{"id":"635a807757207246b927a7c4","group":"amp","key":"amp","value":"true","type":"boolean","flags":null,"created_at":"2019-11-30 13:51:20","created_by":"1","updated_at":"2019-11-30 13:51:20","updated_by":"1"},{"id":"635a807757207246b927a7c5","group":"amp","key":"amp_gtag_id","value":null,"type":"string","flags":null,"created_at":"2021-05-31 19:35:35","created_by":"1","updated_at":"2021-05-31 19:35:35","updated_by":"1"},{"id":"635a807757207246b927a7c6","group":"firstpromoter","key":"firstpromoter","value":"false","type":"boolean","flags":null,"created_at":"2021-05-31 19:35:35","created_by":"1","updated_at":"2021-05-31 19:35:35","updated_by":"1"},{"id":"635a807757207246b927a7c7","group":"firstpromoter","key":"firstpromoter_id","value":null,"type":"string","flags":null,"created_at":"2021-05-31 19:35:35","created_by":"1","updated_at":"2021-05-31 19:35:35","updated_by":"1"},{"id":"635a807757207246b927a7c8","group":"labs","key":"labs","value":"{}","type":"object","flags":null,"created_at":"2019-11-30 13:51:20","created_by":"1","updated_at":"2019-12-06 15:02:54","updated_by":"1"},{"id":"635a807757207246b927a7c9","group":"slack","key":"slack_url","value":"","type":"string","flags":null,"created_at":"2022-10-27 12:58:31","created_by":"1","updated_at":"2022-10-27 12:58:31","updated_by":"1"},{"id":"635a807757207246b927a7ca","group":"slack","key":"slack_username","value":"Ghost","type":"string","flags":null,"created_at":"2019-11-30 13:51:20","created_by":"1","updated_at":"2022-10-27 13:02:34","updated_by":"1"},{"id":"635a807757207246b927a7cb","group":"unsplash","key":"unsplash","value":"true","type":"boolean","flags":null,"created_at":"2019-11-30 13:51:20","created_by":"1","updated_at":"2022-10-27 13:02:34","updated_by":"1"},{"id":"635a807757207246b927a7cc","group":"views","key":"shared_views","value":"[]","type":"array","flags":null,"created_at":"2021-05-31 19:35:35","created_by":"1","updated_at":"2021-05-31 19:35:35","updated_by":"1"},{"id":"635a807757207246b927a7cd","group":"editor","key":"editor_default_email_recipients","value":"visibility","type":"string","flags":null,"created_at":"2022-10-27 12:58:31","created_by":"1","updated_at":"2022-10-27 12:58:31","updated_by":"1"},{"id":"635a807757207246b927a7ce","group":"editor","key":"editor_default_email_recipients_filter","value":"all","type":"string","flags":null,"created_at":"2022-10-27 12:58:31","created_by":"1","updated_at":"2022-10-27 12:58:31","updated_by":"1"},{"id":"635a807757207246b927a7cf","group":"comments","key":"comments_enabled","value":"off","type":"string","flags":null,"created_at":"2022-10-27 12:58:31","created_by":"1","updated_at":"2022-10-27 12:58:31","updated_by":"1"},{"id":"635cf06b6c901d4844747e33","group":"members","key":"members_track_sources","value":"true","type":"boolean","flags":null,"created_at":"2022-10-29 09:20:43","created_by":"1","updated_at":null,"updated_by":null},{"id":"63e5125392f87e408135c21c","group":"analytics","key":"outbound_link_tagging","value":"true","type":"boolean","flags":null,"created_at":"2023-02-09 15:33:39","created_by":"1","updated_at":null,"updated_by":null}],"tags":[{"id":"635a816a57207246b927a88b","name":"golang","slug":"golang","description":null,"feature_image":"__GHOST_URL__/content/images/2020/09/golang-long-1.jpeg","parent_id":null,"visibility":"public","og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"meta_title":null,"meta_description":null,"codeinjection_head":null,"codeinjection_foot":null,"canonical_url":null,"accent_color":null,"created_at":"2019-12-21 12:47:00","created_by":"1","updated_at":"2020-10-27 18:26:43","updated_by":null},{"id":"635a816a57207246b927a88f","name":"clover","slug":"clover","description":null,"feature_image":"__GHOST_URL__/content/images/2021/06/clover.png","parent_id":null,"visibility":"public","og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"meta_title":null,"meta_description":null,"codeinjection_head":null,"codeinjection_foot":null,"canonical_url":null,"accent_color":null,"created_at":"2020-02-22 14:16:00","created_by":"1","updated_at":"2021-06-09 16:10:48","updated_by":null},{"id":"635a816a57207246b927a890","name":"hackintosh","slug":"hackintosh","description":null,"feature_image":"__GHOST_URL__/content/images/2022/10/INSTAIMG_0050-2.jpeg","parent_id":null,"visibility":"public","og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"meta_title":null,"meta_description":null,"codeinjection_head":null,"codeinjection_foot":null,"canonical_url":null,"accent_color":null,"created_at":"2020-02-22 14:16:00","created_by":"1","updated_at":"2022-10-30 12:08:21","updated_by":"1"},{"id":"635a816a57207246b927a891","name":"C++","slug":"cpp","description":null,"feature_image":"__GHOST_URL__/content/images/2021/06/C--.jpg","parent_id":null,"visibility":"public","og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"meta_title":null,"meta_description":null,"codeinjection_head":null,"codeinjection_foot":null,"canonical_url":null,"accent_color":null,"created_at":"2020-03-18 07:42:51","created_by":"1","updated_at":"2021-06-09 16:10:06","updated_by":null},{"id":"635a816a57207246b927a892","name":"Qt","slug":"qt","description":null,"feature_image":"__GHOST_URL__/content/images/2022/10/INSTAIMG_0050-5.jpeg","parent_id":null,"visibility":"public","og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"meta_title":null,"meta_description":null,"codeinjection_head":null,"codeinjection_foot":null,"canonical_url":null,"accent_color":null,"created_at":"2020-06-12 09:09:08","created_by":"1","updated_at":"2022-10-30 12:09:49","updated_by":"1"},{"id":"635a816a57207246b927a893","name":"C#","slug":"csharp","description":null,"feature_image":"__GHOST_URL__/content/images/2020/09/dotNET-1.png","parent_id":null,"visibility":"public","og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"meta_title":null,"meta_description":null,"codeinjection_head":null,"codeinjection_foot":null,"canonical_url":null,"accent_color":null,"created_at":"2020-09-02 20:15:16","created_by":"1","updated_at":"2020-09-02 21:06:24","updated_by":null},{"id":"635a816a57207246b927a894","name":"NuGet","slug":"nuget","description":null,"feature_image":"__GHOST_URL__/content/images/2021/06/dotNET.png","parent_id":null,"visibility":"public","og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"meta_title":null,"meta_description":null,"codeinjection_head":null,"codeinjection_foot":null,"canonical_url":null,"accent_color":null,"created_at":"2020-09-02 20:15:16","created_by":"1","updated_at":"2021-06-09 16:12:59","updated_by":null},{"id":"635a816a57207246b927a897","name":"mqtt","slug":"mqtt","description":null,"feature_image":"__GHOST_URL__/content/images/2021/06/MQTT.png","parent_id":null,"visibility":"public","og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"meta_title":null,"meta_description":null,"codeinjection_head":null,"codeinjection_foot":null,"canonical_url":null,"accent_color":null,"created_at":"2020-11-24 18:01:05","created_by":"1","updated_at":"2021-06-09 16:12:46","updated_by":null},{"id":"635a816a57207246b927a896","name":"Vue","slug":"vue","description":null,"feature_image":"__GHOST_URL__/content/images/2021/06/vue.jpg","parent_id":null,"visibility":"public","og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"meta_title":null,"meta_description":null,"codeinjection_head":null,"codeinjection_foot":null,"canonical_url":null,"accent_color":null,"created_at":"2020-10-27 18:12:29","created_by":"1","updated_at":"2021-06-09 16:14:27","updated_by":null},{"id":"635a816a57207246b927a898","name":"VisualStudioCode","slug":"visualstudiocode","description":null,"feature_image":"__GHOST_URL__/content/images/2021/06/visualStudioCode.png","parent_id":null,"visibility":"public","og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"meta_title":null,"meta_description":null,"codeinjection_head":null,"codeinjection_foot":null,"canonical_url":null,"accent_color":null,"created_at":"2021-01-21 10:57:39","created_by":"1","updated_at":"2021-06-09 16:14:18","updated_by":null},{"id":"635a816a57207246b927a895","name":"PostgreSQL","slug":"postgresql","description":null,"feature_image":"__GHOST_URL__/content/images/2022/10/jan-antonin-kolar-lRoX0shwjUQ-unsplash_database-1.jpeg","parent_id":null,"visibility":"public","og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"meta_title":null,"meta_description":null,"codeinjection_head":null,"codeinjection_foot":null,"canonical_url":null,"accent_color":null,"created_at":"2020-09-02 20:15:16","created_by":"1","updated_at":"2022-10-30 12:09:32","updated_by":"1"},{"id":"635a816a57207246b927a899","name":"ESP8266","slug":"esp8266","description":null,"feature_image":"__GHOST_URL__/content/images/2021/06/pexels-skitterphoto-1448561.jpg","parent_id":null,"visibility":"public","og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"meta_title":null,"meta_description":null,"codeinjection_head":null,"codeinjection_foot":null,"canonical_url":null,"accent_color":null,"created_at":"2021-02-22 13:17:13","created_by":"1","updated_at":"2021-06-09 16:11:37","updated_by":null},{"id":"635a816a57207246b927a89a","name":"zsh","slug":"zsh","description":null,"feature_image":"__GHOST_URL__/content/images/2021/06/zsh.png","parent_id":null,"visibility":"public","og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"meta_title":null,"meta_description":null,"codeinjection_head":null,"codeinjection_foot":null,"canonical_url":null,"accent_color":null,"created_at":"2021-06-04 16:31:32","created_by":"1","updated_at":"2021-06-09 16:14:35","updated_by":null},{"id":"635a816a57207246b927a89b","name":"Ubuntu","slug":"ubuntu","description":null,"feature_image":"__GHOST_URL__/content/images/2022/10/INSTAIMG_0050-6.jpeg","parent_id":null,"visibility":"public","og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"meta_title":null,"meta_description":null,"codeinjection_head":null,"codeinjection_foot":null,"canonical_url":null,"accent_color":null,"created_at":"2021-06-04 16:31:32","created_by":"1","updated_at":"2022-10-30 12:10:18","updated_by":"1"},{"id":"635a816a57207246b927a89d","name":"network","slug":"network","description":null,"feature_image":"__GHOST_URL__/content/images/2021/07/communication-4871245-1.jpg","parent_id":null,"visibility":"public","og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"meta_title":null,"meta_description":null,"codeinjection_head":null,"codeinjection_foot":null,"canonical_url":null,"accent_color":null,"created_at":"2021-07-22 15:28:46","created_by":"1","updated_at":"2021-07-22 15:30:55","updated_by":null},{"id":"635a816a57207246b927a89c","name":"Pattern","slug":"pattern","description":null,"feature_image":"__GHOST_URL__/content/images/2023/08/shapelined-_JBKdviweXI-unsplash-2.jpg","parent_id":null,"visibility":"public","og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"meta_title":null,"meta_description":null,"codeinjection_head":null,"codeinjection_foot":null,"canonical_url":null,"accent_color":null,"created_at":"2021-06-14 09:19:50","created_by":"1","updated_at":"2023-08-16 14:02:31","updated_by":"1"},{"id":"635a816a57207246b927a88c","name":"python","slug":"python","description":null,"feature_image":"__GHOST_URL__/content/images/2021/06/python-logo.jpg","parent_id":null,"visibility":"public","og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"meta_title":null,"meta_description":null,"codeinjection_head":null,"codeinjection_foot":null,"canonical_url":null,"accent_color":null,"created_at":"2020-01-03 17:27:00","created_by":"1","updated_at":"2021-11-24 15:35:25","updated_by":null},{"id":"635a816a57207246b927a88d","name":"crawler","slug":"crawler","description":null,"feature_image":"__GHOST_URL__/content/images/2022/10/INSTAIMG_0050.jpeg","parent_id":null,"visibility":"public","og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"meta_title":null,"meta_description":null,"codeinjection_head":null,"codeinjection_foot":null,"canonical_url":null,"accent_color":null,"created_at":"2020-01-03 17:27:00","created_by":"1","updated_at":"2022-10-30 12:07:56","updated_by":"1"},{"id":"635a816a57207246b927a88e","name":"golangPackage","slug":"golangpackage","description":null,"feature_image":"__GHOST_URL__/content/images/2020/09/golang-long-3.jpeg","parent_id":null,"visibility":"public","og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"meta_title":null,"meta_description":null,"codeinjection_head":null,"codeinjection_foot":null,"canonical_url":null,"accent_color":null,"created_at":"2020-01-26 15:49:33","created_by":"1","updated_at":"2020-10-27 18:26:43","updated_by":null},{"id":"635a816a57207246b927a89e","name":"TCP","slug":"tcp","description":null,"feature_image":"__GHOST_URL__/content/images/2021/07/communication-4871245-2.jpg","parent_id":null,"visibility":"public","og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"meta_title":null,"meta_description":null,"codeinjection_head":null,"codeinjection_foot":null,"canonical_url":null,"accent_color":null,"created_at":"2021-07-22 15:28:46","created_by":"1","updated_at":"2021-07-22 15:31:15","updated_by":null},{"id":"635cf7d26c901d4844747e5c","name":"Elasticsearch","slug":"elasticsearch","description":null,"feature_image":"__GHOST_URL__/content/images/2022/10/daniel-lerman-fr3YLb9UHSQ-unsplash_search-1.jpeg","parent_id":null,"visibility":"public","og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"meta_title":null,"meta_description":null,"codeinjection_head":null,"codeinjection_foot":null,"canonical_url":null,"accent_color":null,"created_at":"2022-10-29 09:52:18","created_by":"1","updated_at":"2022-10-30 10:06:41","updated_by":"1"},{"id":"635cfad76c901d4844747e69","name":"generalKnowledge","slug":"generalknowledge","description":null,"feature_image":"__GHOST_URL__/content/images/2022/10/INSTAIMG_0050-1.jpeg","parent_id":null,"visibility":"public","og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"meta_title":null,"meta_description":null,"codeinjection_head":null,"codeinjection_foot":null,"canonical_url":null,"accent_color":null,"created_at":"2022-10-29 10:05:11","created_by":"1","updated_at":"2022-10-30 12:08:12","updated_by":"1"},{"id":"635cff8d6c901d4844747ea4","name":"Quasar","slug":"quasar","description":null,"feature_image":"__GHOST_URL__/content/images/2022/10/Quasar-1.png","parent_id":null,"visibility":"public","og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"meta_title":null,"meta_description":null,"codeinjection_head":null,"codeinjection_foot":null,"canonical_url":null,"accent_color":null,"created_at":"2022-10-29 10:25:17","created_by":"1","updated_at":"2022-10-30 12:10:04","updated_by":"1"},{"id":"635cff8d6c901d4844747ea5","name":"JavaScript","slug":"javascript","description":null,"feature_image":"__GHOST_URL__/content/images/2022/10/INSTAIMG_0050-3.jpeg","parent_id":null,"visibility":"public","og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"meta_title":null,"meta_description":null,"codeinjection_head":null,"codeinjection_foot":null,"canonical_url":null,"accent_color":null,"created_at":"2022-10-29 10:25:17","created_by":"1","updated_at":"2022-10-30 12:08:30","updated_by":"1"},{"id":"63e51a7c0a96e94f12972016","name":"Docker","slug":"docker","description":null,"feature_image":null,"parent_id":null,"visibility":"public","og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"meta_title":null,"meta_description":null,"codeinjection_head":null,"codeinjection_foot":null,"canonical_url":null,"accent_color":null,"created_at":"2023-02-09 16:08:28","created_by":"1","updated_at":"2023-02-09 16:08:28","updated_by":"1"},{"id":"64d2788aaaa1790001187627","name":"ASP.NET Core","slug":"asp-net-core","description":null,"feature_image":"__GHOST_URL__/content/images/2023/08/vs2012_gray_imprint-3.png","parent_id":null,"visibility":"public","og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"meta_title":null,"meta_description":null,"codeinjection_head":null,"codeinjection_foot":null,"canonical_url":null,"accent_color":null,"created_at":"2023-08-08 17:16:58","created_by":"1","updated_at":"2023-08-24 18:50:00","updated_by":"1"},{"id":"64d5f2d75c5ac00001391bcd","name":"Webpack","slug":"webpack","description":null,"feature_image":null,"parent_id":null,"visibility":"public","og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"meta_title":null,"meta_description":null,"codeinjection_head":null,"codeinjection_foot":null,"canonical_url":null,"accent_color":null,"created_at":"2023-08-11 08:35:35","created_by":"1","updated_at":"2023-08-11 08:35:35","updated_by":"1"},{"id":"64da6a0be17ae60001fb73aa","name":"Database","slug":"database","description":null,"feature_image":null,"parent_id":null,"visibility":"public","og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"meta_title":null,"meta_description":null,"codeinjection_head":null,"codeinjection_foot":null,"canonical_url":null,"accent_color":null,"created_at":"2023-08-14 17:53:15","created_by":"1","updated_at":"2023-08-14 17:53:15","updated_by":"1"},{"id":"64de4cd1f1c6660001711fce","name":"HTTP","slug":"http","description":null,"feature_image":null,"parent_id":null,"visibility":"public","og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"meta_title":null,"meta_description":null,"codeinjection_head":null,"codeinjection_foot":null,"canonical_url":null,"accent_color":null,"created_at":"2023-08-17 16:37:37","created_by":"1","updated_at":"2023-08-17 16:37:37","updated_by":"1"}],"posts_tags":[{"id":"635a816a57207246b927a8c2","post_id":"635a816a57207246b927a8a3","tag_id":"635a816a57207246b927a88b","sort_order":0},{"id":"635a816a57207246b927a8c5","post_id":"635a816a57207246b927a8a4","tag_id":"635a816a57207246b927a88b","sort_order":0},{"id":"635a816a57207246b927a8c9","post_id":"635a816a57207246b927a8a5","tag_id":"635a816a57207246b927a88d","sort_order":1},{"id":"635a816a57207246b927a8c8","post_id":"635a816a57207246b927a8a5","tag_id":"635a816a57207246b927a88c","sort_order":0},{"id":"635a816a57207246b927a8ce","post_id":"635a816a57207246b927a8a7","tag_id":"635a816a57207246b927a88b","sort_order":0},{"id":"635a816a57207246b927a8cf","post_id":"635a816a57207246b927a8a7","tag_id":"635a816a57207246b927a88e","sort_order":1},{"id":"635a816a57207246b927a8d2","post_id":"635a816a57207246b927a8a8","tag_id":"635a816a57207246b927a88b","sort_order":0},{"id":"635a816a57207246b927a8d5","post_id":"635a816a57207246b927a8a9","tag_id":"635a816a57207246b927a88f","sort_order":0},{"id":"635a816a57207246b927a8d6","post_id":"635a816a57207246b927a8a9","tag_id":"635a816a57207246b927a890","sort_order":1},{"id":"635a816a57207246b927a8d9","post_id":"635a816a57207246b927a8aa","tag_id":"635a816a57207246b927a891","sort_order":0},{"id":"635a816a57207246b927a8dc","post_id":"635a816a57207246b927a8ab","tag_id":"635a816a57207246b927a88e","sort_order":0},{"id":"635a816a57207246b927a8dd","post_id":"635a816a57207246b927a8ab","tag_id":"635a816a57207246b927a88b","sort_order":1},{"id":"635a816a57207246b927a8e1","post_id":"635a816a57207246b927a8ad","tag_id":"635a816a57207246b927a892","sort_order":0},{"id":"635a816a57207246b927a8e4","post_id":"635a816a57207246b927a8ae","tag_id":"635a816a57207246b927a88b","sort_order":0},{"id":"635a816a57207246b927a8e5","post_id":"635a816a57207246b927a8ae","tag_id":"635a816a57207246b927a88e","sort_order":1},{"id":"635a816a57207246b927a8e8","post_id":"635a816a57207246b927a8af","tag_id":"635a816a57207246b927a88b","sort_order":0},{"id":"635a816b57207246b927a8eb","post_id":"635a816a57207246b927a8b0","tag_id":"635a816a57207246b927a893","sort_order":0},{"id":"635a816b57207246b927a8ed","post_id":"635a816a57207246b927a8b0","tag_id":"635a816a57207246b927a895","sort_order":2},{"id":"635a816b57207246b927a8ec","post_id":"635a816a57207246b927a8b0","tag_id":"635a816a57207246b927a894","sort_order":1},{"id":"635a816b57207246b927a8f0","post_id":"635a816a57207246b927a8b1","tag_id":"635a816a57207246b927a896","sort_order":0},{"id":"635a816b57207246b927a8f3","post_id":"635a816a57207246b927a8b2","tag_id":"635a816a57207246b927a896","sort_order":0},{"id":"635a816b57207246b927a8f6","post_id":"635a816a57207246b927a8b3","tag_id":"635a816a57207246b927a896","sort_order":0},{"id":"635a816b57207246b927a8fa","post_id":"635a816a57207246b927a8b5","tag_id":"635a816a57207246b927a897","sort_order":0},{"id":"635a816b57207246b927a8fd","post_id":"635a816a57207246b927a8b6","tag_id":"635a816a57207246b927a898","sort_order":0},{"id":"635a816b57207246b927a900","post_id":"635a816a57207246b927a8b7","tag_id":"635a816a57207246b927a899","sort_order":0},{"id":"635a816b57207246b927a903","post_id":"635a816a57207246b927a8b8","tag_id":"635a816a57207246b927a89a","sort_order":0},{"id":"635a816b57207246b927a904","post_id":"635a816a57207246b927a8b8","tag_id":"635a816a57207246b927a89b","sort_order":1},{"id":"635a816b57207246b927a907","post_id":"635a816a57207246b927a8b9","tag_id":"635a816a57207246b927a88b","sort_order":0},{"id":"635a816b57207246b927a90a","post_id":"635a816a57207246b927a8ba","tag_id":"635a816a57207246b927a89c","sort_order":0},{"id":"635a816b57207246b927a90d","post_id":"635a816a57207246b927a8bb","tag_id":"635a816a57207246b927a89d","sort_order":0},{"id":"635a816b57207246b927a90e","post_id":"635a816a57207246b927a8bb","tag_id":"635a816a57207246b927a89e","sort_order":1},{"id":"635a816b57207246b927a911","post_id":"635a816a57207246b927a8bc","tag_id":"635a816a57207246b927a88c","sort_order":0},{"id":"635a816b57207246b927a914","post_id":"635a816a57207246b927a8bd","tag_id":"635a816a57207246b927a88c","sort_order":0},{"id":"635cf16e6c901d4844747e47","post_id":"635cf0c86c901d4844747e39","tag_id":"635a816a57207246b927a895","sort_order":0},{"id":"635cf7d26c901d4844747e5d","post_id":"635cf62e6c901d4844747e4b","tag_id":"635cf7d26c901d4844747e5c","sort_order":0},{"id":"635cfad76c901d4844747e6a","post_id":"635cf8c16c901d4844747e61","tag_id":"635cfad76c901d4844747e69","sort_order":0},{"id":"635cfbae6c901d4844747e78","post_id":"635cfb2e6c901d4844747e6e","tag_id":"635cfad76c901d4844747e69","sort_order":0},{"id":"635cfc696c901d4844747e85","post_id":"635cfc2d6c901d4844747e7d","tag_id":"635cfad76c901d4844747e69","sort_order":0},{"id":"635cfddf6c901d4844747e91","post_id":"635cfda26c901d4844747e89","tag_id":"635a816a57207246b927a88c","sort_order":0},{"id":"635cff8d6c901d4844747ea6","post_id":"635cfeb06c901d4844747e97","tag_id":"635cff8d6c901d4844747ea4","sort_order":0},{"id":"635cff8d6c901d4844747ea7","post_id":"635cfeb06c901d4844747e97","tag_id":"635cff8d6c901d4844747ea5","sort_order":1},{"id":"63e51a7c0a96e94f12972017","post_id":"63e5196c0a96e94f12972009","tag_id":"63e51a7c0a96e94f12972016","sort_order":0},{"id":"64d118e71f95c4000167e85f","post_id":"64d1177d1f95c4000167e858","tag_id":"635cff8d6c901d4844747ea5","sort_order":0},{"id":"64d2788aaaa1790001187628","post_id":"64d27827aaa179000118761d","tag_id":"64d2788aaaa1790001187627","sort_order":0},{"id":"64d2788aaaa1790001187629","post_id":"64d27827aaa179000118761d","tag_id":"635a816a57207246b927a893","sort_order":1},{"id":"64d5f2d75c5ac00001391bce","post_id":"64d5f2755c5ac00001391bc4","tag_id":"635a816a57207246b927a896","sort_order":0},{"id":"64d5f2d75c5ac00001391bcf","post_id":"64d5f2755c5ac00001391bc4","tag_id":"64d5f2d75c5ac00001391bcd","sort_order":1},{"id":"64d5fa5ee17ae60001fb7393","post_id":"64d5f976e17ae60001fb7389","tag_id":"64d5f2d75c5ac00001391bcd","sort_order":0},{"id":"64da6a0be17ae60001fb73ab","post_id":"64da6975e17ae60001fb739e","tag_id":"64da6a0be17ae60001fb73aa","sort_order":0},{"id":"64db1a19e17ae60001fb73b8","post_id":"64db19c5e17ae60001fb73af","tag_id":"64d2788aaaa1790001187627","sort_order":0},{"id":"64db1a19e17ae60001fb73b9","post_id":"64db19c5e17ae60001fb73af","tag_id":"635a816a57207246b927a893","sort_order":1},{"id":"64dbb68c5f1c820001e0a421","post_id":"64dbb5f35f1c820001e0a416","tag_id":"64d2788aaaa1790001187627","sort_order":0},{"id":"64dbb68c5f1c820001e0a422","post_id":"64dbb5f35f1c820001e0a416","tag_id":"635a816a57207246b927a893","sort_order":1},{"id":"64dbb68c5f1c820001e0a423","post_id":"64dbb5f35f1c820001e0a416","tag_id":"635a816a57207246b927a89c","sort_order":2},{"id":"64de4cd1f1c6660001711fcf","post_id":"64de4be0f1c6660001711fc3","tag_id":"64de4cd1f1c6660001711fce","sort_order":0},{"id":"64de4ce3f1c6660001711fd2","post_id":"64de4be0f1c6660001711fc3","tag_id":"635a816a57207246b927a89d","sort_order":1},{"id":"64e7a343f1c6660001711fe1","post_id":"64e7a2daf1c6660001711fd6","tag_id":"64d2788aaaa1790001187627","sort_order":0},{"id":"64e7a343f1c6660001711fe2","post_id":"64e7a2daf1c6660001711fd6","tag_id":"635a816a57207246b927a893","sort_order":1},{"id":"64ea48f24feca3000178b92b","post_id":"64ea48dd4feca3000178b923","tag_id":"64d2788aaaa1790001187627","sort_order":0},{"id":"64ea48f24feca3000178b92c","post_id":"64ea48dd4feca3000178b923","tag_id":"635a816a57207246b927a893","sort_order":1}],"products":[{"id":"635a807457207246b927a5e5","name":"Free","slug":"free","active":1,"welcome_page_url":null,"visibility":"public","trial_days":0,"description":null,"type":"free","currency":null,"monthly_price":null,"yearly_price":null,"created_at":"2022-10-27 12:58:28","updated_at":"2022-10-27 12:58:28","monthly_price_id":null,"yearly_price_id":null},{"id":"635a807457207246b927a5e6","name":"柴魚筆記本","slug":"default-product","active":1,"welcome_page_url":null,"visibility":"public","trial_days":0,"description":null,"type":"paid","currency":"usd","monthly_price":500,"yearly_price":5000,"created_at":"2022-10-27 12:58:28","updated_at":"2022-10-27 13:00:58","monthly_price_id":null,"yearly_price_id":null}],"offers":[],"benefits":[],"products_benefits":[],"posts_products":[{"id":"635a9a0c8162df0fda69a4a3","post_id":"635a9a038162df0fda69a49f","product_id":"635a807457207246b927a5e5","sort_order":0},{"id":"635a9a0c8162df0fda69a4a4","post_id":"635a9a038162df0fda69a49f","product_id":"635a807457207246b927a5e6","sort_order":1},{"id":"635cf0cf6c901d4844747e3d","post_id":"635cf0c86c901d4844747e39","product_id":"635a807457207246b927a5e5","sort_order":0},{"id":"635cf0cf6c901d4844747e3e","post_id":"635cf0c86c901d4844747e39","product_id":"635a807457207246b927a5e6","sort_order":1},{"id":"635cf6466c901d4844747e4f","post_id":"635cf62e6c901d4844747e4b","product_id":"635a807457207246b927a5e5","sort_order":0},{"id":"635cf6466c901d4844747e50","post_id":"635cf62e6c901d4844747e4b","product_id":"635a807457207246b927a5e6","sort_order":1},{"id":"635cf8d26c901d4844747e65","post_id":"635cf8c16c901d4844747e61","product_id":"635a807457207246b927a5e5","sort_order":0},{"id":"635cf8d26c901d4844747e66","post_id":"635cf8c16c901d4844747e61","product_id":"635a807457207246b927a5e6","sort_order":1},{"id":"635cfb406c901d4844747e72","post_id":"635cfb2e6c901d4844747e6e","product_id":"635a807457207246b927a5e5","sort_order":0},{"id":"635cfb406c901d4844747e73","post_id":"635cfb2e6c901d4844747e6e","product_id":"635a807457207246b927a5e6","sort_order":1},{"id":"635cfc446c901d4844747e81","post_id":"635cfc2d6c901d4844747e7d","product_id":"635a807457207246b927a5e5","sort_order":0},{"id":"635cfc446c901d4844747e82","post_id":"635cfc2d6c901d4844747e7d","product_id":"635a807457207246b927a5e6","sort_order":1},{"id":"635cfdb06c901d4844747e8d","post_id":"635cfda26c901d4844747e89","product_id":"635a807457207246b927a5e5","sort_order":0},{"id":"635cfdb06c901d4844747e8e","post_id":"635cfda26c901d4844747e89","product_id":"635a807457207246b927a5e6","sort_order":1},{"id":"635cfebf6c901d4844747e9b","post_id":"635cfeb06c901d4844747e97","product_id":"635a807457207246b927a5e5","sort_order":0},{"id":"635cfebf6c901d4844747e9c","post_id":"635cfeb06c901d4844747e97","product_id":"635a807457207246b927a5e6","sort_order":1},{"id":"63e519810a96e94f1297200d","post_id":"63e5196c0a96e94f12972009","product_id":"635a807457207246b927a5e5","sort_order":0},{"id":"63e519810a96e94f1297200e","post_id":"63e5196c0a96e94f12972009","product_id":"635a807457207246b927a5e6","sort_order":1},{"id":"64d117d51f95c4000167e85c","post_id":"64d1177d1f95c4000167e858","product_id":"635a807457207246b927a5e5","sort_order":0},{"id":"64d117d51f95c4000167e85d","post_id":"64d1177d1f95c4000167e858","product_id":"635a807457207246b927a5e6","sort_order":1},{"id":"64d2783aaaa1790001187621","post_id":"64d27827aaa179000118761d","product_id":"635a807457207246b927a5e5","sort_order":0},{"id":"64d2783aaaa1790001187622","post_id":"64d27827aaa179000118761d","product_id":"635a807457207246b927a5e6","sort_order":1},{"id":"64d27d5eaaa1790001187632","post_id":"635a816a57207246b927a8b0","product_id":"635a807457207246b927a5e5","sort_order":0},{"id":"64d27d5eaaa1790001187633","post_id":"635a816a57207246b927a8b0","product_id":"635a807457207246b927a5e6","sort_order":1},{"id":"64d5f2865c5ac00001391bc8","post_id":"64d5f2755c5ac00001391bc4","product_id":"635a807457207246b927a5e5","sort_order":0},{"id":"64d5f2865c5ac00001391bc9","post_id":"64d5f2755c5ac00001391bc4","product_id":"635a807457207246b927a5e6","sort_order":1},{"id":"64d5f983e17ae60001fb738d","post_id":"64d5f976e17ae60001fb7389","product_id":"635a807457207246b927a5e5","sort_order":0},{"id":"64d5f983e17ae60001fb738e","post_id":"64d5f976e17ae60001fb7389","product_id":"635a807457207246b927a5e6","sort_order":1},{"id":"64da697de17ae60001fb73a2","post_id":"64da6975e17ae60001fb739e","product_id":"635a807457207246b927a5e5","sort_order":0},{"id":"64da697de17ae60001fb73a3","post_id":"64da6975e17ae60001fb739e","product_id":"635a807457207246b927a5e6","sort_order":1},{"id":"64db19d2e17ae60001fb73b3","post_id":"64db19c5e17ae60001fb73af","product_id":"635a807457207246b927a5e5","sort_order":0},{"id":"64db19d2e17ae60001fb73b4","post_id":"64db19c5e17ae60001fb73af","product_id":"635a807457207246b927a5e6","sort_order":1},{"id":"64dbb6035f1c820001e0a41a","post_id":"64dbb5f35f1c820001e0a416","product_id":"635a807457207246b927a5e5","sort_order":0},{"id":"64dbb6035f1c820001e0a41b","post_id":"64dbb5f35f1c820001e0a416","product_id":"635a807457207246b927a5e6","sort_order":1},{"id":"64dcd62ef1c6660001711fbd","post_id":"635a816a57207246b927a8ba","product_id":"635a807457207246b927a5e5","sort_order":0},{"id":"64dcd62ef1c6660001711fbe","post_id":"635a816a57207246b927a8ba","product_id":"635a807457207246b927a5e6","sort_order":1},{"id":"64de4c11f1c6660001711fc7","post_id":"64de4be0f1c6660001711fc3","product_id":"635a807457207246b927a5e5","sort_order":0},{"id":"64de4c11f1c6660001711fc8","post_id":"64de4be0f1c6660001711fc3","product_id":"635a807457207246b927a5e6","sort_order":1},{"id":"64e7a2e8f1c6660001711fda","post_id":"64e7a2daf1c6660001711fd6","product_id":"635a807457207246b927a5e5","sort_order":0},{"id":"64e7a2e8f1c6660001711fdb","post_id":"64e7a2daf1c6660001711fd6","product_id":"635a807457207246b927a5e6","sort_order":1},{"id":"64ea48e94feca3000178b927","post_id":"64ea48dd4feca3000178b923","product_id":"635a807457207246b927a5e5","sort_order":0},{"id":"64ea48e94feca3000178b928","post_id":"64ea48dd4feca3000178b923","product_id":"635a807457207246b927a5e6","sort_order":1}],"offer_redemptions":[],"stripe_products":[],"stripe_prices":[],"snippets":[],"custom_theme_settings":[{"id":"635a807857207246b927a7d4","theme":"casper","key":"title_font","type":"select","value":"Modern sans-serif"},{"id":"635a807857207246b927a7d5","theme":"casper","key":"body_font","type":"select","value":"Elegant serif"},{"id":"635a807857207246b927a7d6","theme":"casper","key":"show_publication_cover","type":"boolean","value":"true"},{"id":"635a807857207246b927a7d7","theme":"casper","key":"header_style","type":"select","value":"Center aligned"},{"id":"635a807857207246b927a7d8","theme":"casper","key":"show_logo_in_navigation","type":"boolean","value":"false"},{"id":"635a807857207246b927a7d9","theme":"casper","key":"feed_layout","type":"select","value":"Classic"},{"id":"635a807857207246b927a7da","theme":"casper","key":"color_scheme","type":"select","value":"Light"},{"id":"635a807857207246b927a7db","theme":"casper","key":"post_image_style","type":"select","value":"Wide"},{"id":"635a807857207246b927a7dc","theme":"casper","key":"email_signup_text","type":"text","value":"Sign up for more like this."},{"id":"635a807857207246b927a7dd","theme":"casper","key":"show_recent_posts_footer","type":"boolean","value":"true"},{"id":"635a822057207246b927a91b","theme":"attila-3.6.1","key":"color_scheme","type":"select","value":"System"},{"id":"635a822057207246b927a91c","theme":"attila-3.6.1","key":"disqus_shortname","type":"text","value":null},{"id":"635a822057207246b927a91d","theme":"attila-3.6.1","key":"darkmode_accent_color","type":"color","value":"#52768E"}]}}